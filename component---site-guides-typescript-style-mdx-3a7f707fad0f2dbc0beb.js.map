{"version":3,"sources":["webpack:///./site/guides/typescript-style.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---site-guides-typescript-style-mdx-3a7f707fad0f2dbc0beb.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/design-system/design-system/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"typescript-style\"\n    }}>{`Typescript Style`}</h1>\n    <h2 {...{\n      \"id\": \"variable-and-function\"\n    }}>{`Variable and Function`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`camelCase`}</inlineCode>{` for variable and function names`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reason: Conventional JavaScript`}</p>\n    </blockquote>\n    <p><strong parentName=\"p\">{`Bad`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`var FooVar;\nfunction BarFunc() { }\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Good`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`var fooVar;\nfunction barFunc() { }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"class\"\n    }}>{`Class`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`PascalCase`}</inlineCode>{` for class names.`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reason: This is actually fairly conventional in standard JavaScript.`}</p>\n    </blockquote>\n    <p><strong parentName=\"p\">{`Bad`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`class foo { }\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Good`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`class Foo { }\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`camelCase`}</inlineCode>{` of class members and methods`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reason: Naturally follows from variable and function naming convention.`}</p>\n    </blockquote>\n    <p><strong parentName=\"p\">{`Bad`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`class Foo {\n    Bar: number;\n    Baz() { }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Good`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`class Foo {\n    bar: number;\n    baz() { }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"interface\"\n    }}>{`Interface`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`PascalCase`}</inlineCode>{` for name.`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reason: Similar to class`}</p>\n    </blockquote>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`camelCase`}</inlineCode>{` for members.`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reason: Similar to class`}</p>\n    </blockquote>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Don't`}</strong>{` prefix with `}<inlineCode parentName=\"li\">{`I`}</inlineCode></li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reason: Unconventional. `}<inlineCode parentName=\"p\">{`lib.d.ts`}</inlineCode>{` defines important interfaces without an `}<inlineCode parentName=\"p\">{`I`}</inlineCode>{` (e.g. Window, Document etc).`}</p>\n    </blockquote>\n    <p><strong parentName=\"p\">{`Bad`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface IFoo {\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Good`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface Foo {\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"type\"\n    }}>{`Type`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`PascalCase`}</inlineCode>{` for name.`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reason: Similar to class`}</p>\n    </blockquote>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`camelCase`}</inlineCode>{` for members.`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reason: Similar to class`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"namespace\"\n    }}>{`Namespace`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`PascalCase`}</inlineCode>{` for names`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reason: Convention followed by the TypeScript team. Namespaces are effectively just a class with static members. Class names are `}<inlineCode parentName=\"p\">{`PascalCase`}</inlineCode>{` => Namespace names are `}<inlineCode parentName=\"p\">{`PascalCase`}</inlineCode></p>\n    </blockquote>\n    <p><strong parentName=\"p\">{`Bad`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`namespace foo {\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Good`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`namespace Foo {\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enum\"\n    }}>{`Enum`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`PascalCase`}</inlineCode>{` for enum names`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reason: Similar to Class. Is a Type.`}</p>\n    </blockquote>\n    <p><strong parentName=\"p\">{`Bad`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`enum color {\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Good`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`enum Color {\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`PascalCase`}</inlineCode>{` for enum member`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reason: Convention followed by TypeScript team i.e. the language creators e.g `}<inlineCode parentName=\"p\">{`SyntaxKind.StringLiteral`}</inlineCode>{`. Also helps with translation (code generation) of other languages into TypeScript.`}</p>\n    </blockquote>\n    <p><strong parentName=\"p\">{`Bad`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`enum Color {\n    red\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Good`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`enum Color {\n    Red\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"null-vs-undefined\"\n    }}>{`Null vs. Undefined`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Prefer not to use either for explicit unavailability`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reason: these values are commonly used to keep a consistent structure between values. In TypeScript you use `}<em parentName=\"p\">{`types`}</em>{` to denote the structure`}</p>\n    </blockquote>\n    <p><strong parentName=\"p\">{`Bad`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`let foo = {x:123,y:undefined};\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Good`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`let foo:{x:number,y?:number} = {x:123};\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`undefined`}</inlineCode>{` in general (do consider returning an object like `}<inlineCode parentName=\"li\">{`{valid:boolean,value?:Foo}`}</inlineCode>{` instead)`}</li>\n    </ul>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`Bad`}</em></strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`return null;\n`}</code></pre>\n    <p><strong parentName=\"p\"><em parentName=\"strong\">{`Good`}</em></strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`return undefined;\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`null`}</inlineCode>{` where its a part of the API or conventional`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reason: It is conventional in Node.js e.g. `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` for NodeBack style callbacks.`}</p>\n    </blockquote>\n    <p><strong parentName=\"p\">{`Bad`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`cb(undefined)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Good`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`cb(null)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<em parentName=\"li\">{`truthy`}</em>{` check for `}<strong parentName=\"li\">{`objects`}</strong>{` being `}<inlineCode parentName=\"li\">{`null`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`undefined`}</inlineCode></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Bad`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`if (error === null)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Good`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`if (error)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`== null`}</inlineCode>{` / `}<inlineCode parentName=\"li\">{`!= null`}</inlineCode>{` (not `}<inlineCode parentName=\"li\">{`===`}</inlineCode>{` / `}<inlineCode parentName=\"li\">{`!==`}</inlineCode>{`) to check for `}<inlineCode parentName=\"li\">{`null`}</inlineCode>{` / `}<inlineCode parentName=\"li\">{`undefined`}</inlineCode>{` on primitives as it works for both `}<inlineCode parentName=\"li\">{`null`}</inlineCode>{`/`}<inlineCode parentName=\"li\">{`undefined`}</inlineCode>{` but not other falsy values (like `}<inlineCode parentName=\"li\">{`''`}</inlineCode>{`,`}<inlineCode parentName=\"li\">{`0`}</inlineCode>{`,`}<inlineCode parentName=\"li\">{`false`}</inlineCode>{`) e.g.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Bad`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`if (error !== null) // does not rule out undefined\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Good`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`if (error != null) // rules out both null and undefined\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"formatting\"\n    }}>{`Formatting`}</h2>\n    <p>{`The TypeScript compiler ships with a very nice formatting language service. Whatever output it gives by default is good enough to reduce the cognitive overload on the team.`}</p>\n    <p>{`Use `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/vvakame/typescript-formatter\"\n      }}><inlineCode parentName=\"a\">{`tsfmt`}</inlineCode></a>{` to automatically format your code on the command line. Also your IDE (atom/vscode/vs/sublime) already has formatting support built-in.`}</p>\n    <p>{`Examples:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// Space before type i.e. foo:<space>string\nconst foo: string = \"hello\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"quotes\"\n    }}>{`Quotes`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Prefer single quotes (`}<inlineCode parentName=\"li\">{`'`}</inlineCode>{`) unless escaping.`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reason: More JavaScript teams do this (e.g. `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/airbnb/javascript\"\n        }}>{`airbnb`}</a>{`, `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/feross/standard\"\n        }}>{`standard`}</a>{`, `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/npm/npm\"\n        }}>{`npm`}</a>{`, `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/nodejs/node\"\n        }}>{`node`}</a>{`, `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/angular/angular/\"\n        }}>{`google/angular`}</a>{`, `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/facebook/react\"\n        }}>{`facebook/react`}</a>{`). Its easier to type (no shift needed on most keyboards). `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/prettier/prettier/issues/1105\"\n        }}>{`Prettier team recommends single quotes as well`}</a></p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Double quotes are not without merit: Allows easier copy paste of objects into JSON. Allows people to use other languages to work without changing their quote character. Allows you to use apostrophes e.g. `}<inlineCode parentName=\"p\">{`He's not going.`}</inlineCode>{`. But I'd rather not deviate from where the JS Community is fairly decided.`}</p>\n    </blockquote>\n    <ul>\n      <li parentName=\"ul\">{`When you can't use double quotes, try using back ticks (`}{`\\``}{`).`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reason: These generally represent the intent of complex enough strings.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"spaces\"\n    }}>{`Spaces`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`2`}</inlineCode>{` spaces. Not tabs.`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reason: More JavaScript teams do this (e.g. `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/airbnb/javascript\"\n        }}>{`airbnb`}</a>{`, `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/rwaldron/idiomatic.js\"\n        }}>{`idiomatic`}</a>{`, `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/feross/standard\"\n        }}>{`standard`}</a>{`, `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/npm/npm\"\n        }}>{`npm`}</a>{`, `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/nodejs/node\"\n        }}>{`node`}</a>{`, `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/angular/angular/\"\n        }}>{`google/angular`}</a>{`, `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/facebook/react\"\n        }}>{`facebook/react`}</a>{`). The TypeScript/VSCode teams use 4 spaces but are definitely the exception in the ecosystem.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"semicolons\"\n    }}>{`Semicolons`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Use semicolons.`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reasons: Explicit semicolons helps language formatting tools give consistent results. Missing ASI (automatic semicolon insertion) can trip new devs e.g. `}<inlineCode parentName=\"p\">{`foo() \\\\n (function(){})`}</inlineCode>{` will be a single statement (not two). TC39 `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/tc39/ecma262/pull/1062\"\n        }}>{`warning on this as well`}</a>{`. Example teams: `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/airbnb/javascript\"\n        }}>{`airbnb`}</a>{`, `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/rwaldron/idiomatic.js\"\n        }}>{`idiomatic`}</a>{`, `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/angular/angular/\"\n        }}>{`google/angular`}</a>{`, `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/facebook/react\"\n        }}>{`facebook/react`}</a>{`, `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/Microsoft/TypeScript/\"\n        }}>{`Microsoft/TypeScript`}</a>{`.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"array\"\n    }}>{`Array`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Annotate arrays as `}<inlineCode parentName=\"li\">{`foos:Foo[]`}</inlineCode>{` instead of `}<inlineCode parentName=\"li\">{`foos:Array<Foo>`}</inlineCode>{`.`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reasons: Its easier to read. Its used by the TypeScript team. Makes easier to know something is an array as the mind is trained to detect `}<inlineCode parentName=\"p\">{`[]`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"filename\"\n    }}>{`Filename`}</h2>\n    <p>{`Name files with `}<inlineCode parentName=\"p\">{`camelCase`}</inlineCode>{`. E.g. `}<inlineCode parentName=\"p\">{`accordion.tsx`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`myControl.tsx`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`utils.ts`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`map.ts`}</inlineCode>{` etc.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reason: Conventional across many JS teams.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"type-vs-interface\"\n    }}>{`type vs. interface`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`type`}</inlineCode>{` when you `}<em parentName=\"li\">{`might`}</em>{` need a union or intersection:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`type Foo = number | { someProperty: number }\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`interface`}</inlineCode>{` when you want `}<inlineCode parentName=\"li\">{`extends`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`implements`}</inlineCode>{` e.g`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{}}>{`interface Foo {\n  foo: string;\n}\ninterface FooBar extends Foo {\n  bar: string;\n}\nclass X implements FooBar {\n  foo: string;\n  bar: string;\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Otherwise use whatever makes you happy that day.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}