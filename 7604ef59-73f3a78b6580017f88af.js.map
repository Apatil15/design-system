{"version":3,"sources":["webpack:///./site/guides/javascript-style.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","name","isMDXComponent"],"mappings":"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","file":"7604ef59-73f3a78b6580017f88af.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/design-system/design-system/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"javascript-style\"\n    }}>{`JavaScript Style`}</h1>\n    <blockquote>\n      <p parentName=\"blockquote\">{`A guide for writing consistent and aesthetically pleasing JavaScript.`}</p>\n    </blockquote>\n    <p>{`Inspired by other popular styles such as `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/\"\n      }}><inlineCode parentName=\"a\">{`eslint:recommended`}</inlineCode></a>{`, and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/airbnb/javascript/#airbnb-javascript-style-guide-\"\n      }}>{`Airbnb`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"formatting\"\n    }}>{`Formatting`}</h2>\n    <h3 {...{\n      \"id\": \"tabs-for-indentation\"\n    }}>{`Tabs for indentation`}</h3>\n    <p>{`Use tabs for indenting your code. With tabs users can choose their desired width. This has positive implications for accessibility and screenreaders, putting people in control of how they want to view the code.`}</p>\n    <h3 {...{\n      \"id\": \"newlines\"\n    }}>{`Newlines`}</h3>\n    <p>{`Use UNIX-style newlines (`}<inlineCode parentName=\"p\">{`\\\\n`}</inlineCode>{`), and a newline character as the last character of a file. Windows-style newlines (`}<inlineCode parentName=\"p\">{`\\\\r\\\\n`}</inlineCode>{`) are forbidden inside any repository.`}</p>\n    <h3 {...{\n      \"id\": \"no-trailing-whitespace\"\n    }}>{`No trailing whitespace`}</h3>\n    <p>{`Always clean up any trailing whitespace in your .js files before committing.`}</p>\n    <h3 {...{\n      \"id\": \"use-semicolons\"\n    }}>{`Use semicolons`}</h3>\n    <p>{`According to scientific research, the usage of semicolons is a core value of our community. Consider the points of the opposition, but be a traditionalist when it comes to abusing error correction mechanisms for cheap syntactic pleasures.`}</p>\n    <h3 {...{\n      \"id\": \"80-characters-per-line\"\n    }}>{`80 characters per line`}</h3>\n    <p>{`Limit your lines to 80 characters. Yes, screens have gotten much bigger over the last few years, but your brain has not. Use the additional room for split screen, your editor supports that, right?`}</p>\n    <h3 {...{\n      \"id\": \"use-single-quotes\"\n    }}>{`Use single quotes`}</h3>\n    <p>{`Use single quotes, unless you are writing JSON. This helps you separate your objects' strings from normal strings.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nvar foo = \"bad\";\n\n// good 👍\nvar foo = 'bar';\n`}</code></pre>\n    <p>{`Opening braces go on the same line, Your opening braces go on the same line as the statement.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nif (true)\n{\n    console.log('losing');\n}\n\n// good 👍\nif (true) {\n    console.log('winning');\n}\n`}</code></pre>\n    <p>{`Also, notice the use of whitespace before and after the condition statement. What if you want to write 'else' or 'else if' along with your 'if'...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nif (true)\n{\n    console.log('losing');\n}\nelse if (false)\n{\n    console.log('this is bad');\n}\nelse\n{\n    console.log('not good');\n}\n\n// good 👍\nif (true) {\n    console.log('winning');\n} else if (false) {\n    console.log('this is good');\n} else {\n    console.log('finally');\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"declare-one-variable-per-var-statement\"\n    }}>{`Declare one variable per var statement`}</h3>\n    <p>{`Declare one variable per var statement, it makes it easier to re-order the lines.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nvar keys = ['foo', 'bar'],\nvalues = [23, 42],\nobject = {},\nkey;\n\n// good 👍\nvar keys = ['foo', 'bar'];\nvar values = [23, 42];\nvar object = {};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"whitespace\"\n    }}>{`Whitespace`}</h2>\n    <h3 {...{\n      \"id\": \"use-tabs\"\n    }}>{`Use tabs.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/indent.html\"\n      }}><inlineCode parentName=\"a\">{`indent`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nfunction foo() {\n∙∙let name;\n}\n\n// bad 👎\nfunction bar() {\n∙let name;\n}\n\n// good 👍\nfunction baz() {\n∙ let name;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"place-1-space-before-the-leading-brace\"\n    }}>{`Place 1 space before the leading brace.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/space-before-blocks.html\"\n      }}><inlineCode parentName=\"a\">{`space-before-blocks`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nfunction test(){\n    console.log('test');\n}\n\n// good 👍\nfunction test() {\n    console.log('test');\n}\n\n// bad 👎\ndog.set('attr',{\n    age: '1 year',\n    breed: 'Bernese Mountain Dog',\n});\n\n// good 👍\ndog.set('attr', {\n    age: '1 year',\n    breed: 'Bernese Mountain Dog',\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"place-1-space-before-the-opening-parenthesis-in-control-statements-if-while-etc-place-no-space-between-the-argument-list-and-the-function-name-in-function-calls-and-declarations\"\n    }}>{`Place 1 space before the opening parenthesis in control statements (`}<inlineCode parentName=\"h3\">{`if`}</inlineCode>{`, `}<inlineCode parentName=\"h3\">{`while`}</inlineCode>{` etc.). Place no space between the argument list and the function name in function calls and declarations.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/keyword-spacing.html\"\n      }}><inlineCode parentName=\"a\">{`keyword-spacing`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nif(isJedi) {\n    fight ();\n}\n\n// good 👍\nif (isJedi) {\n    fight();\n}\n\n// bad 👎\nfunction fight () {\n    console.log ('Swooosh!');\n}\n\n// good 👍\nfunction fight() {\n    console.log('Swooosh!');\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"set-off-operators-with-spaces\"\n    }}>{`Set off operators with spaces.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/space-infix-ops.html\"\n      }}><inlineCode parentName=\"a\">{`space-infix-ops`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nconst x=y+5;\n\n// good 👍\nconst x = y + 5;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"end-files-with-a-single-newline-character\"\n    }}>{`End files with a single newline character.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/eslint/eslint/blob/master/docs/rules/eol-last.md\"\n      }}><inlineCode parentName=\"a\">{`eol-last`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nimport { es6 } from './AirbnbStyleGuide';\n    // ...\nexport default es6;\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nimport { es6 } from './AirbnbStyleGuide';\n    // ...\nexport default es6;↵\n↵\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// good 👍\nimport { es6 } from './AirbnbStyleGuide';\n    // ...\nexport default es6;↵\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-indentation-when-making-long-method-chains-more-than-2-method-chains-use-a-leading-dot-which-emphasizes-that-the-line-is-a-method-call-not-a-new-statement\"\n    }}>{`Use indentation when making long method chains (more than 2 method chains). Use a leading dot, which emphasizes that the line is a method call, not a new statement.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/newline-per-chained-call\"\n      }}><inlineCode parentName=\"a\">{`newline-per-chained-call`}</inlineCode></a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-whitespace-before-property\"\n      }}><inlineCode parentName=\"a\">{`no-whitespace-before-property`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\n$('#items').find('.selected').highlight().end().find('.open').updateCount();\n\n// bad 👎\n$('#items').\n  find('.selected').\n    highlight().\n    end().\n  find('.open').\n    updateCount();\n\n// good 👍\n$('#items')\n  .find('.selected')\n    .highlight()\n    .end()\n  .find('.open')\n    .updateCount();\n\n// bad 👎\nconst leds = stage.selectAll('.led').data(data).enter().append('svg:svg').classed('led', true)\n    .attr('width', (radius + margin) * 2).append('svg:g')\n    .attr('transform', \\`translate(\\${radius + margin},\\${radius + margin})\\`)\n    .call(tron.led);\n\n// good 👍\nconst leds = stage.selectAll('.led')\n    .data(data)\n  .enter().append('svg:svg')\n    .classed('led', true)\n    .attr('width', (radius + margin) * 2)\n  .append('svg:g')\n    .attr('transform', \\`translate(\\${radius + margin},\\${radius + margin})\\`)\n    .call(tron.led);\n\n// good 👍\nconst leds = stage.selectAll('.led').data(data);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"leave-a-blank-line-after-blocks-and-before-the-next-statement\"\n    }}>{`Leave a blank line after blocks and before the next statement.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nif (foo) {\n  return bar;\n}\nreturn baz;\n\n// good 👍\nif (foo) {\n  return bar;\n}\n\nreturn baz;\n\n// bad 👎\nconst obj = {\n  foo() {\n  },\n  bar() {\n  },\n};\nreturn obj;\n\n// good 👍\nconst obj = {\n  foo() {\n  },\n\n  bar() {\n  },\n};\n\nreturn obj;\n\n// bad 👎\nconst arr = [\n  function foo() {\n  },\n  function bar() {\n  },\n];\nreturn arr;\n\n// good 👍\nconst arr = [\n  function foo() {\n  },\n\n  function bar() {\n  },\n];\n\nreturn arr;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"do-not-pad-your-blocks-with-blank-lines\"\n    }}>{`Do not pad your blocks with blank lines.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/padded-blocks.html\"\n      }}><inlineCode parentName=\"a\">{`padded-blocks`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nfunction bar() {\n\n  console.log(foo);\n\n}\n\n// bad 👎\nif (baz) {\n\n  console.log(qux);\n} else {\n  console.log(foo);\n\n}\n\n// bad 👎\nclass Foo {\n\n  constructor(bar) {\n    this.bar = bar;\n  }\n}\n\n// good 👍\nfunction bar() {\n  console.log(foo);\n}\n\n// good 👍\nif (baz) {\n  console.log(qux);\n} else {\n  console.log(foo);\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"do-not-use-multiple-blank-lines-to-pad-your-code\"\n    }}>{`Do not use multiple blank lines to pad your code.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-multiple-empty-lines\"\n      }}><inlineCode parentName=\"a\">{`no-multiple-empty-lines`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nclass Person {\n  constructor(fullName, email, birthday) {\n    this.fullName = fullName;\n\n\n    this.email = email;\n\n\n    this.setAge(birthday);\n  }\n\n\n  setAge(birthday) {\n    const today = new Date();\n\n\n    const age = this.getAge(today, birthday);\n\n\n    this.age = age;\n  }\n\n\n  getAge(today, birthday) {\n    // ..\n  }\n}\n\n// good 👍\nclass Person {\n  constructor(fullName, email, birthday) {\n    this.fullName = fullName;\n    this.email = email;\n    this.setAge(birthday);\n  }\n\n  setAge(birthday) {\n    const today = new Date();\n    const age = getAge(today, birthday);\n    this.age = age;\n  }\n\n  getAge(today, birthday) {\n    // ..\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"do-not-add-spaces-inside-parentheses\"\n    }}>{`Do not add spaces inside parentheses.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/space-in-parens.html\"\n      }}><inlineCode parentName=\"a\">{`space-in-parens`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nfunction bar( foo ) {\n  return foo;\n}\n\n// good 👍\nfunction bar(foo) {\n  return foo;\n}\n\n// bad 👎\nif ( foo ) {\n  console.log(foo);\n}\n\n// good 👍\nif (foo) {\n  console.log(foo);\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"do-not-add-spaces-inside-brackets\"\n    }}>{`Do not add spaces inside brackets.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/array-bracket-spacing.html\"\n      }}><inlineCode parentName=\"a\">{`array-bracket-spacing`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nconst foo = [ 1, 2, 3 ];\nconsole.log(foo[ 0 ]);\n\n// good 👍\nconst foo = [1, 2, 3];\nconsole.log(foo[0]);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"add-spaces-inside-curly-braces\"\n    }}>{`Add spaces inside curly braces.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/object-curly-spacing.html\"\n      }}><inlineCode parentName=\"a\">{`object-curly-spacing`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nconst foo = {clark: 'kent'};\n\n// good 👍\nconst foo = { clark: 'kent' };\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"avoid-having-lines-of-code-that-are-longer-than-80-characters-including-whitespace-note-long-strings-are-exempt-from-this-rule-and-should-not-be-broken-up\"\n    }}>{`Avoid having lines of code that are longer than 80 characters (including whitespace). Note: long strings are exempt from this rule, and should not be broken up.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/max-len.html\"\n      }}><inlineCode parentName=\"a\">{`max-len`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? This ensures readability and maintainability.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nconst foo = jsonData && jsonData.foo && jsonData.foo.bar && jsonData.foo.bar.baz && jsonData.foo.bar.baz.quux && jsonData.foo.bar.baz.quux.xyzzy;\n\n// bad 👎\n$.ajax({ method: 'POST', url: 'https://airbnb.com/', data: { name: 'John' } }).done(() => console.log('Congratulations!')).fail(() => console.log('You have failed this city.'));\n\n// good 👍\nconst foo = jsonData\n  && jsonData.foo\n  && jsonData.foo.bar\n  && jsonData.foo.bar.baz\n  && jsonData.foo.bar.baz.quux\n  && jsonData.foo.bar.baz.quux.xyzzy;\n\n// good 👍\n$.ajax({\n  method: 'POST',\n  url: 'https://airbnb.com/',\n  data: { name: 'John' },\n})\n  .done(() => console.log('Congratulations!'))\n  .fail(() => console.log('You have failed this city.'));\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"require-consistent-spacing-inside-an-open-block-token-and-the-next-token-on-the-same-line-this-rule-also-enforces-consistent-spacing-inside-a-close-block-token-and-previous-token-on-the-same-line\"\n    }}>{`Require consistent spacing inside an open block token and the next token on the same line. This rule also enforces consistent spacing inside a close block token and previous token on the same line.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/block-spacing\"\n      }}><inlineCode parentName=\"a\">{`block-spacing`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nfunction foo() {return true;}\nif (foo) { bar = 0;}\n\n// good 👍\nfunction foo() { return true; }\nif (foo) { bar = 0; }\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"avoid-spaces-before-commas-and-require-a-space-after-commas\"\n    }}>{`Avoid spaces before commas and require a space after commas.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/comma-spacing\"\n      }}><inlineCode parentName=\"a\">{`comma-spacing`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nvar foo = 1,bar = 2;\nvar arr = [1 , 2];\n\n// good 👍\nvar foo = 1, bar = 2;\nvar arr = [1, 2];\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"enforce-spacing-inside-of-computed-property-brackets\"\n    }}>{`Enforce spacing inside of computed property brackets.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/computed-property-spacing\"\n      }}><inlineCode parentName=\"a\">{`computed-property-spacing`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nobj[foo ]\nobj[ 'foo']\nvar x = {[ b ]: a}\nobj[foo[ bar ]]\n\n// good 👍\nobj[foo]\nobj['foo']\nvar x = { [b]: a }\nobj[foo[bar]]\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"avoid-spaces-between-functions-and-their-invocations\"\n    }}>{`Avoid spaces between functions and their invocations.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/func-call-spacing\"\n      }}><inlineCode parentName=\"a\">{`func-call-spacing`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nfunc ();\n\nfunc\n();\n\n// good 👍\nfunc();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"enforce-spacing-between-keys-and-values-in-object-literal-properties\"\n    }}>{`Enforce spacing between keys and values in object literal properties.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/key-spacing\"\n      }}><inlineCode parentName=\"a\">{`key-spacing`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nvar obj = { foo : 42 };\nvar obj2 = { foo:42 };\n\n// good 👍\nvar obj = { foo: 42 };\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"avoid-trailing-spaces-at-the-end-of-lines\"\n    }}>{`Avoid trailing spaces at the end of lines.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-trailing-spaces\"\n      }}><inlineCode parentName=\"a\">{`no-trailing-spaces`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"avoid-multiple-empty-lines-only-allow-one-newline-at-the-end-of-files-and-avoid-a-newline-at-the-beginning-of-files\"\n    }}>{`Avoid multiple empty lines, only allow one newline at the end of files, and avoid a newline at the beginning of files.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-multiple-empty-lines\"\n      }}><inlineCode parentName=\"a\">{`no-multiple-empty-lines`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎 - multiple empty lines\nvar x = 1;\n\n\nvar y = 2;\n\n// bad 👎 - 2+ newlines at end of file\nvar x = 1;\nvar y = 2;\n\n\n// bad 👎 - 1+ newline(s) at beginning of file\n\nvar x = 1;\nvar y = 2;\n\n// good 👍\nvar x = 1;\nvar y = 2;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"types\"\n    }}>{`Types`}</h2>\n    <h3 {...{\n      \"id\": \"primitives\"\n    }}>{`Primitives`}</h3>\n    <p>{`When you access a primitive type you work directly on its value.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`string`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`number`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`boolean`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`null`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`undefined`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`symbol`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`bigint`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const foo = 1;\nlet bar = foo;\n\nbar = 9;\n\nconsole.log(foo, bar); // => 1, 9\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Symbols and BigInts cannot be faithfully polyfilled, so they should not be used when targeting browsers/environments that don't support them natively.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"complex\"\n    }}>{`Complex:`}</h3>\n    <p>{`When you access a complex type you work on a reference to its value.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`object`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`array`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`function`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const foo = [1, 2];\nconst bar = foo;\n\nbar[0] = 9;\n\nconsole.log(foo[0], bar[0]); // => 9, 9\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h2>\n    <h3 {...{\n      \"id\": \"use-const-for-all-of-your-references\"\n    }}>{`Use `}<inlineCode parentName=\"h3\">{`const`}</inlineCode>{` for all of your references:`}</h3>\n    <p>{`avoid using `}<inlineCode parentName=\"p\">{`var`}</inlineCode>{`. eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/prefer-const.html\"\n      }}><inlineCode parentName=\"a\">{`prefer-const`}</inlineCode></a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-const-assign.html\"\n      }}><inlineCode parentName=\"a\">{`no-const-assign`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: This ensures that you can't reassign your references, which can lead to bugs and difficult to comprehend code.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nvar a = 1;\nvar b = 2;\n\n// good 👍\nconst a = 1;\nconst b = 2;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-let-instead-of-var\"\n    }}>{`Use `}<inlineCode parentName=\"h3\">{`let`}</inlineCode>{` instead of `}<inlineCode parentName=\"h3\">{`var`}</inlineCode>{`.`}</h3>\n    <p>{`If you must reassign references, use 'let' instead of 'var'. eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-var.html\"\n      }}><inlineCode parentName=\"a\">{`no-var`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: `}<inlineCode parentName=\"p\">{`let`}</inlineCode>{` is block-scoped rather than function-scoped like `}<inlineCode parentName=\"p\">{`var`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nvar count = 1;\nif (true) {\n  count += 1;\n}\n\n// good 👍 , use the let.\nlet count = 1;\nif (true) {\n  count += 1;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"note-that-both-let-and-const-are-block-scoped\"\n    }}>{`Note that both `}<inlineCode parentName=\"h3\">{`let`}</inlineCode>{` and `}<inlineCode parentName=\"h3\">{`const`}</inlineCode>{` are block-scoped.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// const and let only exist in the blocks they are defined in.\n{\n  let a = 1;\n  const b = 1;\n}\nconsole.log(a); // ReferenceError\nconsole.log(b); // ReferenceError\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"objects\"\n    }}>{`Objects`}</h2>\n    <h3 {...{\n      \"id\": \"use-the-literal-syntax-for-object-creation\"\n    }}>{`Use the literal syntax for object creation.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-new-object.html\"\n      }}><inlineCode parentName=\"a\">{`no-new-object`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst item = new Object();\n\n// good 👍\nconst item = {};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-computed-property-names-when-creating-objects-with-dynamic-property-names\"\n    }}>{`Use computed property names when creating objects with dynamic property names.`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: They allow you to define all the properties of an object in one place.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`function getKey(k) {\n  return \\`a key named \\${k}\\`;\n}\n\n// bad 👎\nconst obj = {\n  id: 5,\n  name: 'Lorem Ipsum',\n};\nobj[getKey('enabled')] = true;\n\n// good 👍\nconst obj = {\n  id: 5,\n  name: 'Lorem Ipsum',\n  [getKey('enabled')]: true,\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-object-method-shorthand\"\n    }}>{`Use object method shorthand.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/object-shorthand.html\"\n      }}><inlineCode parentName=\"a\">{`object-shorthand`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst atom = {\n  value: 1,\n\n  addValue: function (value) {\n    return atom.value + value;\n  },\n};\n\n// good 👍\nconst atom = {\n  value: 1,\n\n  addValue(value) {\n    return atom.value + value;\n  },\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-property-value-shorthand\"\n    }}>{`Use property value shorthand.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/object-shorthand.html\"\n      }}><inlineCode parentName=\"a\">{`object-shorthand`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: It is shorter and descriptive.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const lukeSkywalker = 'Lorem Ipsum';\n\n// bad 👎\nconst obj = {\n  lukeSkywalker: lukeSkywalker,\n};\n\n// good 👍\nconst obj = {\n  lukeSkywalker,\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"group-your-shorthand-properties-at-the-beginning-of-your-object-declaration\"\n    }}>{`Group your shorthand properties at the beginning of your object declaration.`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: It's easier to tell which properties are using the shorthand.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const newyorkSubway = 'Newyork Subway';\nconst newjerseyTransit = 'NewJersy Transit';\n\n// bad 👎\nconst obj = {\n  episodeOne: 1,\n  twoJediWalkIntoACantina: 2,\n  newjerseyTransit,\n  episodeThree: 3,\n  mayTheFourth: 4,\n  newyorkSubway,\n};\n\n// good 👍\nconst obj = {\n  newjerseyTransit,\n  newyorkSubway,\n  episodeOne: 1,\n  twoJediWalkIntoACantina: 2,\n  episodeThree: 3,\n  mayTheFourth: 4,\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"only-quote-properties-that-are-invalid-identifiers\"\n    }}>{`Only quote properties that are invalid identifiers.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/quote-props.html\"\n      }}><inlineCode parentName=\"a\">{`quote-props`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: In general we consider it subjectively easier to read. It improves syntax highlighting, and is also more easily optimized by many JS engines.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst bad = {\n  'foo': 3,\n  'bar': 4,\n  'data-blah': 5,\n};\n\n// good 👍\nconst good = {\n  foo: 3,\n  bar: 4,\n  'data-blah': 5,\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"do-not-call-objectprototype-methods-directly\"\n    }}>{`Do not call `}<inlineCode parentName=\"h3\">{`Object.prototype`}</inlineCode>{` methods directly,`}</h3>\n    <p>{`such as `}<inlineCode parentName=\"p\">{`hasOwnProperty`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`propertyIsEnumerable`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`isPrototypeOf`}</inlineCode>{`. eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-prototype-builtins\"\n      }}><inlineCode parentName=\"a\">{`no-prototype-builtins`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: These methods may be shadowed by properties on the object in question - consider `}<inlineCode parentName=\"p\">{`{ hasOwnProperty: false }`}</inlineCode>{` - or, the object may be a null object (`}<inlineCode parentName=\"p\">{`Object.create(null)`}</inlineCode>{`).`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconsole.log(object.hasOwnProperty(key));\n\n// good 👍\nconsole.log(Object.prototype.hasOwnProperty.call(object, key));\n\n// best\nconst has = Object.prototype.hasOwnProperty; // cache the lookup once, in module scope.\nconsole.log(has.call(object, key));\n/* or */\nimport has from 'has'; // https://www.npmjs.com/package/has\nconsole.log(has(object, key));\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"prefer-the-object-spread-operator\"\n    }}>{`Prefer the object spread operator.`}</h3>\n    <p>{`over `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\"\n      }}><inlineCode parentName=\"a\">{`Object.assign`}</inlineCode></a>{` to shallow-copy objects. Use the object rest operator to get a new object with certain properties omitted.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// very bad 👎👎\nconst original = { a: 1, b: 2 };\nconst copy = Object.assign(original, { c: 3 }); // this mutates \\`original\\` à² _à²\ndelete copy.a; // so does this\n\n// bad 👎\nconst original = { a: 1, b: 2 };\nconst copy = Object.assign({}, original, { c: 3 }); // copy => { a: 1, b: 2, c: 3 }\n\n// good 👍\nconst original = { a: 1, b: 2 };\nconst copy = { ...original, c: 3 }; // copy => { a: 1, b: 2, c: 3 }\n\nconst { a, ...noA } = copy; // noA => { b: 2, c: 3 }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arrays\"\n    }}>{`Arrays`}</h2>\n    <h3 {...{\n      \"id\": \"use-the-literal-syntax-for-array-creation\"\n    }}>{`Use the literal syntax for array creation.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-array-constructor.html\"\n      }}><inlineCode parentName=\"a\">{`no-array-constructor`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst items = new Array();\n\n// good 👍\nconst items = [];\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-arraypush\"\n    }}>{`Use Arraypush`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push\"\n      }}>{`Array#push`}</a>{` instead of direct assignment to add items to an array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const someStack = [];\n\n// bad 👎\nsomeStack[someStack.length] = 'abracadabra';\n\n// good 👍\nsomeStack.push('abracadabra');\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-array-spreads--to-copy-arrays\"\n    }}>{`Use array spreads `}<inlineCode parentName=\"h3\">{`...`}</inlineCode>{` to copy arrays.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst len = items.length;\nconst itemsCopy = [];\nlet i;\n\nfor (i = 0; i < len; i += 1) {\n  itemsCopy[i] = items[i];\n}\n\n// good 👍\nconst itemsCopy = [...items];\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"to-convert-an-iterable-object-to-an-array-use-spreads--instead-of-arrayfrom\"\n    }}>{`To convert an iterable object to an array, use spreads `}<inlineCode parentName=\"h3\">{`...`}</inlineCode>{` instead of Array.from`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"\n      }}><inlineCode parentName=\"a\">{`Array.from`}</inlineCode></a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const foo = document.querySelectorAll('.foo');\n\n// good 👍\nconst nodes = Array.from(foo);\n\n// best\nconst nodes = [...foo];\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-arrayfrom\"\n    }}>{`Use Array.from`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"\n      }}><inlineCode parentName=\"a\">{`Array.from`}</inlineCode></a>{` for converting an array-like object to an array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const arrLike = { 0: 'foo', 1: 'bar', 2: 'baz', length: 3 };\n\n// bad 👎\nconst arr = Array.prototype.slice.call(arrLike);\n\n// good 👍\nconst arr = Array.from(arrLike);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-arrayfrom-instead-of-spread--for-mapping-over-iterables-because-it-avoids-creating-an-intermediate-array\"\n    }}>{`Use `}<a parentName=\"h3\" {...{\n        \"href\": \"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from\"\n      }}><inlineCode parentName=\"a\">{`Array.from`}</inlineCode></a>{` instead of spread `}<inlineCode parentName=\"h3\">{`...`}</inlineCode>{` for mapping over iterables, because it avoids creating an intermediate array.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst baz = [...foo].map(bar);\n\n// good 👍\nconst baz = Array.from(foo, bar);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-return-statements-in-array-method-callbacks\"\n    }}>{`Use return statements in array method callbacks.`}</h3>\n    <p>{`It's ok to omit the return if the function body consists of a single statement returning an expression without side effects, following `}<a parentName=\"p\" {...{\n        \"href\": \"#arrows--implicit-return\"\n      }}>{`8.2`}</a>{`. eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/array-callback-return\"\n      }}><inlineCode parentName=\"a\">{`array-callback-return`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// good 👍\n[1, 2, 3].map((x) => {\n  const y = x + 1;\n  return x * y;\n});\n\n// good 👍\n[1, 2, 3].map((x) => x + 1);\n\n// bad 👎 - no returned value means \\`acc\\` becomes undefined after the first iteration\n[[0, 1], [2, 3], [4, 5],].reduce((acc, item, index) => {\n  const flatten = acc.concat(item);\n});\n\n// good 👍\n[[0, 1], [2, 3], [4, 5],].reduce((acc, item, index) => {\n  const flatten = acc.concat(item);\n  return flatten;\n});\n\n// bad 👎\ninbox.filter((msg) => {\n  const { subject, author } = msg;\n  if (subject === 'Mockingbird') {\n    return author === 'Harper Lee';\n  } else {\n    return false;\n  }\n});\n\n// good 👍\ninbox.filter((msg) => {\n  const { subject, author } = msg;\n  if (subject === 'Mockingbird') {\n    return author === 'Harper Lee';\n  }\n\n  return false;\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-line-breaks-after-open-and-before-close-array-brackets-if-an-array-has-multiple-lines\"\n    }}>{`Use line breaks after open and before close array brackets if an array has multiple lines`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst arr = [\n  [0, 1], [2, 3], [4, 5],\n];\n\nconst objectInArray = [{\n  id: 1,\n}, {\n  id: 2,\n}];\n\nconst numberInArray = [\n  1, 2\n];\n\n// good 👍\nconst arr = [[0, 1], [2, 3], [4, 5]];\n\nconst objectInArray = [\n  {\n    id: 1,\n  },\n  {\n    id: 2,\n  },\n];\n\nconst numberInArray = [\n  1,\n  2\n];\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"destructuring\"\n    }}>{`Destructuring`}</h2>\n    <h3 {...{\n      \"id\": \"use-object-destructuring-when-accessing-and-using-multiple-properties-of-an-object\"\n    }}>{`Use object destructuring when accessing and using multiple properties of an object.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/prefer-destructuring\"\n      }}><inlineCode parentName=\"a\">{`prefer-destructuring`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: Destructuring saves you from creating temporary references for those properties.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nfunction getFullName(user) {\n  const firstName = user.firstName;\n  const lastName = user.lastName;\n\n  return \\`\\${firstName} \\${lastName}\\`;\n}\n\n// good 👍\nfunction getFullName(user) {\n  const { firstName, lastName } = user;\n  return \\`\\${firstName} \\${lastName}\\`;\n}\n\n// best\nfunction getFullName({ firstName, lastName }) {\n  return \\`\\${firstName} \\${lastName}\\`;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-array-destructuring\"\n    }}>{`Use array destructuring.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/prefer-destructuring\"\n      }}><inlineCode parentName=\"a\">{`prefer-destructuring`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const arr = [1, 2, 3, 4];\n\n// bad 👎\nconst first = arr[0];\nconst second = arr[1];\n\n// good 👍\nconst [first, second] = arr;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-object-destructuring-for-multiple-return-values-not-array-destructuring\"\n    }}>{`Use object destructuring for multiple return values, not array destructuring.`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: You can add new properties over time or change the order of things without breaking call sites.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nfunction processInput(input) {\n  // then a miracle occurs\n  return [left, right, top, bottom];\n}\n\n// the caller needs to think about the order of return data\nconst [left, __, top] = processInput(input);\n\n// good 👍\nfunction processInput(input) {\n  // then a miracle occurs\n  return { left, right, top, bottom };\n}\n\n// the caller selects only the data they need\nconst { left, top } = processInput(input);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"strings\"\n    }}>{`Strings`}</h2>\n    <h3 {...{\n      \"id\": \"use-single-quotes--for-strings\"\n    }}>{`Use single quotes `}<inlineCode parentName=\"h3\">{`''`}</inlineCode>{` for strings.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/quotes.html\"\n      }}><inlineCode parentName=\"a\">{`quotes`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst name = 'Capt. Janeway';\n\n// bad 👎 - template literals should contain interpolation or newlines\nconst name = \\`Capt. Janeway\\`;\n\n// good 👍\nconst name = 'Capt. Janeway';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"strings-that-cause-the-line-to-go-over-80-characters-should-not-be-written-across-multiple-lines-using-string-concatenation\"\n    }}>{`Strings that cause the line to go over 80 characters should not be written across multiple lines using string concatenation.`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: Broken strings are painful to work with and make code less searchable.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst errorMessage = 'This is a super long error that was thrown because \\\\\nof Batman. When you stop to think about how Batman had anything to do \\\\\nwith this, you would get nowhere \\\\\nfast.';\n\n// bad 👎\nconst errorMessage = 'This is a super long error that was thrown because ' +\n  'of Batman. When you stop to think about how Batman had anything to do ' +\n  'with this, you would get nowhere fast.';\n\n// good 👍\nconst errorMessage =\n  'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"when-programmatically-building-up-strings-use-template-strings-instead-of-concatenation\"\n    }}>{`When programmatically building up strings, use template strings instead of concatenation.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/prefer-template.html\"\n      }}><inlineCode parentName=\"a\">{`prefer-template`}</inlineCode></a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/template-curly-spacing\"\n      }}><inlineCode parentName=\"a\">{`template-curly-spacing`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: Template strings give you a readable, concise syntax with proper newlines and string interpolation features.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nfunction sayHi(name) {\n  return 'How are you, ' + name + '?';\n}\n\n// bad 👎\nfunction sayHi(name) {\n  return ['How are you, ', name, '?'].join();\n}\n\n// bad 👎\nfunction sayHi(name) {\n  return \\`How are you, \\${name}?\\`;\n}\n\n// good 👍\nfunction sayHi(name) {\n  return \\`How are you, \\${name}?\\`;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"never-use-eval-on-a-string-it-opens-too-many-vulnerabilities\"\n    }}>{`Never use `}<inlineCode parentName=\"h3\">{`eval()`}</inlineCode>{` on a string, it opens too many vulnerabilities.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-eval\"\n      }}><inlineCode parentName=\"a\">{`no-eval`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"do-not-unnecessarily-escape-characters-in-strings\"\n    }}>{`Do not unnecessarily escape characters in strings.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-useless-escape\"\n      }}><inlineCode parentName=\"a\">{`no-useless-escape`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: Backslashes harm readability, thus they should only be present when necessary.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst foo = ''this' is \\\\'quoted\\\\'';\n\n// good 👍\nconst foo = ''this' is \\\\'quoted\\\\'';\nconst foo = \\`my name is '\\${name}'\\`;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"functions\"\n    }}>{`Functions`}</h2>\n    <h3 {...{\n      \"id\": \"use-named-function-expressions-instead-of-function-declarations\"\n    }}>{`Use named function expressions instead of function declarations.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/func-style\"\n      }}><inlineCode parentName=\"a\">{`func-style`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: Function declarations are hoisted, which means that it's easy - too easy - to reference the function before it is defined in the file. This harms readability and maintainability.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nfunction foo() {\n  // ...\n}\n\n// bad 👎\nconst foo = function () {\n  // ...\n};\n\n// good 👍\n// lexical name distinguished from the variable-referenced invocation(s)\nconst short = function longUniqueMoreDescriptiveLexicalFoo() {\n  // ...\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"wrap-immediately-invoked-function-expressions-in-parentheses\"\n    }}>{`Wrap immediately invoked function expressions in parentheses.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/wrap-iife.html\"\n      }}><inlineCode parentName=\"a\">{`wrap-iife`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: An immediately invoked function expression is a single unit - wrapping both it, and its invocation parens, in parens, cleanly expresses this. Note that in a world with modules everywhere, you almost never need an IIFE.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// immediately-invoked function expression (IIFE)\n(function () {\n  console.log('Welcome to the Internet. Please follow me.');\n})();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"never-declare-a-function-in-a-non-function-block\"\n    }}>{`Never declare a function in a non-function block`}</h3>\n    <p>{`(`}<inlineCode parentName=\"p\">{`if`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`while`}</inlineCode>{`, etc). Assign the function to a variable instead.`}</p>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-loop-func.html\"\n      }}><inlineCode parentName=\"a\">{`no-loop-func`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"a-function-declaration-is-not-a-statement\"\n    }}>{`A function declaration is not a statement.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nif (currentUser) {\n  function test() {\n    console.log('Nope.');\n  }\n}\n\n// good 👍\nlet test;\nif (currentUser) {\n  test = () => {\n    console.log('Yup.');\n  };\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"never-name-a-parameter-arguments-this-will-take-precedence-over-the-arguments-object-that-is-given-to-every-function-scope\"\n    }}>{`Never name a parameter `}<inlineCode parentName=\"h3\">{`arguments`}</inlineCode>{`. This will take precedence over the `}<inlineCode parentName=\"h3\">{`arguments`}</inlineCode>{` object that is given to every function scope.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nfunction foo(name, options, arguments) {\n  // ...\n}\n\n// good 👍\nfunction foo(name, options, args) {\n  // ...\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"never-use-arguments-opt-to-use-rest-syntax--instead\"\n    }}>{`Never use `}<inlineCode parentName=\"h3\">{`arguments`}</inlineCode>{`, opt to use rest syntax `}<inlineCode parentName=\"h3\">{`...`}</inlineCode>{` instead.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/prefer-rest-params\"\n      }}><inlineCode parentName=\"a\">{`prefer-rest-params`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: `}<inlineCode parentName=\"p\">{`...`}</inlineCode>{` is explicit about which arguments you want pulled.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nfunction concatenateAll() {\n  const args = Array.prototype.slice.call(arguments);\n  return args.join('');\n}\n\n// good 👍\nfunction concatenateAll(...args) {\n  return args.join('');\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-default-parameter-syntax-rather-than-mutating-function-arguments\"\n    }}>{`Use default parameter syntax rather than mutating function arguments.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// really bad\nfunction handleThings(opts) {\n  // No! We shouldn't mutate function arguments.\n  // Double bad: if opts is falsy it'll be set to an object which may\n  // be what you want but it can introduce subtle bugs.\n  opts = opts || {};\n  // ...\n}\n\n// still bad\nfunction handleThings(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  // ...\n}\n\n// good 👍\nfunction handleThings(opts = {}) {\n  // ...\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"avoid-side-effects-with-default-parameters\"\n    }}>{`Avoid side effects with default parameters.`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: They are confusing to reason about.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`var b = 1;\n// bad 👎\nfunction count(a = b++) {\n  console.log(a);\n}\ncount(); // 1\ncount(); // 2\ncount(3); // 3\ncount(); // 3\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"always-put-default-parameters-last\"\n    }}>{`Always put default parameters last.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nfunction handleThings(opts = {}, name) {\n  // ...\n}\n\n// good 👍\nfunction handleThings(name, opts = {}) {\n  // ...\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"never-use-the-function-constructor-to-create-a-new-function\"\n    }}>{`Never use the Function constructor to create a new function.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-new-func\"\n      }}><inlineCode parentName=\"a\">{`no-new-func`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: Creating a function in this way evaluates a string similarly to `}<inlineCode parentName=\"p\">{`eval()`}</inlineCode>{`, which opens vulnerabilities.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nvar add = new Function('a', 'b', 'return a + b');\n\n// still bad\nvar subtract = Function('a', 'b', 'return a - b');\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"spacing-in-a-function-signature\"\n    }}>{`Spacing in a function signature.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/space-before-function-paren\"\n      }}><inlineCode parentName=\"a\">{`space-before-function-paren`}</inlineCode></a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/space-before-blocks\"\n      }}><inlineCode parentName=\"a\">{`space-before-blocks`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: Consistency is good, and you shouldn't have to add or remove a space when adding or removing a name.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst f = function () {};\nconst g = function () {};\nconst h = function () {};\n\n// good 👍\nconst x = function () {};\nconst y = function a() {};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"never-mutate-parameters\"\n    }}>{`Never mutate parameters.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-param-reassign.html\"\n      }}><inlineCode parentName=\"a\">{`no-param-reassign`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: Manipulating objects passed in as parameters can cause unwanted variable side effects in the original caller.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nfunction f1(obj) {\n  obj.key = 1;\n}\n\n// good 👍\nfunction f2(obj) {\n  const key = Object.prototype.hasOwnProperty.call(obj, 'key') ? obj.key : 1;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"never-reassign-parameters\"\n    }}>{`Never reassign parameters.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-param-reassign.html\"\n      }}><inlineCode parentName=\"a\">{`no-param-reassign`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: Reassigning parameters can lead to unexpected behavior, especially when accessing the `}<inlineCode parentName=\"p\">{`arguments`}</inlineCode>{` object. It can also cause optimization issues, especially in V8.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nfunction f1(a) {\n  a = 1;\n  // ...\n}\n\nfunction f2(a) {\n  if (!a) { a = 1; }\n  // ...\n}\n\n// good 👍\nfunction f3(a) {\n  const b = a || 1;\n  // ...\n}\n\nfunction f4(a = 1) {\n  // ...\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"prefer-the-use-of-the-spread-operator--to-call-variadic-functions\"\n    }}>{`Prefer the use of the spread operator `}<inlineCode parentName=\"h3\">{`...`}</inlineCode>{` to call variadic functions.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/prefer-spread\"\n      }}><inlineCode parentName=\"a\">{`prefer-spread`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: It's cleaner, you don't need to supply a context, and you can not easily compose `}<inlineCode parentName=\"p\">{`new`}</inlineCode>{` with `}<inlineCode parentName=\"p\">{`apply`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst x = [1, 2, 3, 4, 5];\nconsole.log.apply(console, x);\n\n// good 👍\nconst x = [1, 2, 3, 4, 5];\nconsole.log(...x);\n\n// bad 👎\nnew (Function.prototype.bind.apply(Date, [null, 2016, 8, 5]))();\n\n// good 👍\nnew Date(...[2016, 8, 5]);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"functions-with-multiline-signatures-or-invocations-should-be-indented-just-like-every-other-multiline\"\n    }}>{`Functions with multiline signatures, or invocations, should be indented just like every other multiline.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/function-paren-newline\"\n      }}><inlineCode parentName=\"a\">{`function-paren-newline`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nfunction foo(bar,\n             baz,\n             quux) {\n  // ...\n}\n\n// good 👍\nfunction foo(\n  bar,\n  baz,\n  quux,\n) {\n  // ...\n}\n\n// bad 👎\nconsole.log(foo,\n  bar,\n  baz);\n\n// good 👍\nconsole.log(\n  foo,\n  bar,\n  baz,\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"arrow-functions\"\n    }}>{`Arrow Functions`}</h2>\n    <h3 {...{\n      \"id\": \"when-you-must-use-an-anonymous-function-as-when-passing-an-inline-callback-use-arrow-function-notation\"\n    }}>{`When you must use an anonymous function (as when passing an inline callback), use arrow function notation.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/prefer-arrow-callback.html\"\n      }}><inlineCode parentName=\"a\">{`prefer-arrow-callback`}</inlineCode></a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/arrow-spacing.html\"\n      }}><inlineCode parentName=\"a\">{`arrow-spacing`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: It creates a version of the function that executes in the context of `}<inlineCode parentName=\"p\">{`this`}</inlineCode>{`, which is usually what you want, and is a more concise syntax.`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why not? If you have a fairly complicated function, you might move that logic out into its own named function expression.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\n[1, 2, 3].map(function (x) {\n  const y = x + 1;\n  return x * y;\n});\n\n// good 👍\n[1, 2, 3].map((x) => {\n  const y = x + 1;\n  return x * y;\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"if-the-function-body-consists-of-a-single-statement-omit-the-braces-and-use-the-implicit-return-otherwise-keep-the-braces-and-use-a-return-statement\"\n    }}>{`If the function body consists of a single statement, omit the braces and use the implicit return. Otherwise, keep the braces and use a `}<inlineCode parentName=\"h3\">{`return`}</inlineCode>{` statement.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/arrow-parens.html\"\n      }}><inlineCode parentName=\"a\">{`arrow-parens`}</inlineCode></a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/arrow-body-style.html\"\n      }}><inlineCode parentName=\"a\">{`arrow-body-style`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: It reads well when multiple functions are chained together.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\n[1, 2, 3].map((number) => {\n  const nextNumber = number + 1;\n  \\`A string containing the \\${nextNumber}.\\`;\n});\n\n// good 👍\n[1, 2, 3].map((number) => \\`A string containing the \\${number + 1}.\\`);\n\n// good 👍\n[1, 2, 3].map((number) => {\n  const nextNumber = number + 1;\n  return \\`A string containing the \\${nextNumber}.\\`;\n});\n\n// good 👍\n[1, 2, 3].map((number, index) => ({\n  [index]: number,\n}));\n\n// No implicit return with side effects\nfunction foo(callback) {\n  const val = callback();\n  if (val === true) {\n    // Do something if callback returns true\n  }\n}\n\nlet bool = false;\n\n// bad 👎\nfoo(() => (bool = true));\n\n// good 👍\nfoo(() => {\n  bool = true;\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"in-case-the-expression-spans-over-multiple-lines-wrap-it-in-parentheses-for-better-readability\"\n    }}>{`In case the expression spans over multiple lines, wrap it in parentheses for better readability.`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: It shows clearly where the function starts and ends.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\n['get', 'post', 'put'].map((httpMethod) => Object.prototype.hasOwnProperty.call(\n    httpMagicObjectWithAVeryLongName,\n    httpMethod\n  )\n);\n\n// good 👍\n['get', 'post', 'put'].map((httpMethod) =>\n  Object.prototype.hasOwnProperty.call(\n    httpMagicObjectWithAVeryLongName,\n    httpMethod\n  )\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"always-include-parentheses-around-arguments-for-clarity-and-consistency\"\n    }}>{`Always include parentheses around arguments for clarity and consistency.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/arrow-parens.html\"\n      }}><inlineCode parentName=\"a\">{`arrow-parens`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: Minimizes diff churn when adding or removing arguments.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\n[1, 2, 3].map(x => x * x);\n\n// good 👍\n[1, 2, 3].map((x) => x * x);\n\n// bad 👎\n[1, 2, 3].map(number => (\n    \\`A long string with the \\${number}. It's so long that we don't want it to take up space on the .map line!\\`\n));\n\n// good 👍\n[1, 2, 3].map((number) => (\n    \\`A long string with the \\${number}. It's so long that we don't want it to take up space on the .map line!\\`\n));\n\n// bad 👎\n[1, 2, 3].map(x => {\n  const y = x + 1;\n  return x * y;\n});\n\n// good 👍\n[1, 2, 3].map((x) => {\n  const y = x + 1;\n  return x * y;\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"avoid-confusing-arrow-function-syntax--with-comparison-operators--\"\n    }}>{`Avoid confusing arrow function syntax (`}<inlineCode parentName=\"h3\">{`=>`}</inlineCode>{`) with comparison operators (`}<inlineCode parentName=\"h3\">{`<=`}</inlineCode>{`, `}<inlineCode parentName=\"h3\">{`>=`}</inlineCode>{`).`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-confusing-arrow\"\n      }}><inlineCode parentName=\"a\">{`no-confusing-arrow`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst itemHeight = (item) => item.height <= 256 ? item.largeSize : item.smallSize;\n\n// bad 👎\nconst itemHeight = (item) => item.height >= 256 ? item.largeSize : item.smallSize;\n\n// good 👍\nconst itemHeight = (item) => (item.height <= 256 ? item.largeSize : item.smallSize);\n\n// good 👍\nconst itemHeight = (item) => {\n  const { height, largeSize, smallSize } = item;\n  return height <= 256 ? largeSize : smallSize;\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"enforce-the-location-of-arrow-function-bodies-with-implicit-returns\"\n    }}>{`Enforce the location of arrow function bodies with implicit returns.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/implicit-arrow-linebreak\"\n      }}><inlineCode parentName=\"a\">{`implicit-arrow-linebreak`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\n(foo) =>\n  bar;\n\n(foo) =>\n  (bar);\n\n// good 👍\n(foo) => bar;\n(foo) => (bar);\n(foo) => (\n  bar\n)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"classes--constructors\"\n    }}>{`Classes & Constructors`}</h2>\n    <h3 {...{\n      \"id\": \"always-use-class\"\n    }}>{`Always use `}<inlineCode parentName=\"h3\">{`class`}</inlineCode>{`.`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: `}<inlineCode parentName=\"p\">{`class`}</inlineCode>{` syntax is more concise and easier to reason about.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nfunction Queue(contents = []) {\n  this.queue = [...contents];\n}\nQueue.prototype.pop = function () {\n  const value = this.queue[0];\n  this.queue.splice(0, 1);\n  return value;\n};\n\n// good 👍\nclass Queue {\n  constructor(contents = []) {\n    this.queue = [...contents];\n  }\n  pop() {\n    const value = this.queue[0];\n    this.queue.splice(0, 1);\n    return value;\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-extends-for-inheritance\"\n    }}>{`Use `}<inlineCode parentName=\"h3\">{`extends`}</inlineCode>{` for inheritance.`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: It is a built-in way to inherit prototype functionality without breaking `}<inlineCode parentName=\"p\">{`instanceof`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst inherits = require('inherits');\nfunction PeekableQueue(contents) {\n  Queue.apply(this, contents);\n}\ninherits(PeekableQueue, Queue);\nPeekableQueue.prototype.peek = function () {\n  return this.queue[0];\n};\n\n// good 👍\nclass PeekableQueue extends Queue {\n  peek() {\n    return this.queue[0];\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"methods-can-return-this-to-help-with-method-chaining\"\n    }}>{`Methods can return `}<inlineCode parentName=\"h3\">{`this`}</inlineCode>{` to help with method chaining.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nJedi.prototype.jump = function () {\n  this.jumping = true;\n  return true;\n};\n\nJedi.prototype.setHeight = function (height) {\n  this.height = height;\n};\n\nconst luke = new Jedi();\nluke.jump(); // => true\nluke.setHeight(20); // => undefined\n\n// good 👍\nclass Jedi {\n  jump() {\n    this.jumping = true;\n    return this;\n  }\n\n  setHeight(height) {\n    this.height = height;\n    return this;\n  }\n}\n\nconst luke = new Jedi();\n\nluke.jump()\n  .setHeight(20);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"its-okay-to-write-a-custom-tostring-method-just-make-sure-it-works-successfully-and-causes-no-side-effects\"\n    }}>{`It’s okay to write a custom `}<inlineCode parentName=\"h3\">{`toString()`}</inlineCode>{` method, just make sure it works successfully and causes no side effects.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Jedi {\n  constructor(options = {}) {\n    this.name = options.name || 'no name';\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  toString() {\n    return \\`Jedi - \\${this.getName()}\\`;\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"classes-have-a-default-constructor-if-one-is-not-specified\"\n    }}>{`Classes have a default constructor if one is not specified.`}</h3>\n    <p>{`An empty constructor function or one that just delegates to a parent class is unnecessary. eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-useless-constructor\"\n      }}><inlineCode parentName=\"a\">{`no-useless-constructor`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nclass Jedi {\n  constructor() {}\n\n  getName() {\n    return this.name;\n  }\n}\n\n// bad 👎\nclass Rey extends Jedi {\n  constructor(...args) {\n    super(...args);\n  }\n}\n\n// good 👍\nclass Rey extends Jedi {\n  constructor(...args) {\n    super(...args);\n    this.name = 'Rey';\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"avoid-duplicate-class-members\"\n    }}>{`Avoid duplicate class members.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-dupe-class-members\"\n      }}><inlineCode parentName=\"a\">{`no-dupe-class-members`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: Duplicate class member declarations will silently prefer the last one - having duplicates is almost certainly a bug.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nclass Foo {\n  bar() { return 1; }\n  bar() { return 2; }\n}\n\n// good 👍\nclass Foo {\n  bar() { return 1; }\n}\n\n// good 👍\nclass Foo {\n  bar() { return 2; }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"class-methods-should-use-this-or-be-made-into-a-static-method-unless-an-external-library-or-framework-requires-to-use-specific-non-static-methods\"\n    }}>{`Class methods should use `}<inlineCode parentName=\"h3\">{`this`}</inlineCode>{` or be made into a static method unless an external library or framework requires to use specific non-static methods.`}</h3>\n    <p>{`Being an instance method should indicate that it behaves differently based on properties of the receiver. eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/class-methods-use-this\"\n      }}><inlineCode parentName=\"a\">{`class-methods-use-this`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nclass Foo {\n  bar() {\n    console.log('bar');\n  }\n}\n\n// good 👍  - this is used\nclass Foo {\n  bar() {\n    console.log(this.bar);\n  }\n}\n\n// good 👍  - constructor is exempt\nclass Foo {\n  constructor() {\n    // ...\n  }\n}\n\n// good 👍  - static methods aren't expected to use this\nclass Foo {\n  static bar() {\n    console.log('bar');\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"modules\"\n    }}>{`Modules`}</h2>\n    <h3 {...{\n      \"id\": \"always-use-modules-importexport-over-a-non-standard-module-system-you-can-always-transpile-to-your-preferred-module-system\"\n    }}>{`Always use modules (`}<inlineCode parentName=\"h3\">{`import`}</inlineCode>{`/`}<inlineCode parentName=\"h3\">{`export`}</inlineCode>{`) over a non-standard module system. You can always transpile to your preferred module system.`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? Modules are the future, let’s start using the future now.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nconst AirbnbStyleGuide = require('./AirbnbStyleGuide');\nmodule.exports = AirbnbStyleGuide.es6;\n\n// ok\nimport AirbnbStyleGuide from './AirbnbStyleGuide';\nexport default AirbnbStyleGuide.es6;\n\n// best\nimport { es6 } from './AirbnbStyleGuide';\nexport default es6;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"do-not-use-wildcard-imports\"\n    }}>{`Do not use wildcard imports.`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? This makes sure you have a single default export.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nimport * as AirbnbStyleGuide from './AirbnbStyleGuide';\n\n// good 👍\nimport AirbnbStyleGuide from './AirbnbStyleGuide';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"and-do-not-export-directly-from-an-import\"\n    }}>{`And do not export directly from an import.`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? Although the one-liner is concise, having one clear way to import and one clear way to export makes things consistent.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\n// filename es6.js\nexport { es6 as default } from './AirbnbStyleGuide';\n\n// good 👍\n// filename es6.js\nimport { es6 } from './AirbnbStyleGuide';\nexport default es6;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"only-import-from-a-path-in-one-place\"\n    }}>{`Only import from a path in one place.`}</h3>\n    <p>{` eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-duplicate-imports\"\n      }}><inlineCode parentName=\"a\">{`no-duplicate-imports`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? Having multiple lines that import from the same path can make code harder to maintain.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nimport foo from 'foo';\n// … some other imports … //\nimport { named1, named2 } from 'foo';\n\n// good 👍\nimport foo, { named1, named2 } from 'foo';\n\n// good 👍\nimport foo, {\n    named1,\n    named2,\n} from 'foo';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"do-not-export-mutable-bindings\"\n    }}>{`Do not export mutable bindings.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-mutable-exports.md\"\n      }}><inlineCode parentName=\"a\">{`import/no-mutable-exports`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? Mutation should be avoided in general, but in particular when exporting mutable bindings. While this technique may be needed for some special cases, in general, only constant references should be exported.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nlet foo = 3;\nexport { foo };\n\n// good 👍\nconst foo = 3;\nexport { foo };\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"in-modules-with-a-single-export-prefer-default-export-over-named-export\"\n    }}>{`In modules with a single export, prefer default export over named export.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md\"\n      }}><inlineCode parentName=\"a\">{`import/prefer-default-export`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? To encourage more files that only ever export one thing, which is better for readability and maintainability.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nexport function foo() {}\n\n// good 👍\nexport default function foo() {}\n`}</code></pre>\n    <p>{`Put all `}<inlineCode parentName=\"p\">{`import`}</inlineCode>{`s above non-import statements.\neslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/first.md\"\n      }}><inlineCode parentName=\"a\">{`import/first`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? Since `}<inlineCode parentName=\"p\">{`import`}</inlineCode>{`s are hoisted, keeping them all at the top prevents surprising behavior.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nimport foo from 'foo';\nfoo.init();\n\nimport bar from 'bar';\n\n// good 👍\nimport foo from 'foo';\nimport bar from 'bar';\n\nfoo.init();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"multiline-imports-should-be-indented-just-like-multiline-array-and-object-literals\"\n    }}>{`Multiline imports should be indented just like multiline array and object literals.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/object-curly-newline\"\n      }}><inlineCode parentName=\"a\">{`object-curly-newline`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? The curly braces follow the same indentation rules as every other curly brace block in the style guide, as do the trailing commas.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nimport {longNameA, longNameB, longNameC, longNameD, longNameE} from 'path';\n\n// good 👍\nimport {\n    longNameA,\n    longNameB,\n    longNameC,\n    longNameD,\n    longNameE,\n} from 'path';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"disallow-webpack-loader-syntax-in-module-import-statements\"\n    }}>{`Disallow Webpack loader syntax in module import statements.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-webpack-loader-syntax.md\"\n      }}><inlineCode parentName=\"a\">{`import/no-webpack-loader-syntax`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? Since using Webpack syntax in the imports couples the code to a module bundler. Prefer using the loader syntax in `}<inlineCode parentName=\"p\">{`webpack.config.js`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nimport fooSass from 'css!sass!foo.scss';\nimport barCss from 'style!css!bar.css';\n\n// good 👍\nimport fooSass from 'foo.scss';\nimport barCss from 'bar.css';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"do-not-include-javascript-filename-extensions\"\n    }}>{`Do not include JavaScript filename extensions`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/extensions.md\"\n      }}><inlineCode parentName=\"a\">{`import/extensions`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? Including extensions inhibits refactoring, and inappropriately hardcodes implementation details of the module you're importing in every consumer.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nimport foo from './foo.js';\nimport bar from './bar.jsx';\nimport baz from './baz/index.jsx';\n\n// good 👍\nimport foo from './foo';\nimport bar from './bar';\nimport baz from './baz';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"iterators-and-generators\"\n    }}>{`Iterators and Generators`}</h2>\n    <h3 {...{\n      \"id\": \"dont-use-iterators\"\n    }}>{`Don't use iterators.`}</h3>\n    <p>{`Prefer JavaScript's higher-order functions instead of loops like `}<inlineCode parentName=\"p\">{`for-in`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`for-of`}</inlineCode>{`. eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-iterator.html\"\n      }}><inlineCode parentName=\"a\">{`no-iterator`}</inlineCode></a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-restricted-syntax\"\n      }}><inlineCode parentName=\"a\">{`no-restricted-syntax`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: This enforces our immutable rule. Dealing with pure functions that return values is easier to reason about than side effects.`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Use `}<inlineCode parentName=\"p\">{`map()`}</inlineCode>{` / `}<inlineCode parentName=\"p\">{`every()`}</inlineCode>{` / `}<inlineCode parentName=\"p\">{`filter()`}</inlineCode>{` / `}<inlineCode parentName=\"p\">{`find()`}</inlineCode>{` / `}<inlineCode parentName=\"p\">{`findIndex()`}</inlineCode>{` / `}<inlineCode parentName=\"p\">{`reduce()`}</inlineCode>{` / `}<inlineCode parentName=\"p\">{`some()`}</inlineCode>{` / ... to iterate over arrays, and `}<inlineCode parentName=\"p\">{`Object.keys()`}</inlineCode>{` / `}<inlineCode parentName=\"p\">{`Object.values()`}</inlineCode>{` / `}<inlineCode parentName=\"p\">{`Object.entries()`}</inlineCode>{` to produce arrays so you can iterate over objects.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const numbers = [1, 2, 3, 4, 5];\n\n// bad 👎\nlet sum = 0;\nfor (let num of numbers) {\n  sum += num;\n}\nsum === 15;\n\n// good 👍\nlet sum = 0;\nnumbers.forEach((num) => {\n  sum += num;\n});\nsum === 15;\n\n// best (use the functional force)\nconst sum = numbers.reduce((total, num) => total + num, 0);\nsum === 15;\n\n// bad 👎\nconst increasedByOne = [];\nfor (let i = 0; i < numbers.length; i++) {\n  increasedByOne.push(numbers[i] + 1);\n}\n\n// good 👍\nconst increasedByOne = [];\nnumbers.forEach((num) => {\n  increasedByOne.push(num + 1);\n});\n\n// best (keeping it functional)\nconst increasedByOne = numbers.map((num) => num + 1);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"dont-use-generators-for-now\"\n    }}>{`Don’t use generators for now.`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? They don’t transpile well to ES5.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"if-you-must-use-generators-or-if-you-disregard-our-advice-make-sure-their-function-signature-is-spaced-properly\"\n    }}>{`If you must use generators, or if you disregard `}<a parentName=\"h3\" {...{\n        \"href\": \"#generators--nope\"\n      }}>{`our advice`}</a>{`, make sure their function signature is spaced properly.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/generator-star-spacing\"\n      }}><inlineCode parentName=\"a\">{`generator-star-spacing`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? `}<inlineCode parentName=\"p\">{`function`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`*`}</inlineCode>{` are part of the same conceptual keyword - `}<inlineCode parentName=\"p\">{`*`}</inlineCode>{` is not a modifier for `}<inlineCode parentName=\"p\">{`function`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`function*`}</inlineCode>{` is a unique construct, different from `}<inlineCode parentName=\"p\">{`function`}</inlineCode>{`.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nfunction * foo() {\n    // ...\n}\n\n// bad 👎\nconst bar = function * () {\n    // ...\n};\n\n// bad 👎\nconst baz = function *() {\n    // ...\n};\n\n// bad 👎\nconst quux = function*() {\n    // ...\n};\n\n// bad 👎\nfunction*foo() {\n    // ...\n}\n\n// bad 👎\nfunction *foo() {\n    // ...\n}\n\n// very bad\nfunction\n*\nfoo() {\n    // ...\n}\n\n// very bad\nconst wat = function\n*\n() {\n    // ...\n};\n\n// good 👍\nfunction* foo() {\n    // ...\n}\n\n// good 👍\nconst foo = function* () {\n    // ...\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"use-dot-notation-when-accessing-properties\"\n    }}>{`Use dot notation when accessing properties.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/dot-notation.html\"\n      }}><inlineCode parentName=\"a\">{`dot-notation`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const luke = {\n  jedi: true,\n  age: 28,\n};\n\n// bad 👎\nconst isJedi = luke['jedi'];\n\n// good 👍\nconst isJedi = luke.jedi;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-bracket-notation--when-accessing-properties-with-a-variable\"\n    }}>{`Use bracket notation `}<inlineCode parentName=\"h3\">{`[]`}</inlineCode>{` when accessing properties with a variable.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const luke = {\n  jedi: true,\n  age: 28,\n};\n\nfunction getProp(prop) {\n  return luke[prop];\n}\n\nconst isJedi = getProp('jedi');\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-exponentiation-operator--when-calculating-exponentiations\"\n    }}>{`Use exponentiation operator `}<inlineCode parentName=\"h3\">{`**`}</inlineCode>{` when calculating exponentiations.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-restricted-properties\"\n      }}><inlineCode parentName=\"a\">{`no-restricted-properties`}</inlineCode></a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nconst binary = Math.pow(2, 10);\n\n// good 👍\nconst binary = 2 ** 10;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"variables\"\n    }}>{`Variables`}</h2>\n    <h3 {...{\n      \"id\": \"always-use-const-or-let-to-declare-variables\"\n    }}>{`Always use `}<inlineCode parentName=\"h3\">{`const`}</inlineCode>{` or `}<inlineCode parentName=\"h3\">{`let`}</inlineCode>{` to declare variables.`}</h3>\n    <p>{`'var' is a global variables. We want to avoid using the global namespace. eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-undef\"\n      }}><inlineCode parentName=\"a\">{`no-undef`}</inlineCode></a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/prefer-const\"\n      }}><inlineCode parentName=\"a\">{`prefer-const`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nsuperPower = new SuperPower();\n\n// good 👍\nconst superPower = new SuperPower();\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-one-const-or-let-declaration-per-variable-or-assignment\"\n    }}>{`Use one `}<inlineCode parentName=\"h3\">{`const`}</inlineCode>{` or `}<inlineCode parentName=\"h3\">{`let`}</inlineCode>{` declaration per variable or assignment.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/one-var.html\"\n      }}><inlineCode parentName=\"a\">{`one-var`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: It's easier to add new variable declarations this way, and you never have to worry about swapping out a `}<inlineCode parentName=\"p\">{`;`}</inlineCode>{` for a `}<inlineCode parentName=\"p\">{`,`}</inlineCode>{` or introducing punctuation-only diffs. You can also step through each declaration with the debugger, instead of jumping through all of them at once.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst items = getItems(),\n  goSportsTeam = true,\n  dragonball = 'z';\n\n// bad 👎\n// (compare to above, and try to spot the mistake)\nconst items = getItems(),\n  goSportsTeam = true;\n  dragonball = 'z';\n\n// good 👍\nconst items = getItems();\nconst goSportsTeam = true;\nconst dragonball = 'z';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"group-all-your-const-and-then-group-all-your-let\"\n    }}>{`Group all your `}<inlineCode parentName=\"h3\">{`const`}</inlineCode>{` and then group all your `}<inlineCode parentName=\"h3\">{`let`}</inlineCode>{`.`}</h3>\n    <p>{`This is helpful when later on you might need to assign a variable depending on one of the previous assigned variables.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nlet i, len, dragonball,\n  items = getItems(),\n  goSportsTeam = true;\n\n// bad 👎\nlet i;\nconst items = getItems();\nlet dragonball;\nconst goSportsTeam = true;\nlet len;\n\n// good 👍\nconst goSportsTeam = true;\nconst items = getItems();\nlet dragonball;\nlet i;\nlet length;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"assign-variables-where-you-need-them-but-place-them-in-a-reasonable-place\"\n    }}>{`Assign variables where you need them, but place them in a reasonable place.`}</h3>\n    <p><inlineCode parentName=\"p\">{`let`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`const`}</inlineCode>{` are block scoped and not function scoped.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎 - unnecessary function call\nfunction checkName(hasName) {\n  const name = getName();\n\n  if (hasName === 'test') {\n    return false;\n  }\n\n  if (name === 'test') {\n    this.setName('');\n    return false;\n  }\n\n  return name;\n}\n\n// good 👍\nfunction checkName(hasName) {\n  if (hasName === 'test') {\n    return false;\n  }\n\n  const name = getName();\n\n  if (name === 'test') {\n    this.setName('');\n    return false;\n  }\n\n  return name;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"dont-chain-variable-assignments\"\n    }}>{`Don't chain variable assignments.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-multi-assign\"\n      }}><inlineCode parentName=\"a\">{`no-multi-assign`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? Chaining variable assignments creates implicit global variables.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\n(function example() {\n  // JavaScript interprets this as\n  // let a = ( b = ( c = 1 ) );\n  // The let keyword only applies to variable a; variables b and c become\n  // global variables.\n  let a = (b = c = 1);\n}());\n\nconsole.log(a); // throws ReferenceError\nconsole.log(b); // 1\nconsole.log(c); // 1\n\n// good 👍\n(function example() {\n  let a = 1;\n  let b = a;\n  let c = a;\n}());\n\nconsole.log(a); // throws ReferenceError\nconsole.log(b); // throws ReferenceError\nconsole.log(c); // throws ReferenceError\n\n// the same applies for \\`const\\`\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"avoid-using-unary-increments-and-decrements----\"\n    }}>{`Avoid using unary increments and decrements (`}<inlineCode parentName=\"h3\">{`++`}</inlineCode>{`, `}<inlineCode parentName=\"h3\">{`--`}</inlineCode>{`).`}</h3>\n    <p>{`eslint `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-plusplus\"\n      }}><inlineCode parentName=\"a\">{`no-plusplus`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? Per the eslint documentation, unary increment and decrement statements are subject to automatic semicolon insertion and can cause silent errors with incrementing or decrementing values within an application. It is also more expressive to mutate your values with statements like `}<inlineCode parentName=\"p\">{`num += 1`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`num++`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`num ++`}</inlineCode>{`. Disallowing unary increment and decrement statements also prevents you from pre-incrementing/pre-decrementing values unintentionally which can also cause unexpected behavior in your programs.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nconst array = [1, 2, 3];\nlet num = 1;\nnum++;\n--num;\n\nlet sum = 0;\nlet truthyCount = 0;\nfor (let i = 0; i < array.length; i++) {\n  let value = array[i];\n  sum += value;\n  if (value) {\n    truthyCount++;\n  }\n}\n\n// good 👍\nconst array = [1, 2, 3];\nlet num = 1;\nnum += 1;\nnum -= 1;\n\nconst sum = array.reduce((a, b) => a + b, 0);\nconst truthyCount = array.filter(Boolean).length;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"avoid-linebreaks-before-or-after--in-an-assignment\"\n    }}>{`Avoid linebreaks before or after `}<inlineCode parentName=\"h3\">{`=`}</inlineCode>{` in an assignment.`}</h3>\n    <p>{`If your assignment violates `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/max-len.html\"\n      }}><inlineCode parentName=\"a\">{`max-len`}</inlineCode></a>{`, surround the value in parens. eslint `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/operator-linebreak.html\"\n      }}><inlineCode parentName=\"a\">{`operator-linebreak`}</inlineCode></a>{`.`}</p>\n    <p>{`Linebreaks surrounding `}<inlineCode parentName=\"p\">{`=`}</inlineCode>{` can obfuscate the value of an assignment.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst foo =\n  superLongLongLongLongLongLongLongLongFunctionName();\n\n// bad 👎\nconst foo\n  = 'superLongLongLongLongLongLongLongLongString';\n\n// good 👍\nconst foo = (\n  superLongLongLongLongLongLongLongLongFunctionName();\n);\n\n// good 👍\nconst foo = 'superLongLongLongLongLongLongLongLongString';\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"disallow-unused-variables\"\n    }}>{`Disallow unused variables.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-unused-vars\"\n      }}><inlineCode parentName=\"a\">{`no-unused-vars`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nvar some_unused_var = 42;\n\n// Write-only variables are not considered as used.\nvar y = 10;\ny = 5;\n\n// A read for a modification of itself is not considered as used.\nvar z = 0;\nz = z + 1;\n\n// Unused function arguments.\nfunction getX(x, y) {\n  return x;\n}\n\n// good 👍\nfunction getXPlusY(x, y) {\n  return x + y;\n}\n\nvar x = 1;\nvar y = a + 2;\n\nalert(getXPlusY(x, y));\n\n// 'type' is ignored even if unused because it has a rest property sibling.\n// This is a form of extracting an object that omits the specified keys.\nvar { type, ...coords } = data;\n// 'coords' is now the 'data' object without its 'type' property.\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"object--array-creation\"\n    }}>{`Object / Array creation`}</h3>\n    <p>{`Use trailing commas and put short declarations on a single line.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nvar a = [\n  'hello', 'world'\n];\nvar b = {'good': 'code'\n        , is generally: 'pretty'\n        };\n\n// good 👍\nvar a = ['hello', 'world'];\nvar b = {\n  good: 'code',\n  'is generally': 'pretty',\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"hoisting\"\n    }}>{`Hoisting`}</h2>\n    <h3 {...{\n      \"id\": \"var-declarations-get-hoisted-to-the-top-of-their-closest-enclosing-function-scope-their-assignment-does-not\"\n    }}><inlineCode parentName=\"h3\">{`var`}</inlineCode>{` declarations get hoisted to the top of their closest enclosing function scope, their assignment does not.`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\"><inlineCode parentName=\"p\">{`const`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`let`}</inlineCode>{` declarations are blessed with a new concept called `}<a parentName=\"p\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone\"\n        }}>{`Temporal Dead Zones (TDZ)`}</a>{`. It’s important to know why `}<a parentName=\"p\" {...{\n          \"href\": \"http://es-discourse.com/t/why-typeof-is-no-longer-safe/15\"\n        }}>{`typeof is no longer safe`}</a>{`.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// we know this wouldn’t work (assuming there\n// is no notDefined global variable)\nfunction example() {\n  console.log(notDefined); // => throws a ReferenceError\n}\n\n// creating a variable declaration after you\n// reference the variable will work due to\n// variable hoisting. Note: the assignment\n// value of \\`true\\` is not hoisted.\nfunction example() {\n  console.log(declaredButNotAssigned); // => undefined\n  var declaredButNotAssigned = true;\n}\n\n// the interpreter is hoisting the variable\n// declaration to the top of the scope,\n// which means our example could be rewritten as:\nfunction example() {\n  let declaredButNotAssigned;\n  console.log(declaredButNotAssigned); // => undefined\n  declaredButNotAssigned = true;\n}\n\n// using const and let\nfunction example() {\n  console.log(declaredButNotAssigned); // => throws a ReferenceError\n  console.log(typeof declaredButNotAssigned); // => throws a ReferenceError\n  const declaredButNotAssigned = true;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"anonymous-function-expressions-hoist-their-variable-name-but-not-the-function-assignment\"\n    }}>{`Anonymous function expressions hoist their variable name, but not the function assignment.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function example() {\n  console.log(anonymous); // => undefined\n\n  anonymous(); // => TypeError anonymous is not a function\n\n  var anonymous = function () {\n    console.log('anonymous function expression');\n  };\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"named-function-expressions-hoist-the-variable-name-not-the-function-name-or-the-function-body\"\n    }}>{`Named function expressions hoist the variable name, not the function name or the function body.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function example() {\n  console.log(named); // => undefined\n\n  named(); // => TypeError named is not a function\n\n  superPower(); // => ReferenceError superPower is not defined\n\n  var named = function superPower() {\n    console.log('Flying');\n  };\n}\n\n// the same is true when the function name\n// is the same as the variable name.\nfunction example() {\n  console.log(named); // => undefined\n\n  named(); // => TypeError named is not a function\n\n  var named = function named() {\n    console.log('named');\n  };\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"function-declarations-hoist-their-name-and-the-function-body\"\n    }}>{`Function declarations hoist their name and the function body.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function example() {\n  superPower(); // => Flying\n\n  function superPower() {\n    console.log('Flying');\n  }\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`For more information refer to `}<a parentName=\"p\" {...{\n          \"href\": \"http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting/\"\n        }}>{`JavaScript Scoping & Hoisting`}</a>{` by `}<a parentName=\"p\" {...{\n          \"href\": \"http://www.adequatelygood.com/\"\n        }}>{`Ben Cherry`}</a>{`.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"comparison-operators--equality\"\n    }}>{`Comparison Operators & Equality`}</h2>\n    <h3 {...{\n      \"id\": \"must-use--and--over--and-\"\n    }}>{`Must use `}<inlineCode parentName=\"h3\">{`===`}</inlineCode>{` and `}<inlineCode parentName=\"h3\">{`!==`}</inlineCode>{` over `}<inlineCode parentName=\"h3\">{`==`}</inlineCode>{` and `}<inlineCode parentName=\"h3\">{`!=`}</inlineCode>{`.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/eqeqeq.html\"\n      }}><inlineCode parentName=\"a\">{`eqeqeq`}</inlineCode></a></p>\n    <h3 {...{\n      \"id\": \"conditional-statements-such-as-the-if-statement-evaluate-their-expression-using-coercion-with-the-toboolean-abstract-method-and-always-follow-these-simple-rules\"\n    }}>{`Conditional statements such as the `}<inlineCode parentName=\"h3\">{`if`}</inlineCode>{` statement evaluate their expression using coercion with the `}<inlineCode parentName=\"h3\">{`ToBoolean`}</inlineCode>{` abstract method and always follow these simple rules:`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Objects`}</strong>{` evaluate to `}<strong parentName=\"li\">{`true`}</strong></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Undefined`}</strong>{` evaluates to `}<strong parentName=\"li\">{`false`}</strong></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Null`}</strong>{` evaluates to `}<strong parentName=\"li\">{`false`}</strong></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Booleans`}</strong>{` evaluate to `}<strong parentName=\"li\">{`the value of the boolean`}</strong></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Numbers`}</strong>{` evaluate to `}<strong parentName=\"li\">{`false`}</strong>{` if `}<strong parentName=\"li\">{`+0, -0, or NaN`}</strong>{`, otherwise `}<strong parentName=\"li\">{`true`}</strong></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Strings`}</strong>{` evaluate to `}<strong parentName=\"li\">{`false`}</strong>{` if an empty string `}<inlineCode parentName=\"li\">{`''`}</inlineCode>{`, otherwise `}<strong parentName=\"li\">{`true`}</strong></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`if ([0] && []) {\n  // true\n  // an array (even an empty one) is an object, objects will evaluate to true\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-shortcuts-for-booleans-but-explicit-comparisons-for-strings-and-numbers\"\n    }}>{`Use shortcuts for booleans, but explicit comparisons for strings and numbers.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nif (isValid === true) {\n  // ...\n}\n\n// good 👍\nif (isValid) {\n  // ...\n}\n\n// bad 👎\nif (name) {\n  // ...\n}\n\n// good 👍\nif (name !== '') {\n  // ...\n}\n\n// bad 👎\nif (collection.length) {\n  // ...\n}\n\n// good 👍\nif (collection.length > 0) {\n  // ...\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"for-more-information-see-truth-equality-and-javascript-by-angus-croll\"\n    }}>{`For more information see `}<a parentName=\"h3\" {...{\n        \"href\": \"https://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108\"\n      }}>{`Truth Equality and JavaScript`}</a>{` by Angus Croll.`}</h3>\n    <h3 {...{\n      \"id\": \"use-braces-to-create-blocks-in-case-and-default-clauses-that-contain-lexical-declarations-eg-let-const-function-and-class\"\n    }}>{`Use braces to create blocks in `}<inlineCode parentName=\"h3\">{`case`}</inlineCode>{` and `}<inlineCode parentName=\"h3\">{`default`}</inlineCode>{` clauses that contain lexical declarations (e.g. `}<inlineCode parentName=\"h3\">{`let`}</inlineCode>{`, `}<inlineCode parentName=\"h3\">{`const`}</inlineCode>{`, `}<inlineCode parentName=\"h3\">{`function`}</inlineCode>{`, and `}<inlineCode parentName=\"h3\">{`class`}</inlineCode>{`).`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-case-declarations.html\"\n      }}><inlineCode parentName=\"a\">{`no-case-declarations`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? Lexical declarations are visible in the entire `}<inlineCode parentName=\"p\">{`switch`}</inlineCode>{` block but only get initialized when assigned, which only happens when its `}<inlineCode parentName=\"p\">{`case`}</inlineCode>{` is reached. This causes problems when multiple `}<inlineCode parentName=\"p\">{`case`}</inlineCode>{` clauses attempt to define the same thing.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nswitch (foo) {\n  case 1:\n    let x = 1;\n    break;\n  case 2:\n    const y = 2;\n    break;\n  case 3:\n    function f() {\n        // ...\n    }\n    break;\n  default:\n    class C {}\n}\n\n// good 👍\nswitch (foo) {\n  case 1: {\n    let x = 1;\n    break;\n  }\n  case 2: {\n    const y = 2;\n    break;\n  }\n  case 3: {\n    function f() {\n        // ...\n    }\n    break;\n  }\n  case 4:\n    bar();\n    break;\n  default: {\n    class C {}\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"ternaries-should-not-be-nested-and-generally-be-single-line-expressions\"\n    }}>{`Ternaries should not be nested and generally be single line expressions.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-nested-ternary.html\"\n      }}><inlineCode parentName=\"a\">{`no-nested-ternary`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst foo = maybe1 > maybe2\n  ? 'bar'\n  : value1 > value2 ? 'baz' : null;\n\n// split into 2 separated ternary expressions\nconst maybeNull = value1 > value2 ? 'baz' : null;\n\n// better\nconst foo = maybe1 > maybe2\n  ? 'bar'\n  : maybeNull;\n\n// best\nconst foo = maybe1 > maybe2 ? 'bar' : maybeNull;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"avoid-unneeded-ternary-statements\"\n    }}>{`Avoid unneeded ternary statements.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-unneeded-ternary.html\"\n      }}><inlineCode parentName=\"a\">{`no-unneeded-ternary`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst foo = a ? a : b;\nconst bar = c ? true : false;\nconst baz = c ? false : true;\n\n// good 👍\nconst foo = a || b;\nconst bar = !!c;\nconst baz = !c;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"when-mixing-operators-enclose-them-in-parentheses\"\n    }}>{`When mixing operators, enclose them in parentheses.`}</h3>\n    <p>{`The only exception is the standard arithmetic operators: `}<inlineCode parentName=\"p\">{`+`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`-`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`**`}</inlineCode>{` since their precedence is broadly understood. We recommend enclosing `}<inlineCode parentName=\"p\">{`/`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`*`}</inlineCode>{` in parentheses because their precedence can be ambiguous when they are mixed.\neslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-mixed-operators.html\"\n      }}><inlineCode parentName=\"a\">{`no-mixed-operators`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: This improves readability and clarifies the developer's intention.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst foo = a && b < 0 || c > 0 || d + 1 === 0;\n\n// bad 👎\nconst bar = a ** b - 5 % d;\n\n// bad 👎\n// one may be confused into thinking (a || b) && c\nif (a || b && c) {\n  return d;\n}\n\n// bad 👎\nconst bar = a + b / c * d;\n\n// good 👍\nconst foo = (a && b < 0) || c > 0 || (d + 1 === 0);\n\n// good 👍\nconst bar = a ** b - (5 % d);\n\n// good 👍\nif (a || (b && c)) {\n  return d;\n}\n\n// good 👍\nconst bar = a + (b / c) * d;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"blocks\"\n    }}>{`Blocks`}</h2>\n    <h3 {...{\n      \"id\": \"use-braces-with-all-multiline-blocks\"\n    }}>{`Use braces with all multiline blocks.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/nonblock-statement-body-position\"\n      }}><inlineCode parentName=\"a\">{`nonblock-statement-body-position`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nif (test)\n  return false;\n\n// good 👍\nif (test) return false;\n\n// good 👍\nif (test) {\n  return false;\n}\n\n// bad 👎\nfunction foo() { return false; }\n\n// good 👍\nfunction bar() {\n  return false;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"if-youre-using-multiline-blocks-with-if-and-else-put-else-on-the-same-line-as-your-if-blocks-closing-brace\"\n    }}>{`If you're using multiline blocks with `}<inlineCode parentName=\"h3\">{`if`}</inlineCode>{` and `}<inlineCode parentName=\"h3\">{`else`}</inlineCode>{`, put `}<inlineCode parentName=\"h3\">{`else`}</inlineCode>{` on the same line. as your `}<inlineCode parentName=\"h3\">{`if`}</inlineCode>{` block's closing brace.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/brace-style.html\"\n      }}><inlineCode parentName=\"a\">{`brace-style`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nif (test) {\n  thing1();\n  thing2();\n} else {\n  thing3();\n}\n\n// good 👍\nif (test) {\n  thing1();\n  thing2();\n} else {\n  thing3();\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"if-an-if-block-always-executes-a-return-statement-the-subsequent-else-block-is-unnecessary\"\n    }}>{`If an `}<inlineCode parentName=\"h3\">{`if`}</inlineCode>{` block always executes a `}<inlineCode parentName=\"h3\">{`return`}</inlineCode>{` statement, the subsequent `}<inlineCode parentName=\"h3\">{`else`}</inlineCode>{` block is unnecessary.`}</h3>\n    <p>{`A `}<inlineCode parentName=\"p\">{`return`}</inlineCode>{` in an `}<inlineCode parentName=\"p\">{`else if`}</inlineCode>{` block following an `}<inlineCode parentName=\"p\">{`if`}</inlineCode>{` block that contains a `}<inlineCode parentName=\"p\">{`return`}</inlineCode>{` can be separated into multiple `}<inlineCode parentName=\"p\">{`if`}</inlineCode>{` blocks. eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-else-return\"\n      }}><inlineCode parentName=\"a\">{`no-else-return`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nfunction foo() {\n  if (x) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n// bad 👎\nfunction cats() {\n  if (x) {\n    return x;\n  } else if (y) {\n    return y;\n  }\n}\n\n// bad 👎\nfunction dogs() {\n  if (x) {\n    return x;\n  } else {\n    if (y) {\n      return y;\n    }\n  }\n}\n\n// good 👍\nfunction foo() {\n  if (x) {\n    return x;\n  }\n\n  return y;\n}\n\n// good 👍\nfunction cats() {\n  if (x) {\n    return x;\n  }\n\n  if (y) {\n    return y;\n  }\n}\n\n// good 👍\nfunction dogs(x) {\n  if (x) {\n    if (z) {\n      return y;\n    }\n  } else {\n    return z;\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"control-statements\"\n    }}>{`Control Statements`}</h2>\n    <h3 {...{\n      \"id\": \"in-case-your-control-statement-if-while-etc-gets-too-long-or-exceeds-the-maximum-line-length-each-grouped-condition-could-be-put-into-a-new-line-the-logical-operator-should-begin-the-line\"\n    }}>{`In case your control statement (`}<inlineCode parentName=\"h3\">{`if`}</inlineCode>{`, `}<inlineCode parentName=\"h3\">{`while`}</inlineCode>{` etc.) gets too long or exceeds the maximum line length, each (grouped) condition could be put into a new line. The logical operator should begin the line.`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`IMPORTANCE: This also improves readability by making it easier to visually follow complex logic.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nif ((foo === 123 || bar === 'abc') && doesItLookGoodWhenItBecomesThatLong() && isThisReallyHappening()) {\n  thing1();\n}\n\n// bad 👎\nif (foo === 123 &&\n  bar === 'abc') {\n  thing1();\n}\n\n// bad 👎\nif (foo === 123\n  && bar === 'abc') {\n  thing1();\n}\n\n// bad 👎\nif (\n  foo === 123 &&\n  bar === 'abc'\n) {\n  thing1();\n}\n\n// good 👍\nif (\n    foo === 123\n    && bar === 'abc'\n) {\n  thing1();\n}\n\n// good 👍\nif (\n  (foo === 123 || bar === 'abc')\n  && doesItLookGoodWhenItBecomesThatLong()\n  && isThisReallyHappening()\n) {\n  thing1();\n}\n\n// good 👍\nif (foo === 123 && bar === 'abc') {\n  thing1();\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"dont-use-selection-operators-in-place-of-control-statements\"\n    }}>{`Don't use selection operators in place of control statements.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\n!isRunning && startRunning();\n\n// good 👍\nif (!isRunning) {\n  startRunning();\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"comments\"\n    }}>{`Comments`}</h2>\n    <h3 {...{\n      \"id\": \"use----for-multiline-comments\"\n    }}>{`Use `}<inlineCode parentName=\"h3\">{`/** ... */`}</inlineCode>{` for multiline comments.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\n// make() returns a new element\n// based on the passed in tag name\n//\n// @param {String} tag\n// @return {Element} element\nfunction make(tag) {\n  // ...\n\n  return element;\n}\n\n// good 👍\n/**\n * make() returns a new element\n * based on the passed-in tag name\n */\nfunction make(tag) {\n  // ...\n\n  return element;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use--for-single-line-comments\"\n    }}>{`Use `}<inlineCode parentName=\"h3\">{`//`}</inlineCode>{` for single line comments.`}</h3>\n    <p>{`Place single line comments on a newline above the subject of the comment. Put an empty line before the comment unless it's on the first line of a block.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst active = true; // is current tab\n\n// good 👍\n// is current tab\nconst active = true;\n\n// bad 👎\nfunction getType() {\n  console.log('fetching type...');\n  // set the default type to 'no type'\n  const type = this.type || 'no type';\n\n  return type;\n}\n\n// good 👍\nfunction getType() {\n  console.log('fetching type...');\n\n  // set the default type to 'no type'\n  const type = this.type || 'no type';\n\n  return type;\n}\n\n// also good\nfunction getType() {\n  // set the default type to 'no type'\n  const type = this.type || 'no type';\n\n  return type;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"start-all-comments-with-a-space-to-make-it-easier-to-read\"\n    }}>{`Start all comments with a space to make it easier to read.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/spaced-comment\"\n      }}><inlineCode parentName=\"a\">{`spaced-comment`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\n//is current tab\nconst active = true;\n\n// good 👍\n// is current tab\nconst active = true;\n\n// bad 👎\n/**\n *make() returns a new element\n *based on the passed-in tag name\n */\nfunction make(tag) {\n  // ...\n\n  return element;\n}\n\n// good 👍\n/**\n * make() returns a new element\n * based on the passed-in tag name\n */\nfunction make(tag) {\n  // ...\n\n  return element;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"prefixing-your-comments-with-fixme-or-todo-helps-other-developers-quickly-understand\"\n    }}>{`Prefixing your comments with `}<inlineCode parentName=\"h3\">{`FIXME`}</inlineCode>{` or `}<inlineCode parentName=\"h3\">{`TODO`}</inlineCode>{` helps other developers quickly understand.`}</h3>\n    <h4 {...{\n      \"id\": \"use--fixme-to-annotate-problems\"\n    }}>{`Use `}<inlineCode parentName=\"h4\">{`// FIXME:`}</inlineCode>{` to annotate problems.`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`class Calculator extends Abacus {\n  constructor() {\n    super();\n\n    // FIXME: shouldn't use a global here\n    total = 0;\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"use--todo-to-annotate-solutions-to-problems\"\n    }}>{`Use `}<inlineCode parentName=\"h4\">{`// TODO:`}</inlineCode>{` to annotate solutions to problems.`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`class Calculator extends Abacus {\n  constructor() {\n    super();\n\n    // TODO: total should be configurable by an options param\n    this.total = 0;\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"commas\"\n    }}>{`Commas`}</h2>\n    <h3 {...{\n      \"id\": \"leading-commas-nope\"\n    }}>{`Leading commas: `}<strong parentName=\"h3\">{`Nope.`}</strong></h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/comma-style.html\"\n      }}><inlineCode parentName=\"a\">{`comma-style`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nconst story = [\n  once\n  , upon\n  , aTime\n];\n\n// good 👍\nconst story = [\n  once,\n  upon,\n  aTime,\n];\n\n// bad 👎\nconst hero = {\n  firstName: 'Ada'\n  , lastName: 'Lovelace'\n  , birthYear: 1815\n  , superPower: 'computers'\n};\n\n// good 👍\nconst hero = {\n  firstName: 'Ada',\n  lastName: 'Lovelace',\n  birthYear: 1815,\n  superPower: 'computers',\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"additional-trailing-comma-yup\"\n    }}>{`Additional trailing comma: `}<strong parentName=\"h3\">{`Yup.`}</strong></h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/comma-dangle.html\"\n      }}><inlineCode parentName=\"a\">{`comma-dangle`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? This leads to cleaner git diffs. Also, transpilers like Babel will remove the additional trailing comma in the transpiled code which means you don’t have to worry about the `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/airbnb/javascript/blob/es5-deprecated/es5/README.md#commas\"\n        }}>{`trailing comma problem`}</a>{` in legacy browsers.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-diff\"\n      }}>{`// bad 👎 - git diff without trailing comma\nconst hero = {\n        firstName: 'Florence',\n-    lastName: 'Nightingale'\n+    lastName: 'Nightingale',\n+    inventorOf: ['coxcomb chart', 'modern nursing']\n};\n\n// good 👍  - git diff with trailing comma\nconst hero = {\n        firstName: 'Florence',\n        lastName: 'Nightingale',\n+    inventorOf: ['coxcomb chart', 'modern nursing'],\n};\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nconst hero = {\n  firstName: 'Dana',\n  lastName: 'Scully'\n};\n\nconst heroes = [\n  'Batman',\n  'Superman'\n];\n\n// good 👍\nconst hero = {\n  firstName: 'Dana',\n  lastName: 'Scully',\n};\n\nconst heroes = [\n  'Batman',\n  'Superman',\n];\n\n// bad 👎\nfunction createHero(\n  firstName,\n  lastName,\n  inventorOf\n) {\n    // does nothing\n}\n\n// good 👍\nfunction createHero(\n  firstName,\n  lastName,\n  inventorOf,\n) {\n    // does nothing\n}\n\n// good 👍  (note that a comma must not appear after a \"rest\" element)\nfunction createHero(\n  firstName,\n  lastName,\n  inventorOf,\n  ...heroArgs\n) {\n    // does nothing\n}\n\n// bad 👎\ncreateHero(\n  firstName,\n  lastName,\n  inventorOf\n);\n\n// good 👍\ncreateHero(\n  firstName,\n  lastName,\n  inventorOf,\n);\n\n// good 👍  (note that a comma must not appear after a \"rest\" element)\ncreateHero(\n  firstName,\n  lastName,\n  inventorOf,\n  ...heroArgs\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"semicolons\"\n    }}>{`Semicolons`}</h2>\n    <h3 {...{\n      \"id\": \"yup\"\n    }}><strong parentName=\"h3\">{`Yup.`}</strong></h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/semi.html\"\n      }}><inlineCode parentName=\"a\">{`semi`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? When JavaScript encounters a line break without a semicolon, it uses a set of rules called `}<a parentName=\"p\" {...{\n          \"href\": \"https://tc39.github.io/ecma262/#sec-automatic-semicolon-insertion\"\n        }}>{`Automatic Semicolon Insertion`}</a>{` to determine whether or not it should regard that line break as the end of a statement, and (as the name implies) place a semicolon into your code before the line break if it thinks so. ASI contains a few eccentric behaviors, though, and your code will break if JavaScript misinterprets your line break. These rules will become more complicated as new features become a part of JavaScript. Explicitly terminating your statements and configuring your linter to catch missing semicolons will help prevent you from encountering issues.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎 - raises exception\nconst luke = {}\nconst leia = {}\n[luke, leia].forEach((jedi) => jedi.father = 'vader')\n\n// bad 👎 - raises exception\nconst reaction = \"No! That’s impossible!\"\n(async function meanwhileOnTheFalcon() {\n    // handle \\`leia\\`, \\`lando\\`, \\`chewie\\`, \\`r2\\`, \\`c3p0\\`\n    // ...\n}())\n\n// bad 👎 - returns \\`undefined\\` instead of the value on the next line - always happens when \\`return\\` is on a line by itself because of ASI!\nfunction foo() {\n    return\n    'search your feelings, you know it to be foo'\n}\n\n// good 👍\nconst luke = {};\nconst leia = {};\n[luke, leia].forEach((jedi) => {\n    jedi.father = 'vader';\n});\n\n// good 👍\nconst reaction = \"No! That’s impossible!\";\n(async function meanwhileOnTheFalcon() {\n    // handle \\`leia\\`, \\`lando\\`, \\`chewie\\`, \\`r2\\`, \\`c3p0\\`\n    // ...\n}());\n\n// good 👍\nfunction foo() {\n    return 'search your feelings, you know it to be foo';\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"type-casting--coercion\"\n    }}>{`Type Casting & Coercion`}</h2>\n    <h3 {...{\n      \"id\": \"perform-type-coercion-at-the-beginning-of-the-statement\"\n    }}>{`Perform type coercion at the beginning of the statement.`}</h3>\n    <h3 {...{\n      \"id\": \"strings-1\"\n    }}>{`Strings`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-new-wrappers\"\n      }}><inlineCode parentName=\"a\">{`no-new-wrappers`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// => this.reviewScore = 9;\n\n// bad 👎\nconst totalScore = new String(this.reviewScore); // typeof totalScore is \"object\" not \"string\"\n\n// bad 👎\nconst totalScore = this.reviewScore + ''; // invokes this.reviewScore.valueOf()\n\n// bad 👎\nconst totalScore = this.reviewScore.toString(); // isn’t guaranteed to return a string\n\n// good 👍\nconst totalScore = String(this.reviewScore);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"numbers-use-number-for-type-casting-and-parseint-always-with-a-radix-for-parsing-strings\"\n    }}>{`Numbers: Use `}<inlineCode parentName=\"h3\">{`Number`}</inlineCode>{` for type casting and `}<inlineCode parentName=\"h3\">{`parseInt`}</inlineCode>{` always with a radix for parsing strings.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/radix\"\n      }}><inlineCode parentName=\"a\">{`radix`}</inlineCode></a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-new-wrappers\"\n      }}><inlineCode parentName=\"a\">{`no-new-wrappers`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const inputValue = '4';\n\n// bad 👎\nconst val = new Number(inputValue);\n\n// bad 👎\nconst val = +inputValue;\n\n// bad 👎\nconst val = inputValue >> 0;\n\n// bad 👎\nconst val = parseInt(inputValue);\n\n// good 👍\nconst val = Number(inputValue);\n\n// good 👍\nconst val = parseInt(inputValue, 10);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"if-for-whatever-reason-you-are-doing-something-wild-and-parseint-is-your-bottleneck-and-need-to-use-bitshift-for-performance-reasons-leave-a-comment-explaining-why-and-what-youre-doing\"\n    }}>{`If for whatever reason you are doing something wild and `}<inlineCode parentName=\"h3\">{`parseInt`}</inlineCode>{` is your bottleneck and need to use Bitshift for `}<a parentName=\"h3\" {...{\n        \"href\": \"https://jsperf.com/coercion-vs-casting/3\"\n      }}>{`performance reasons`}</a>{`, leave a comment explaining why and what you’re doing.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// good 👍\n/**\n * parseInt was the reason my code was slow.\n * Bitshifting the String to coerce it to a\n * Number made it a lot faster.\n */\nconst val = inputValue >> 0;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"note-be-careful-when-using-bitshift-operations-numbers-are-represented-as-64-bit-values-but-bitshift-operations-always-return-a-32-bit-integer-source-bitshift-can-lead-to-unexpected-behavior-for-integer-values-larger-than-32-bits-discussion-largest-signed-32-bit-int-is-2147483647\"\n    }}><strong parentName=\"h3\">{`Note:`}</strong>{` Be careful when using bitshift operations. Numbers are represented as `}<a parentName=\"h3\" {...{\n        \"href\": \"https://es5.github.io/#x4.3.19\"\n      }}>{`64-bit values`}</a>{`, but bitshift operations always return a 32-bit integer (`}<a parentName=\"h3\" {...{\n        \"href\": \"https://es5.github.io/#x11.7\"\n      }}>{`source`}</a>{`). Bitshift can lead to unexpected behavior for integer values larger than 32 bits. `}<a parentName=\"h3\" {...{\n        \"href\": \"https://github.com/airbnb/javascript/issues/109\"\n      }}>{`Discussion`}</a>{`. Largest signed 32-bit Int is 2,147,483,647:`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`2147483647 >> 0; // => 2147483647\n2147483648 >> 0; // => -2147483648\n2147483649 >> 0; // => -2147483647\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"booleans\"\n    }}>{`Booleans`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-new-wrappers\"\n      }}><inlineCode parentName=\"a\">{`no-new-wrappers`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const age = 0;\n\n// bad 👎\nconst hasAge = new Boolean(age);\n\n// good 👍\nconst hasAge = Boolean(age);\n\n// best\nconst hasAge = !!age;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"naming-conventions\"\n    }}>{`Naming Conventions`}</h2>\n    <h3 {...{\n      \"id\": \"avoid-single-letter-names-be-descriptive-with-your-naming\"\n    }}>{`Avoid single letter names. Be descriptive with your naming.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/id-length\"\n      }}><inlineCode parentName=\"a\">{`id-length`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nfunction q() {\n    // ...\n}\n\n// good 👍\nfunction query() {\n    // ...\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-camelcase-when-naming-objects-functions-and-instances\"\n    }}>{`Use camelCase when naming objects, functions, and instances.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/camelcase.html\"\n      }}><inlineCode parentName=\"a\">{`camelcase`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nconst OBJEcttsssss = {};\nconst this_is_my_object = {};\nfunction c() {}\n\n// good 👍\nconst thisIsMyObject = {};\nfunction thisIsMyFunction() {}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-pascalcase-only-when-naming-constructors-or-classes\"\n    }}>{`Use PascalCase only when naming constructors or classes.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/new-cap.html\"\n      }}><inlineCode parentName=\"a\">{`new-cap`}</inlineCode></a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nfunction user(options) {\n    this.name = options.name;\n}\n\nconst bad = new user({\n    name: 'nope',\n});\n\n// good 👍\nclass User {\n  constructor(options) {\n    this.name = options.name;\n  }\n}\n\nconst good = new User({\n  name: 'yup',\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"do-not-use-trailing-or-leading-underscores\"\n    }}>{`Do not use trailing or leading underscores.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-underscore-dangle.html\"\n      }}><inlineCode parentName=\"a\">{`no-underscore-dangle`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? JavaScript does not have the concept of privacy in terms of properties or methods. Although a leading underscore is a common convention to mean “private”, in fact, these properties are fully public, and as such, are part of your public API contract. This convention might lead developers to wrongly think that a change won’t count as breaking, or that tests aren’t needed. tl;dr: if you want something to be “private”, it must not be observably present.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nthis.__firstName__ = 'Panda';\nthis.firstName_ = 'Panda';\nthis._firstName = 'Panda';\n\n// good 👍\nthis.firstName = 'Panda';\n\n// good 👍 , in environments where WeakMaps are available\n// see https://kangax.github.io/compat-table/es6/#test-WeakMap\nconst firstNames = new WeakMap();\nfirstNames.set(this, 'Panda');\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"dont-save-references-to-this-use-arrow-functions-or-functionbind\"\n    }}>{`Don’t save references to `}<inlineCode parentName=\"h3\">{`this`}</inlineCode>{`. Use arrow functions or `}<a parentName=\"h3\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"\n      }}>{`Function#bind`}</a>{`.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nfunction foo() {\n  const self = this;\n  return function () {\n    console.log(self);\n  };\n}\n\n// bad 👎\nfunction foo() {\n  const that = this;\n  return function () {\n    console.log(that);\n  };\n}\n\n// good 👍\nfunction foo() {\n  return () => {\n    console.log(this);\n  };\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"a-base-filename-should-exactly-match-the-name-of-its-default-export\"\n    }}>{`A base filename should exactly match the name of its default export.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// file 1 contents\nclass CheckBox {\n    // ...\n}\nexport default CheckBox;\n\n// file 2 contents\nexport default function fortyTwo() { return 42; }\n\n// file 3 contents\nexport default function insideDirectory() {}\n\n// in some other file\n// bad 👎\nimport CheckBox from './checkBox'; // PascalCase import/export, camelCase filename\nimport FortyTwo from './FortyTwo'; // PascalCase import/filename, camelCase export\nimport InsideDirectory from './InsideDirectory'; // PascalCase import/filename, camelCase export\n\n// bad 👎\nimport CheckBox from './check_box'; // PascalCase import/export, snake_case filename\nimport forty_two from './forty_two'; // snake_case import/filename, camelCase export\nimport inside_directory from './inside_directory'; // snake_case import, camelCase export\nimport index from './inside_directory/index'; // requiring the index file explicitly\nimport insideDirectory from './insideDirectory/index'; // requiring the index file explicitly\n\n// good 👍\nimport CheckBox from './CheckBox'; // PascalCase export/import/filename\nimport fortyTwo from './fortyTwo'; // camelCase export/import/filename\nimport insideDirectory from './insideDirectory'; // camelCase export/import/directory name/implicit \"index\"\n// ^ supports both insideDirectory.js and insideDirectory/index.js\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-camelcase-when-you-export-default-a-function-your-filename-should-be-identical-to-your-functions-name\"\n    }}>{`Use camelCase when you export-default a function. Your filename should be identical to your function’s name.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function makeStyleGuide() {\n    // ...\n}\n\nexport default makeStyleGuide;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-pascalcase-when-you-export-a-constructor--class--singleton--function-library--bare-object\"\n    }}>{`Use PascalCase when you export a constructor / class / singleton / function library / bare object.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const AirbnbStyleGuide = {\n  es6: {\n  },\n};\n\nexport default AirbnbStyleGuide;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"acronyms-and-initialisms-should-always-be-all-uppercased-or-all-lowercased\"\n    }}>{`Acronyms and initialisms should always be all uppercased, or all lowercased.`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? Names are for readability, not to appease a computer algorithm.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nimport SmsContainer from './containers/SmsContainer';\n\n// bad 👎\nconst HttpRequests = [\n    // ...\n];\n\n// good 👍\nimport SMSContainer from './containers/SMSContainer';\n\n// good 👍\nconst HTTPRequests = [\n    // ...\n];\n\n// also good\nconst httpRequests = [\n    // ...\n];\n\n// best\nimport TextMessageContainer from './containers/TextMessageContainer';\n\n// best\nconst requests = [\n    // ...\n];\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"you-may-optionally-uppercase-a-constant-only-if-it-1-is-exported-2-is-a-const-it-can-not-be-reassigned-and-3-the-programmer-can-trust-it-and-its-nested-properties-to-never-change\"\n    }}>{`You may optionally uppercase a constant only if it (1) is exported, (2) is a `}<inlineCode parentName=\"h3\">{`const`}</inlineCode>{` (it can not be reassigned), and (3) the programmer can trust it (and its nested properties) to never change.`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? This is an additional tool to assist in situations where the programmer would be unsure if a variable might ever change. UPPERCASE_VARIABLES are letting the programmer know that they can trust the variable (and its properties) not to change.`}</p>\n      <ul parentName=\"blockquote\">\n        <li parentName=\"ul\">{`What about all `}<inlineCode parentName=\"li\">{`const`}</inlineCode>{` variables? - This is unnecessary, so uppercasing should not be used for constants within a file. It should be used for exported constants however.`}</li>\n        <li parentName=\"ul\">{`What about exported objects? - Uppercase at the top level of export (e.g. `}<inlineCode parentName=\"li\">{`EXPORTED_OBJECT.key`}</inlineCode>{`) and maintain that all nested properties do not change.`}</li>\n      </ul>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nconst PRIVATE_VARIABLE = 'should not be unnecessarily uppercased within a file';\n\n// bad 👎\nexport const THING_TO_BE_CHANGED = 'should obviously not be uppercased';\n\n// bad 👎\nexport let REASSIGNABLE_VARIABLE = 'do not use let with uppercase variables';\n\n// ---\n\n// allowed but does not supply semantic value\nexport const apiKey = 'SOMEKEY';\n\n// better in most cases\nexport const API_KEY = 'SOMEKEY';\n\n// ---\n\n// bad 👎 - unnecessarily uppercases key while adding no semantic value\nexport const MAPPING = {\n    KEY: 'value'\n};\n\n// good 👍\nexport const MAPPING = {\n    key: 'value'\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-uppercase-for-constants\"\n    }}>{`Use UPPERCASE for Constants`}</h3>\n    <p>{`Constants should be declared as regular variables or static class properties, using all uppercase letters.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nconst second = 1 * 1000;\nfunction File() {\n}\nFile.fullPermissions = 0777;\n\n// good 👍\nvar SECOND = 1 * 1000;\nfunction File() {\n}\nFile.FULL_PERMISSIONS = 0777;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-camelcase-for-variables-properties-and-function-names\"\n    }}>{`Use camelCase for variables, properties and function names`}</h3>\n    <p>{`Variables, properties and function names should use camelCase. They should also be descriptive. Single character variables and uncommon abbreviations should generally be avoided.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// bad 👎\nvar admin_user = db.query('SELECT * FROM users ...');\n\n// good 👍\nvar adminUser = db.query('SELECT * FROM users ...');\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"accessors\"\n    }}>{`Accessors`}</h2>\n    <h3 {...{\n      \"id\": \"accessor-functions-for-properties-are-not-required\"\n    }}>{`Accessor functions for properties are not required.`}</h3>\n    <h3 {...{\n      \"id\": \"do-not-use-javascript-getterssetters-as-they-cause-unexpected-side-effects-and-are-harder-to-test-maintain-and-reason-about-instead-if-you-do-make-accessor-functions-use-getval-and-setvalhello\"\n    }}>{`Do not use JavaScript getters/setters as they cause unexpected side effects and are harder to test, maintain, and reason about. Instead, if you do make accessor functions, use `}<inlineCode parentName=\"h3\">{`getVal()`}</inlineCode>{` and `}<inlineCode parentName=\"h3\">{`setVal('hello')`}</inlineCode>{`.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nclass Dragon {\n    get age() {\n    // ...\n    }\n\n    set age(value) {\n    // ...\n    }\n}\n\n// good 👍\nclass Dragon {\n    getAge() {\n    // ...\n    }\n\n    setAge(value) {\n    // ...\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"if-the-propertymethod-is-a-boolean-use-isval-or-hasval\"\n    }}>{`If the property/method is a `}<inlineCode parentName=\"h3\">{`boolean`}</inlineCode>{`, use `}<inlineCode parentName=\"h3\">{`isVal()`}</inlineCode>{` or `}<inlineCode parentName=\"h3\">{`hasVal()`}</inlineCode>{`.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nif (!dragon.age()) {\n    return false;\n}\n\n// good 👍\nif (!dragon.hasAge()) {\n    return false;\n}\n`}</code></pre>\n    <p>{`It’s okay to create `}<inlineCode parentName=\"p\">{`get()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`set()`}</inlineCode>{` functions, but be consistent.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`class Jedi {\n  constructor(options = {}) {\n  const lightsaber = options.lightsaber || 'blue';\n    this.set('lightsaber', lightsaber);\n  }\n\n  set(key, val) {\n    this[key] = val;\n  }\n\n  get(key) {\n    return this[key];\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"events\"\n    }}>{`Events`}</h2>\n    <h3 {...{\n      \"id\": \"when-attaching-data-payloads-to-events-whether-dom-events-or-something-more-proprietary-like-backbone-events-pass-an-object-literal-also-known-as-a-hash-instead-of-a-raw-value-this-allows-a-subsequent-contributor-to-add-more-data-to-the-event-payload-without-finding-and-updating-every-handler-for-the-event-for-example-instead-of\"\n    }}>{`When attaching data payloads to events (whether DOM events or something more proprietary like Backbone events), pass an object literal (also known as a \"hash\") instead of a raw value. This allows a subsequent contributor to add more data to the event payload without finding and updating every handler for the event. For example, instead of:`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\n$(this).trigger('listingUpdated', listing.id);\n\n// ...\n\n$(this).on('listingUpdated', (e, listingID) => {\n    // do something with listingID\n});\n`}</code></pre>\n    <p>{`prefer:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// good 👍\n$(this).trigger('listingUpdated', { listingID: listing.id });\n\n// ...\n\n$(this).on('listingUpdated', (e, data) => {\n    // do something with data.listingID\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"jquery\"\n    }}>{`jQuery`}</h2>\n    <h3 {...{\n      \"id\": \"prefix-jquery-object-variables-with-a-\"\n    }}>{`Prefix jQuery object variables with a `}<inlineCode parentName=\"h3\">{`$`}</inlineCode>{`.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nconst sidebar = $('.sidebar');\n\n// good 👍\nconst $sidebar = $('.sidebar');\n\n// good 👍\nconst $sidebarBtn = $('.sidebar-btn');\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"cache-jquery-lookups\"\n    }}>{`Cache jQuery lookups.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nfunction setSidebar() {\n  $('.sidebar').hide();\n\n  // ...\n\n  $('.sidebar').css({\n    'background-color': 'pink',\n  });\n}\n\n// good 👍\nfunction setSidebar() {\n  const $sidebar = $('.sidebar');\n  $sidebar.hide();\n\n  // ...\n\n  $sidebar.css({\n    'background-color': 'pink',\n  });\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"for-dom-queries-use-cascading-sidebar-ul-or-parent--child-sidebar--ul\"\n    }}>{`For DOM queries use Cascading `}<inlineCode parentName=\"h3\">{`$('.sidebar ul')`}</inlineCode>{` or parent > child `}<inlineCode parentName=\"h3\">{`$('.sidebar > ul')`}</inlineCode>{`.`}</h3>\n    <p>{`Performance Testing Link - `}<a parentName=\"p\" {...{\n        \"href\": \"http://jsperf.com/jquery-find-vs-context-sel/16\"\n      }}>{`jsPerf`}</a></p>\n    <h3 {...{\n      \"id\": \"use-find-with-scoped-jquery-object-queries\"\n    }}>{`Use `}<inlineCode parentName=\"h3\">{`find`}</inlineCode>{` with scoped jQuery object queries.`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\n$('ul', '.sidebar').hide();\n\n// bad 👎\n$('.sidebar').find('ul').hide();\n\n// good 👍\n$('.sidebar ul').hide();\n\n// good 👍\n$('.sidebar > ul').hide();\n\n// good 👍\n$sidebar.find('ul').hide();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"ecmascript-5-compatibility\"\n    }}>{`ECMAScript 5 Compatibility`}</h2>\n    <h3 {...{\n      \"id\": \"refer-to-kangaxs-es5-compatibility-table\"\n    }}>{`Refer to `}<a parentName=\"h3\" {...{\n        \"href\": \"https://twitter.com/kangax/\"\n      }}>{`Kangax`}</a>{`’s ES5 `}<a parentName=\"h3\" {...{\n        \"href\": \"https://kangax.github.io/es5-compat-table/\"\n      }}>{`compatibility table`}</a>{`.`}</h3>\n    <h2 {...{\n      \"id\": \"ecmascript-6-es-2015-styles\"\n    }}>{`ECMAScript 6+ (ES 2015+) Styles`}</h2>\n    <h3 {...{\n      \"id\": \"this-is-a-collection-of-links-to-the-various-es6-features\"\n    }}>{`This is a collection of links to the various ES6+ features.`}</h3>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#arrow-functions\"\n          }}>{`Arrow Functions`}</a></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#classes--constructors\"\n          }}>{`Classes`}</a></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#es6-object-shorthand\"\n          }}>{`Object Shorthand`}</a></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#es6-object-concise\"\n          }}>{`Object Concise`}</a></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#es6-computed-properties\"\n          }}>{`Object Computed Properties`}</a></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#es6-template-literals\"\n          }}>{`Template Strings`}</a></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#destructuring\"\n          }}>{`Destructuring`}</a></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#es6-default-parameters\"\n          }}>{`Default Parameters`}</a></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#es6-rest\"\n          }}>{`Rest`}</a></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#es6-array-spreads\"\n          }}>{`Array Spreads`}</a></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#references\"\n          }}>{`Let and Const`}</a></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#es2016-properties--exponentiation-operator\"\n          }}>{`Exponentiation Operator`}</a></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#iterators-and-generators\"\n          }}>{`Iterators and Generators`}</a></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#modules\"\n          }}>{`Modules`}</a></p>\n        <a name=\"tc39-proposals\"></a>\n      </li>\n    </ol>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"#tc39-proposals\"\n          }}>{`28.2`}</a>{` Do not use `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/tc39/proposals\"\n          }}>{`TC39 proposals`}</a>{` that have not reached stage 3.`}</p>\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`Why? `}<a parentName=\"p\" {...{\n              \"href\": \"https://tc39.github.io/process-document/\"\n            }}>{`They are not finalized`}</a>{`, and they are subject to change or to be withdrawn entirely. We want to use JavaScript, and proposals are not JavaScript yet.`}</p>\n        </blockquote>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"standard-library\"\n    }}>{`Standard Library`}</h2>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects\"\n      }}>{`Standard Library`}</a>{`\ncontains utilities that are functionally broken but remain for legacy reasons.`}</p>\n    <h3 {...{\n      \"id\": \"use-numberisnan-instead-of-global-isnan\"\n    }}>{`Use `}<inlineCode parentName=\"h3\">{`Number.isNaN`}</inlineCode>{` instead of global `}<inlineCode parentName=\"h3\">{`isNaN`}</inlineCode>{`.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-restricted-globals\"\n      }}><inlineCode parentName=\"a\">{`no-restricted-globals`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? The global `}<inlineCode parentName=\"p\">{`isNaN`}</inlineCode>{` coerces non-numbers to numbers, returning true for anything that coerces to NaN.\nIf this behavior is desired, make it explicit.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nisNaN('1.2'); // false\nisNaN('1.2.3'); // true\n\n// good 👍\nNumber.isNaN('1.2.3'); // false\nNumber.isNaN(Number('1.2.3')); // true\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-numberisfinite-instead-of-global-isfinite\"\n    }}>{`Use `}<inlineCode parentName=\"h3\">{`Number.isFinite`}</inlineCode>{` instead of global `}<inlineCode parentName=\"h3\">{`isFinite`}</inlineCode>{`.`}</h3>\n    <p>{`eslint: `}<a parentName=\"p\" {...{\n        \"href\": \"https://eslint.org/docs/rules/no-restricted-globals\"\n      }}><inlineCode parentName=\"a\">{`no-restricted-globals`}</inlineCode></a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? The global `}<inlineCode parentName=\"p\">{`isFinite`}</inlineCode>{` coerces non-numbers to numbers, returning true for anything that coerces to a finite number.\nIf this behavior is desired, make it explicit.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// bad 👎\nisFinite('2e3'); // true\n\n// good 👍\nNumber.isFinite('2e3'); // false\nNumber.isFinite(parseInt('2e3', 10)); // true\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"testing\"\n    }}>{`Testing`}</h2>\n    <h3 {...{\n      \"id\": \"yup-1\"\n    }}><strong parentName=\"h3\">{`Yup.`}</strong></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function foo() {\n    return true;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"no-but-seriously\"\n    }}><strong parentName=\"h3\">{`No, but seriously`}</strong>{`:`}</h3>\n    <blockquote>\n      <ul parentName=\"blockquote\">\n        <li parentName=\"ul\">{`Whichever testing framework you use, you should be writing tests!`}<ul parentName=\"li\">\n            <li parentName=\"ul\">{`Strive to write many small pure functions, and minimize where mutations occur.`}</li>\n            <li parentName=\"ul\">{`Be cautious about stubs and mocks - they can make your tests more brittle.`}</li>\n            <li parentName=\"ul\">{`We primarily use `}<a parentName=\"li\" {...{\n                \"href\": \"https://www.npmjs.com/package/mocha\"\n              }}><inlineCode parentName=\"a\">{`mocha`}</inlineCode></a>{` and `}<a parentName=\"li\" {...{\n                \"href\": \"https://www.npmjs.com/package/jest\"\n              }}><inlineCode parentName=\"a\">{`jest`}</inlineCode></a>{` at Airbnb. `}<a parentName=\"li\" {...{\n                \"href\": \"https://www.npmjs.com/package/tape\"\n              }}><inlineCode parentName=\"a\">{`tape`}</inlineCode></a>{` is also used occasionally for small, separate modules.`}</li>\n            <li parentName=\"ul\">{`100% test coverage is a good goal to strive for, even if it’s not always practical to reach it.`}</li>\n            <li parentName=\"ul\">{`Whenever you fix a bug, `}<em parentName=\"li\">{`write a regression test`}</em>{`. A bug fixed without a regression test is almost certainly going to break again in the future.`}</li>\n          </ul></li>\n      </ul>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"performance\"\n    }}>{`Performance`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.kellegous.com/j/2013/01/26/layout-performance/\"\n        }}>{`On Layout & Web Performance`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://jsperf.com/string-vs-array-concat/2\"\n        }}>{`String vs Array Concat`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://jsperf.com/try-catch-in-loop-cost/12\"\n        }}>{`Try/Catch Cost In a Loop`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://jsperf.com/bang-function\"\n        }}>{`Bang Function`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://jsperf.com/jquery-find-vs-context-sel/164\"\n        }}>{`jQuery Find vs Context, Selector`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://jsperf.com/innerhtml-vs-textcontent-for-script-text\"\n        }}>{`innerHTML vs textContent for script text`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://jsperf.com/ya-string-concat/38\"\n        }}>{`Long String Concatenation`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.quora.com/JavaScript-programming-language-Are-Javascript-functions-like-map-reduce-and-filter-already-optimized-for-traversing-array/answer/Quildreen-Motta\"\n        }}>{`Are JavaScript functions like `}<inlineCode parentName=\"a\">{`map()`}</inlineCode>{`, `}<inlineCode parentName=\"a\">{`reduce()`}</inlineCode>{`, and `}<inlineCode parentName=\"a\">{`filter()`}</inlineCode>{` optimized for traversing arrays?`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"resources\"\n    }}>{`Resources`}</h2>\n    <p><strong parentName=\"p\">{`Learning ES6+`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://tc39.github.io/ecma262/\"\n        }}>{`Latest ECMA spec`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://exploringjs.com/\"\n        }}>{`ExploringJS`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://kangax.github.io/compat-table/es6/\"\n        }}>{`ES6 Compatibility Table`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://es6-features.org/\"\n        }}>{`Comprehensive Overview of ES6 Features`}</a></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Read This`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://www.ecma-international.org/ecma-262/6.0/index.html\"\n        }}>{`Standard ECMA-262`}</a></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Tools`}</strong></p>\n    <ul>\n      <li parentName=\"ul\">{`Code Style Linters`}<ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://eslint.org/\"\n            }}>{`ESlint`}</a>{` - `}<a parentName=\"li\" {...{\n              \"href\": \"https://github.com/airbnb/javascript/blob/master/linters/.eslintrc\"\n            }}>{`Airbnb Style .eslintrc`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"http://jshint.com/\"\n            }}>{`JSHint`}</a>{` - `}<a parentName=\"li\" {...{\n              \"href\": \"https://github.com/airbnb/javascript/blob/master/linters/.jshintrc\"\n            }}>{`Airbnb Style .jshintrc`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\">{`Neutrino Preset - `}<a parentName=\"li\" {...{\n          \"href\": \"https://neutrinojs.org/packages/airbnb/\"\n        }}>{`@neutrinojs/airbnb`}</a></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Other Style Guides`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://google.github.io/styleguide/jsguide.html\"\n        }}>{`Google JavaScript Style Guide`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://google.github.io/styleguide/javascriptguide.xml\"\n        }}>{`Google JavaScript Style Guide (Old)`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://contribute.jquery.org/style-guide/js/\"\n        }}>{`jQuery Core Style Guidelines`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/rwaldron/idiomatic.js\"\n        }}>{`Principles of Writing Consistent, Idiomatic JavaScript`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://standardjs.com\"\n        }}>{`StandardJS`}</a></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Other Styles`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://gist.github.com/cjohansen/4135065\"\n        }}>{`Naming this in nested functions`}</a>{` - Christian Johansen`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/airbnb/javascript/issues/52\"\n        }}>{`Conditional Callbacks`}</a>{` - Ross Allen`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://sideeffect.kr/popularconvention/#javascript\"\n        }}>{`Popular JavaScript Coding Conventions on GitHub`}</a>{` - JeongHoon Byun`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://benalman.com/news/2012/05/multiple-var-statements-javascript/\"\n        }}>{`Multiple var statements in JavaScript, not superfluous`}</a>{` - Ben Alman`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Further Reading`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/\"\n        }}>{`Understanding JavaScript Closures`}</a>{` - Angus Croll`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://www.2ality.com/2013/06/basic-javascript.html\"\n        }}>{`Basic JavaScript for the impatient programmer`}</a>{` - Dr. Axel Rauschmayer`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://youmightnotneedjquery.com/\"\n        }}>{`You Might Not Need jQuery`}</a>{` - Zack Bloom & Adam Schwartz`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/lukehoban/es6features\"\n        }}>{`ES6 Features`}</a>{` - Luke Hoban`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/bendc/frontend-guidelines\"\n        }}>{`Frontend Guidelines`}</a>{` - Benjamin De Cock`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Books`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742\"\n        }}>{`JavaScript: The Good Parts`}</a>{` - Douglas Crockford`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752\"\n        }}>{`JavaScript Patterns`}</a>{` - Stoyan Stefanov`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X\"\n        }}>{`Pro JavaScript Design Patterns`}</a>{` - Ross Harmes and Dustin Diaz`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.amazon.com/High-Performance-Web-Sites-Essential/dp/0596529309\"\n        }}>{`High Performance Web Sites: Essential Knowledge for Front-End Engineers`}</a>{` - Steve Souders`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680\"\n        }}>{`Maintainable JavaScript`}</a>{` - Nicholas C. Zakas`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.amazon.com/JavaScript-Web-Applications-Alex-MacCaw/dp/144930351X\"\n        }}>{`JavaScript Web Applications`}</a>{` - Alex MacCaw`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273\"\n        }}>{`Pro JavaScript Techniques`}</a>{` - John Resig`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-Magazine/dp/1119962595\"\n        }}>{`Smashing Node.js: JavaScript Everywhere`}</a>{` - Guillermo Rauch`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X\"\n        }}>{`Secrets of the JavaScript Ninja`}</a>{` - John Resig and Bear Bibeault`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://humanjavascript.com/\"\n        }}>{`Human JavaScript`}</a>{` - Henrik Joreteg`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://superherojs.com/\"\n        }}>{`Superhero.js`}</a>{` - Kim Joar Bekkelund, Mads Mobæk, & Olav Bjorkoy`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://jsbooks.revolunet.com/\"\n        }}>{`JSBooks`}</a>{` - Julien Bouquillon`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.manning.com/books/third-party-javascript\"\n        }}>{`Third Party JavaScript`}</a>{` - Ben Vinegar and Anton Kovalyov`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://amzn.com/0321812182\"\n        }}>{`Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript`}</a>{` - David Herman`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://eloquentjavascript.net/\"\n        }}>{`Eloquent JavaScript`}</a>{` - Marijn Haverbeke`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://shop.oreilly.com/product/0636920033769.do\"\n        }}>{`You Don’t Know JS: ES6 & Beyond`}</a>{` - Kyle Simpson`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Blogs`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://javascriptweekly.com/\"\n        }}>{`JavaScript Weekly`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://javascriptweblog.wordpress.com/\"\n        }}>{`JavaScript, JavaScript...`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://bocoup.com/weblog\"\n        }}>{`Bocoup Weblog`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://www.adequatelygood.com/\"\n        }}>{`Adequately Good`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.nczonline.net/\"\n        }}>{`NCZOnline`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://perfectionkills.com/\"\n        }}>{`Perfection Kills`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://benalman.com/\"\n        }}>{`Ben Alman`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://dmitry.baranovskiy.com/\"\n        }}>{`Dmitry Baranovskiy`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"http://code.tutsplus.com/?s=javascript\"\n        }}>{`nettuts`}</a></li>\n    </ul>\n    <p><strong parentName=\"p\">{`Podcasts`}</strong></p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://javascriptair.com/\"\n        }}>{`JavaScript Air`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://devchat.tv/js-jabber/\"\n        }}>{`JavaScript Jabber`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"versioning\"\n    }}>{`Versioning`}</h2>\n    <p>{`We use Major.Minor.Batch style for styles versioning. For the versions available, see the `}{`[tags on this repository]`}{`.`}</p>\n    <h2 {...{\n      \"id\": \"authors\"\n    }}>{`Authors`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Girish Dhote `}<a parentName=\"li\" {...{\n          \"href\": \"mailto:gdhote@wwnorton.com\"\n        }}>{`gdhote@wwnorton.com`}</a></li>\n      <li parentName=\"ul\">{`W. W. Norton Digital Engineering Team`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}