// CSS custom properties

@use 'sass:map';
@use 'sass:meta';

@use 'a11y';
@use 'color';
@use 'device';
@use 'motion';
@use 'type';
@use 'util';

// COLOR PROPERTIES

/// Role families are full 10-grade maps that have a semantic role in the design system.
/// @group Color
$-role-families: (
	'color-primary': color.family-props(color.$primary-family, color.$color-families),
	'color-base': color.family-props(color.$base-family, color.$color-families),
	'color-error': color.family-props(color.$error-family, color.$color-families),
	'color-success':color.family-props(color.$success-family, color.$color-families),
	'color-warning':color.family-props(color.$warning-family, color.$color-families),
);
$-role-families: map.merge(
	$-role-families,
	('color-disabled': color.family-props(color.$disabled-family, $-role-families)),
);

/// Role shades are maps (default, light, lighter, dark, darker) that reference
/// their corresponding family (10 - 100) at a given grade.
/// @group Color
$-role-shades: (
	'color-primary': color.shade-props(color.$primary-grade, map.get($-role-families, 'color-primary')),
	'color-disabled': color.shade-props(color.$disabled-grade, map.get($-role-families, 'color-disabled')),
	'color-error': color.shade-props(color.$error-grade, map.get($-role-families, 'color-error')),
	'color-success': color.shade-props(color.$success-grade, map.get($-role-families, 'color-success')),
	'color-warning': color.shade-props(color.$warning-grade, map.get($-role-families, 'color-warning')),
);

/// Role colors
/// @group Color
$-role-colors: (
	'black': color.$black,
	'white': color.$white,
	'color-body-bg': util.prop('white'),
	'color-body-text': util.prop('black'),
	'color-focus-ring': util.prop('cyan-50'),
);

/// All design system colors, flattened to one map of key/value pairs.
$color: util.deep-merge(
	color.$color-families,
	$-role-families,
	$-role-shades,
	$-role-colors,
);


// DEVICE PROPERTIES

$device: (
	'hd-dpi': device.$hd-dpi,
	'hd-dppx': device.$hd-dppx,
	'breakpoint': device.$devices,
);


// MISCELLANEOUS

$misc: (
	'focus-shadow': a11y.$focus-indicator,
);


// MOTION

$-durations: (
	'duration-scalar': motion.$duration-scalar,
	'duration-simple': motion.scale(motion.$duration-simple),
	'duration-simple-enter': motion.scale(motion.$duration-simple-enter),
	'duration-simple-exit': motion.scale(motion.$duration-simple-exit),
	'duration-complex': motion.scale(motion.$duration-complex),
	'duration-detailed': motion.scale(motion.$duration-detailed),
	'duration-open': motion.scale(motion.$duration-open),
	'duration-close': motion.scale(motion.$duration-close),
	'duration-expand': motion.scale(motion.$duration-expand),
	'duration-collapse': motion.scale(motion.$duration-collapse),
	'duration-small': util.prop('duration-simple'),
	'duration-medium-expand': util.prop('duration-open'),
	'duration-medium-collapse': util.prop('duration-open'),
	'duration-large-expand': util.prop('duration-expand'),
	'duration-large-collapse': util.prop('duration-collapse'),
);

$-easings: (
	'easing-standard': motion.$easing-standard,
	'easing-deceleration': motion.$easing-deceleration,
	'easing-acceleration': motion.$easing-acceleration,
	'easing-sharp': motion.$easing-sharp,
);

$motion: map.merge($-durations, $-easings);


// TYPE

$-font-families: (
	'font-family-system-sans': type.$font-family-system-sans,
	'font-family-system-serif': type.$font-family-system-serif,
	'font-family-system-mono': type.$font-family-system-mono,
	'font-family-sans': util.prop('font-family-system-sans'),
	'font-family-serif': util.prop('font-family-system-serif'),
	'font-family-mono': util.prop('font-family-system-mono'),
	'font-family-base': util.prop('font-family-sans'),
	'font-family-headings': util.prop('font-family-sans'),
);

$-font-size: (
	'font-size-root': type.$font-size-root,
	'font-size-10': type.$font-size-10,
	'font-size-12': type.$font-size-12,
	'font-size-14': type.$font-size-14,
	'font-size-16': type.$font-size-16,
	'font-size-18': type.$font-size-18,
	'font-size-20': type.$font-size-20,
	'font-size-24': type.$font-size-24,
	'font-size-32': type.$font-size-32,
	'font-size-40': type.$font-size-40,
	'font-size-48': type.$font-size-48,
	'font-size-base': util.prop('font-size-16'),
	'font-size-small': util.prop('font-size-14'),
	'font-size-h1': util.prop('font-size-32'),
	'font-size-h2': util.prop('font-size-24'),
	'font-size-h3': util.prop('font-size-20'),
	'font-size-h4': util.prop('font-size-18'),
	'font-size-h5': util.prop('font-size-16'),
	'font-size-h6': util.prop('font-size-14'),
);

$-font-weight: (
	'font-weight-thin': type.$font-weight-thin,
	'font-weight-light': type.$font-weight-light,
	'font-weight-regular': type.$font-weight-regular,
	'font-weight-bold': type.$font-weight-bold,
	'font-weight-black': type.$font-weight-black,
	'font-weight-base': util.prop('font-weight-regular'),
	'font-weight-headings': util.prop('font-weight-bold'),
);

$-line-height: (
	'line-height-base': type.$line-height-base,
	'line-height-sm': type.$line-height-sm,
	'line-height-headings': util.prop('line-height-sm'),
);

$type: util.deep-merge(
	$-font-families,
	$-font-size,
	$-font-weight,
	$-line-height,
);

$props: () !default;
// All design system properties, flattened to a single map.
$props: util.props(
	$color,
	$device,
	$misc,
	$motion,
	$type,
	$props,
);


// MIXINS

@mixin add($new-props...) {
	$props: util.deep-merge($props, $new-props...) !global;
}

/// Set properties as prefixed CSS custom properties.
/// @param {Map} $prop-map - A CSS custom property map.
@mixin set($prop-map: $props) {
	@if meta.type-of($prop-map) != 'map' {
		@error 'Must be a map.';
	}

	@each $token, $value in $prop-map {
		@if $value {
			--#{util.prefix(#{$token})}: #{$value};
		}
	}
}

@mixin style {
	@include set($props);

	@media (prefers-reduced-motion: reduce) {
		@include set((
			'duration-scalar': 0,
		));
	}
}
