////
/// @group Color
////

@use 'sass:map';
@use 'sass:math';
@use 'sass:string';
@use 'config';
@use 'properties' as *;
@use 'util';

// SYSTEM TOKENS

/// A map of the default color families. Color families are named hues that
/// contain 10 grades, from 10 to 100.
/// @access private
$-default-families: (
	'blue': (
		10: #f0f7ff,
		20: #d9ebff,
		30: #badbff,
		40: #8fc2f7,
		50: #4696eb,
		60: #2576cc,
		70: #1d5da1,
		80: #17477a,
		90: #12365c,
		100: #0e253d,
	),
	'cyan': (
		10: #e9f7fb,
		20: #d3eef5,
		30: #afe0ed,
		40: #7cc9de,
		50: #2c9fbf,
		60: #1f7e99,
		70: #1c6275,
		80: #1b4c59,
		90: #163740,
		100: #10252b,
	),
	'gray': (
		10: #f5f5f5,
		20: #e8e8e8,
		30: #d6d6d6,
		40: #bdbdbd,
		50: #919191,
		60: #737373,
		70: #595959,
		80: #424242,
		90: #333,
		100: #232323,
	),
	'green': (
		10: #e6fae6,
		20: #d0f2d0,
		30: #aae3aa,
		40: #7ccf7c,
		50: #49a349,
		60: #228522,
		70: #216621,
		80: #1c4f1c,
		90: #163b16,
		100: #112911,
	),
	'navy': (
		10: #f2f5f8,
		20: #e2e8ee,
		30: #ced7e0,
		40: #b1bdc9,
		50: #8493a3,
		60: #63768a,
		70: #475b70,
		80: #32475e,
		90: #243547,
		100: #192633,
	),
	'purple': (
		10: #f6f5ff,
		20: #eae6ff,
		30: #d9d1ff,
		40: #bfb3ff,
		50: #9684f0,
		60: #7663d6,
		70: #5e4fab,
		80: #483c82,
		90: #342d59,
		100: #26213d,
	),
	'red': (
		10: #fff2f2,
		20: #ffe0e0,
		30: #ffc8c7,
		40: #ffa2a1,
		50: #ed6664,
		60: #c93f3c,
		70: #9e3331,
		80: #7a2a28,
		90: #591e1d,
		100: #3d1515,
	),
	'teal': (
		10: #e9f7f7,
		20: #d1eded,
		30: #abe0e0,
		40: #76cbcc,
		50: #29a1a3,
		60: #1a8082,
		70: #196263,
		80: #174c4d,
		90: #133838,
		100: #0f2929,
	),
	'yellow': (
		10: #fff5d9,
		20: #fae7af,
		30: #f0d278,
		40: #deb647,
		50: #b88828,
		60: #96690e,
		70: #7a4f11,
		80: #633b12,
		90: #4a2a0f,
		100: #331d0d,
	),
);

/// The full map of color families. Will be deeply merged with `$-default-families`
/// to create the complete map of color families.
/// @example scss - Add a new family
///   $families: ('fuscia': (60: #ff00ff));
///   @use '@nds/core/full';
/// @example scss - Override an existing family value
///   $families: ('red': (60: #f00));
///   @use '@nds/core/full';
$families: () !default;
$families: util.deep-merge($-default-families, $families);

$black: #101010 !default;
$white: #fdfdfd !default;

// ROLE TOKENS

/// The color family that will be used as the primary color across the design system.
$primary-family: 'teal' !default;

/// The grade that will be used as the midpoint for the primary swatch.
$primary-grade: 60 !default;

/// The color family that will be used as the base color for backgrounds and text.
$base-family: 'navy' !default;
$base-grade: 60 !default;

/// The color family that will be used for `disabled` elements.
$disabled-family: 'color-base' !default;
$disabled-grade: 20 !default;

/// The color family that will be used for errors.
$error-family: 'red' !default;
$error-grade: 60 !default;

/// The color family that will be used to convey success.
$success-family: 'green' !default;
$success-grade: 60 !default;

/// The Color family that will be used for warnings.
$warning-family: 'yellow' !default;
$warning-grade: 60 !default;


// :ROOT CSS PROPERTIES

@include root-props($families);
@include root-props(
	$black: $black,
	$white: $white,
);
@include root-color-family('color-primary', $primary-family, $primary-grade);
@include root-color-family('color-base', $base-family, $base-grade);
@include root-color-family('color-error', $error-family, $error-grade);
@include root-color-family('color-success', $success-family, $success-grade);
@include root-color-family('color-warning', $warning-family, $warning-grade);
@include root-color-family('color-disabled', $disabled-family, $disabled-grade);
@include root-props(
	$color-body-bg: prop('white'),
	$color-body-text: prop('color-base-90'),
	$color-focus-ring: prop('blue-50'),
);

/// Create a new color family map that references an existing family map.
/// @param {String} $name - The name of the family that you'd like to create.
/// @param {String} $ref-family - The name of the family that you'd like to reference.
/// @param {Number} $grade-root [null] - If provided, this will be the midpoint
/// of the "lighter/darker" shade swatch.
/// @example scss - Minimal usage
///   @debug family-props('foo', 'teal');
///   // (
///   //   10: var(--nds-teal-10),
///   //   20: var(--nds-teal-20),
///   //   ...30 - 80...
///   //   90: var(--nds-teal-90),
///   //   100: var(--nds-teal-100),
///   // )
/// @example scss - With `$grade-root`
///   @debug family-props('foo', 'teal', 30);
///   // (
///   //   10: var(--nds-teal-10),
///   //   20: var(--nds-teal-20),
///   //   ...all other grades...
///   //   'lighter': var(--nds-foo-10),
///   //   'light': var(--nds-foo-20),
///   //   '#root': var(--nds-foo-30),
///   //   'dark': var(--nds-foo-40),
///   //   'darker': var(--nds-foo-50),
///   // )
@function family($name, $ref-family, $grade-root: null) {
	$map: ();

	@for $n from 1 through 10 {
		$grade: $n * 10;
		$map: map.merge($map, ($grade: prop(#{$ref-family}-#{$grade})));
	}

	@if $grade-root {
		$shades: (
			-20: 'lighter',
			-10: 'light',
			0: '#root',
			10: 'dark',
			20: 'darker',
		);

		@for $g from -20 through 20 {
			/* stylelint-disable max-nesting-depth */
			@if math.abs($g % 10) == 0 {
				$css-prop: string.unquote('--#{util.prefix(-get-shade($name, $grade-root, $g))}');
				$prop: var($css-prop);

				@if config.$css-property-fallback {
					$prop-val: get-value($grade-root + $g, $map);

					@if $prop-val {
						$prop: var($css-prop, $prop-val);
					}
				}
				$map: map.merge($map, (map.get($shades, $g): $prop));
			}
		}
	}

	@return $map;
}

@function -get-shade($name, $grade-root, $offset: 0) {
	@return '#{$name}-#{util.min-max($grade-root + $offset, 10, 100)}';
}
