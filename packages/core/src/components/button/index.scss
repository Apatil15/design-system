@use 'sass:map';
@use '../../a11y';
@use '../../color';
@use '../../type';
@use '../../motion';
@use '../../spacing';
@use '../../util';
@use '../../properties' as props;

$color: color.family-swatch(
	'button-color',
	'color-primary',
	props.$props,
	color.$primary-grade,
);

$default-props: map.merge(
	$color,
	(
		'button-border-width': 1px,
		'button-padding-y': spacing.px-rem(8),
		'button-padding-x': spacing.px-rem(12),
		'button-border-radius': 0.125rem,
		'button-font-weight': util.prop(font-weight-bold),
		'button-transition': util.prop(duration-simple) util.prop(easing-standard),
	),
);

$props: () !default;
$props: map.merge($default-props, $props);

@mixin base {
	@include util.set-props($props);
	@include type.ui;

	position: relative;
	display: inline-flex;
	box-sizing: border-box;
	padding:
		util.padding(util.prop(button-padding-y), util.prop(button-border-width))
		util.padding(util.prop(button-padding-x), util.prop(button-border-width));
	border: util.prop(button-border-width) solid transparent;
	border-radius: util.prop(button-border-radius);
	justify-content: center;
	align-items: center;

	&::-moz-focus-inner {
		border: 0;
	}

	&:disabled,
	&.disabled {
		color: util.prop(color-disabled);
		pointer-events: none;
	}
}

@mixin variant(
	$text-color: null,
	$background-color: null,
	$border-color: null,
) {
	font-weight: util.prop(button-font-weight);
	color: $text-color;
	cursor: pointer;
	background-color: $background-color;
	border-color: $border-color;
	transition:
		motion.transition(
			util.prop(button-transition),
			color,
			background-color,
			border-color,
			box-shadow,
		);

	&:focus,
	.focus {
		@include a11y.focus-indicator;
	}

	&:-moz-focusring {
		box-shadow: none !important;
	}
}

@mixin solid {
	@include variant(
		$text-color: util.prop(color-body-bg),
		$background-color: util.prop(button-color),
		$border-color: util.prop(button-color),
	);

	&:disabled,
	&.disabled {
		color: util.prop(color-disabled-dark);
		background-color: util.prop(color-disabled-light);
		border-color: util.prop(color-disabled-light);
	}

	&:not(:disabled):not(.disabled):hover,
	&:not(:disabled):not(.disabled).hover {
		background-color: util.prop(button-color-dark);
		border-color: util.prop(button-color-dark);
	}

	&:not(:disabled):not(.disabled):active,
	&:not(:disabled):not(.disabled).active {
		background-color: util.prop(button-color-darker);
		border-color: util.prop(button-color-darker);
	}
}

@mixin outline {
	@include variant(
		$text-color: util.prop(button-color),
		$background-color: util.prop(color-body-bg),
		$border-color: util.prop(button-color),
	);

	&:disabled,
	&.disabled {
		color: util.prop(color-disabled);
		border-color: util.prop(color-disabled);
	}

	&:not(:disabled):not(.disabled):hover,
	&:not(:disabled):not(.disabled).hover {
		color: util.prop(button-color-dark);
		background-color: mix(#fff, #1a8082, 90%);
		border-color: util.prop(button-color-dark);
	}

	&:not(:disabled):not(.disabled):active,
	&:not(:disabled):not(.disabled).active {
		color: util.prop(button-color-darker);
		background-color: util.prop(button-color-20);
		border-color: util.prop(button-color-darker);
	}
}

@mixin ghost {
	@include variant(
		$text-color: util.prop(button-color),
		$background-color: transparent,
		$border-color: transparent,
	);

	&:disabled,
	&.disabled {
		color: util.prop(color-disabled);
	}

	&:not(:disabled):not(.disabled):hover,
	&:not(:disabled):not(.disabled).hover {
		color: util.prop(button-color-dark);
		background-color: util.prop(button-color-10);
		border-color: util.prop(button-color-10);
	}

	&:not(:disabled):not(.disabled):active,
	&:not(:disabled):not(.disabled).active {
		color: util.prop(button-color-darker);
		background-color: util.prop(button-color-20);
		border-color: util.prop(button-color-20);
	}
}

@mixin icon-only {
	padding: util.padding(util.prop(button-padding-y), util.prop(button-border-width));

	> :first-child {
		margin-right: 0 !important;
		margin-left: 0 !important;
	}
}

@mixin icon {
	height: 1.25rem;
	margin: 0 0.25rem;

	&:first-child {
		margin-left: -0.25rem;
	}

	&:last-child {
		margin-right: -0.25rem;
	}
}

@mixin style {
	.#{util.prefix('button')} {
		@include base;
	}

	.#{util.prefix('button--solid')} {
		@include solid;
	}

	.#{util.prefix('button--outline')} {
		@include outline;
	}

	.#{util.prefix('button--ghost')} {
		@include ghost;
	}

	.#{util.prefix('button--icon-only')} {
		@include icon-only;
	}

	.#{util.prefix('button__icon')} {
		@include icon;
	}

	@each $name, $value in color.$color-families {
		.#{util.prefix('button--#{$name}')} {
			@include util.set-props(color.family-swatch(
				'button-color',
				$name,
				color.$color-families,
				color.$primary-grade,
			));
		}
	}
}
