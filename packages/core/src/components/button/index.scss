@use 'sass:map';
@use '../../a11y';
@use '../../color';
@use '../../type';
@use '../../motion';
@use '../../spacing';
@use '../../util';
@use '../../properties' as *;

$default-props: (
	'button-color': color.family('button-color', 'primary', color.$primary-grade),
	'border-width': 1px,
	'padding-x': spacing.px-rem(12),
	'padding-y': spacing.px-rem(8),
	'border-radius': prop('radius-base'),
	'font-weight': prop('font-weight-bold'),
	'transition': prop('duration-simple') prop('easing-standard'),
);

$props: () !default;
$props: map.merge($default-props, $props);

@mixin base {
	@include set-props($props);
	@include type.ui;

	position: relative;
	display: inline-flex;
	box-sizing: border-box;
	padding: spacing.padding-y() spacing.padding-x();
	border: prop('border-width') solid transparent;
	border-radius: prop('border-radius');
	justify-content: center;
	align-items: center;

	&:disabled,
	&.disabled {
		color: prop('disabled');
		pointer-events: none;
	}
}

@mixin variant(
	$text-color: null,
	$background-color: null,
	$border-color: null,
) {
	font-weight: prop('font-weight');
	color: $text-color;
	cursor: pointer;
	background-color: $background-color;
	border-color: $border-color;
	transition:
		motion.transition(
			prop('transition'),
			color,
			background-color,
			border-color,
			border-radius,
			box-shadow,
		);
}

@mixin solid {
	@include variant(
		$text-color: prop('body-bg'),
		$background-color: prop('button-color'),
		$border-color: prop('button-color'),
	);

	&:disabled,
	&.disabled {
		color: prop('disabled-dark');
		background-color: prop('disabled-light');
		border-color: prop('disabled-light');
	}

	&:not(:disabled):not(.disabled):hover,
	&:not(:disabled):not(.disabled).hover {
		background-color: prop('button-color-dark');
		border-color: prop('button-color-dark');
	}

	&:not(:disabled):not(.disabled):active,
	&:not(:disabled):not(.disabled).active {
		background-color: prop('button-color-darker');
		border-color: prop('button-color-darker');
	}
}

@mixin outline {
	@include variant(
		$text-color: prop('button-color'),
		$background-color: prop('body-bg'),
		$border-color: prop('button-color'),
	);

	&:disabled,
	&.disabled {
		color: prop('disabled');
		border-color: prop('disabled');
	}

	&:not(:disabled):not(.disabled):hover,
	&:not(:disabled):not(.disabled).hover {
		color: prop('button-color-dark');
		background-color: prop('button-color-10');
		border-color: prop('button-color-dark');
	}

	&:not(:disabled):not(.disabled):active,
	&:not(:disabled):not(.disabled).active {
		color: prop('button-color-darker');
		background-color: prop('button-color-20');
		border-color: prop('button-color-darker');
	}
}

@mixin ghost {
	@include variant(
		$text-color: prop('button-color'),
		$background-color: transparent,
		$border-color: transparent,
	);

	&:disabled,
	&.disabled {
		color: prop('disabled');
	}

	&:not(:disabled):not(.disabled):hover,
	&:not(:disabled):not(.disabled).hover {
		color: prop('button-color-dark');
		background-color: prop('button-color-10');
		border-color: prop('button-color-10');
	}

	&:not(:disabled):not(.disabled):active,
	&:not(:disabled):not(.disabled).active {
		color: prop('button-color-darker');
		background-color: prop('button-color-20');
		border-color: prop('button-color-20');
	}
}

@mixin icon-only {
	padding: spacing.padding-y();

	> :first-child {
		margin-right: 0 !important;
		margin-left: 0 !important;
	}
}

@mixin icon {
	height: 1.25rem;
	margin: 0 0.25rem;

	&:first-child {
		margin-left: -0.25rem;
	}

	&:last-child {
		margin-right: -0.25rem;
	}
}

@mixin style {
	@include util.declare('button') {
		.#{util.prefix('button')} {
			@include base;
		}

		.#{util.prefix('button--solid')} {
			@include solid;
		}

		.#{util.prefix('button--outline')} {
			@include outline;
		}

		.#{util.prefix('button--ghost')} {
			@include ghost;
		}

		.#{util.prefix('button--icon-only')} {
			@include icon-only;
		}

		.#{util.prefix('button__icon')} {
			@include icon;
		}

		@each $name, $value in color.$families {
			.#{util.prefix('button--#{$name}')} {
				@include set-props(util.flatten((
					'button-color': color.family('button-color', $name),
				)));
			}
		}

		// .#{util.prefix('button--primary')} {
		// 	@include set-props(util.flatten((
		// 		\$color: color.family('button-color', 'primary'),
		// 	)));
		// }

		// .#{util.prefix('button--base')} {
		// 	@include set-props(util.flatten((
		// 		\$color: color.family('button-color', 'base'),
		// 	)));
		// }
	}
}
