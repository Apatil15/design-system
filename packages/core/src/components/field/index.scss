////
/// @group Field
////

@use '../../a11y';
@use '../../spacing';
@use '../../util';
@use '../../properties' as props;


// FIELD - the field container, which can contain field info, group(s), and feedback.

/// The base styling for all fields.
/// Default: `.field`
@mixin base {
	margin-bottom: props.prop('block-spacer-base');
	line-height: props.prop('line-height-sm');
}


// FIELD INFO - a container for the label & description

/// The field info container.
/// Default: `.field__info`
@mixin info {
	// margin-bottom: spacing.rem(0.25);
}

/// The field info's label, first child of the field info container.
/// Default: `.field__label`
@mixin label {
	margin-bottom: 0;
	font-size: props.prop('font-weight-base');
	font-weight: props.prop('font-weight-bold');

	.#{util.prefix('field__group--choice')} & {
		font-weight: props.prop('font-weight-regular');
	}

	+ .#{util.prefix('field__group--choice')} {
		margin-top: spacing.rem(0.5);
	}
}

/// The field label's indicator ("required"/"optional"), displayed inline as a
/// parenthetical to the field label.
/// Default: `.field__indicator`
@mixin indicator {
	font-style: italic;
	font-weight: props.prop('font-weight-regular');
}

/// The field description, second child of the field info container.
@mixin description {
	margin-bottom: spacing.rem(0.5);
	font-size: props.prop('font-size-sm');
	line-height: props.prop('line-height-sm');
	color: props.prop('text-muted');
}


// FIELD GROUP - a container for field controls

/// The field group container.
/// Default: `.field__group`
@mixin group {
	position: relative;
	display: flex;
	line-height: props.prop('line-height-sm');
}

/// A "choice" modifier for the field group container.
/// Default: `.field__group--choice`
@mixin group-choice {
	@include props.set(
		$padding-y: spacing.rem(0.25),
		$offset-x: spacing.rem(0.5),
	);

	display: flex;
	padding: props.prop('padding-y') 0;

	> * {
		margin-right: props.prop('offset-x');
	}

	> :last-child {
		margin-right: unset;
	}

	> .#{util.prefix('field__input')} {
		// make it invisible
		@include a11y.sr-only;

		// still position it in the center of the visual control so that form
		// validator tooltips will point at the right thing
		top: calc(#{props.prop('font-size-base')} * #{props.prop('line-height-sm')} / 2);
		left: calc(0.5em + 1px);
		transform: translateX(-50%);
	}

	.#{util.prefix('field__label')} {
		font-weight: props.prop('font-weight-regular');
	}

	.#{util.prefix('field__desc')} {
		margin-bottom: unset;
	}
}

/// The "choice" control (checkbox/radio) in a field group.
/// Note that this is a visual replacement the field's `<input>`, which will be
/// visually hidden (screen reader only) but still fully functional.
/// Default: `.field__control`
@mixin choice-control {
	@include props.set(
		$bg-color: props.prop('body-bg'),
		$border-color: props.prop('base'),
		$border-width: 2px,
		$offset-x: spacing.rem(0.5),
	);

	position: relative;
	top: calc(#{props.prop('font-size-base')} * #{props.prop('line-height-sm')} / 2);
	display: flex;
	width: 1em;
	height: 1em;
	margin-right: props.prop('offset-x');
	content: '';
	background-color: props.prop('bg-color');
	border: props.prop('border-width') solid props.prop('border-color');
	transition: none;
	transform: translateY(-50%);
	align-items: center;
	justify-content: center;

	:checked + & {
		@include props.set(
			$bg-color: props.prop('primary'),
		);

		border-color: transparent;
	}

	.disabled + &,
	:disabled + & {
		@include props.set(
			$bg-color: props.prop('disabled-10'),
			$border-color: props.prop('disabled-20'),
		);

		pointer-events: none;
		border-color: props.prop('border-color');
	}

	.disabled:checked + &,
	:disabled:checked + &, {
		@include props.set($bg-color: props.prop('disabled-20'));

		color: props.prop('body-bg');
		border-color: transparent;
	}

	.#{util.prefix('error')} &,
	[aria-invalid='true'] + & {
		@include props.set(
			$border-color: props.prop('error'),
		);
	}

	.#{util.prefix('error')} :checked + &,
	.#{util.prefix('error')} :indeterminate + & {
		@include props.set(
			$bg-color: props.prop('error'),
		);
	}

	.#{util.prefix('warning')} & {
		@include props.set(
			$border-color: props.prop('warning'),
		);
	}

	.#{util.prefix('warning')} :checked + &,
	.#{util.prefix('warning')} :indeterminate + & {
		@include props.set(
			$bg-color: props.prop('warning'),
		);
	}

	.#{util.prefix('success')} & {
		@include props.set(
			$border-color: props.prop('success'),
		);
	}

	.#{util.prefix('success')} :checked + &,
	.#{util.prefix('success')} :indeterminate + & {
		@include props.set(
			$bg-color: props.prop('success'),
		);
	}
}

/// Addons for field inputs inside a field group.
/// Default: `field__addon`
@mixin addon {
	display: flex;
	color: props.prop('body-bg');
	align-items: center;
	text-align: center;
	white-space: nowrap;
	border-radius: props.prop('radius-base');

	> * {
		border-top: 0;
		border-bottom: 0;
		border-radius: 0;
	}

	&:first-child {
		border-top-left-radius: props.prop('radius-base');
		border-bottom-left-radius: props.prop('radius-base');

		> * {
			border-left: 0;
			border-top-left-radius: props.prop('radius-base');
			border-bottom-left-radius: props.prop('radius-base');
		}
	}

	&:last-child > * {
		border-right: 0;
		border-top-right-radius: props.prop('radius-base');
		border-bottom-right-radius: props.prop('radius-base');
	}

	.#{util.prefix('field__group')} > & {
		border: props.prop('border-width') solid props.prop('border-color');
	}

	> .#{util.prefix('icon')} {
		padding: spacing.padding-y();
	}

	> .#{util.prefix('button--ghost')}:focus {
		background-color: props.prop('button-color-10');
		box-shadow: unset;
	}
}


// FEEDBACK - a container for errors and other feedback about user input

/// The field errors list, which should be an unordered list (`ul`).
/// Default: `.field__errors`
@mixin errors {
	padding-left: 1rem;
	margin: 0;
	font-size: props.prop('font-size-sm');
	font-style: italic;
	font-weight: props.prop('font-weight-bold');
	color: props.prop('error');

	// when an error is alone, don't display it as a bullet
	:first-child:last-child {
		margin-left: -1rem;
		list-style-type: none;
	}
}


// STYLE DECLARATIONS

/// Field info style declaration
@mixin style-info {
	@include util.declare('field-info') {
		.#{util.prefix('field__info')} {
			@include info;
		}

		.#{util.prefix('field__label')} {
			@include label;
		}

		.#{util.prefix('field__indicator')} {
			@include indicator;
		}

		.#{util.prefix('field__desc')} {
			@include description;
		}
	}
}

// Field group style declaration
@mixin style-group {
	@include util.declare('field-group') {
		.#{util.prefix('field__group')} {
			@include group;
		}

		.#{util.prefix('field__group--choice')} {
			@include group-choice;
		}

		.#{util.prefix('field__control')} {
			@include choice-control;
		}
	}

	@include util.declare('field-addon') {
		.#{util.prefix('field__addon')} {
			@include addon;
		}
	}
}

/// Field feedback style declaration
@mixin style-feedback {
	@include util.declare('field-feedback') {
		.#{util.prefix('field__errors')} {
			@include errors;
		}
	}
}

@mixin style {
	@include style-info;
	@include style-feedback;
	@include style-group;

	@include util.declare('field') {
		.#{util.prefix('field')} {
			@include base;
		}
	}
}
