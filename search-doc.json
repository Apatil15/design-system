[{"title":"Welcome","type":0,"sectionRef":"#","url":"blog/welcome","content":"Welcome to the Norton Design System blog! Keep an eye out here for a deeper look at some of the systems, components, and design decisions that might not make as much sense in the reference documentation. That's all for now.","keywords":""},{"title":"Accessibility","type":0,"sectionRef":"#","url":"docs/accessibility","content":"Work in progress This page is incomplete and may see significant changes. Please submit feedback on GitHubif you would like to contribute.","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/","content":"","keywords":""},{"title":"Tools","type":1,"pageTitle":"Introduction","url":"docs/#tools","content":"The design system combines equal parts design thinkingand systems thinking to create tools and frameworks to help you build web applications and content. These tools include: A predefined set of shared design properties captured as technology-agnosticdesign tokens.A modern CSS framework that contains an implementation of the design tokens, component styling, and utilities to help you build your application.A React component library that is loosely coupledto the CSS framework. "},{"title":"Accordion","type":0,"sectionRef":"#","url":"docs/components/accordion","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Accordion","url":"docs/components/accordion#anatomy","content":"An accordion includes two or more vertically stacked disclosures. "},{"title":"Usage","type":1,"pageTitle":"Accordion","url":"docs/components/accordion#usage","content":"Use an accordion to allow users to expand/collapse related sections of content.Down Arrow/Up Arrow moves focus to the next/previous section summaries, respectively.Home and End move focus to the first/last section summaries, respectively. Dos Do use accordions if users only need to see specific section(s) of content on the page.Do ensure that the entire section summary (label and icon) is clickable. Don'ts Don’t display all disclosures within an accordion in an expanded state by default. Caution Use an accordion if users might need to view more than one section at a time.If users are likely to want all sections open most of the time, consider using standard document structure (headings and paragraphs) instead.If users only need to view one section at a time, consider using tabs. "},{"title":"Color","type":0,"sectionRef":"#","url":"docs/color","content":"","keywords":""},{"title":"Accessibility","type":1,"pageTitle":"Color","url":"docs/color#accessibility","content":"The Norton color system is built to ensure consistent color contrast across all color families. To accomplish this, grades are normalized across color families to have a similar level of color contrast against black or white. Grades of 60 and higher will always meet the minimum color contrast ratio for WCAG AAwhen used with pure white (#fff). Conversely, grades of 50 and lower will always meet WCAG AA requirements against pure black (#000). "},{"title":"Full Family List","type":1,"pageTitle":"Color","url":"docs/color#full-family-list","content":"The following contains every color in the Norton color system. Token names (teal-60), values (#1a8082), and the maximum level of WCAG conformance against black and white are listed on the color swatch. In CSS, these will be available as design tokens via CSS custom properties prefixed with nds- (e.g., --nds-teal-60). View fullscreen red-10 red-20 red-30 red-40 red-50 red-60 red-70 red-80 red-90 red-100 yellow-10 yellow-20 yellow-30 yellow-40 yellow-50 yellow-60 yellow-70 yellow-80 yellow-90 yellow-100 green-10 green-20 green-30 green-40 green-50 green-60 green-70 green-80 green-90 green-100 teal-10 teal-20 teal-30 teal-40 teal-50 teal-60 teal-70 teal-80 teal-90 teal-100 cyan-10 cyan-20 cyan-30 cyan-40 cyan-50 cyan-60 cyan-70 cyan-80 cyan-90 cyan-100 blue-10 blue-20 blue-30 blue-40 blue-50 blue-60 blue-70 blue-80 blue-90 blue-100 purple-10 purple-20 purple-30 purple-40 purple-50 purple-60 purple-70 purple-80 purple-90 purple-100 navy-10 navy-20 navy-30 navy-40 navy-50 navy-60 navy-70 navy-80 navy-90 navy-100 gray-10 gray-20 gray-30 gray-40 gray-50 gray-60 gray-70 gray-80 gray-90 gray-100 "},{"title":"Button","type":0,"sectionRef":"#","url":"docs/components/button","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Button","url":"docs/components/button#anatomy","content":"The labelOptional An icon "},{"title":"Playground","type":1,"pageTitle":"Button","url":"docs/components/button#playground","content":"Live Editor <Button variant=\"solid\">Solid</Button> <Button variant=\"solid\">Solid</Button> Result Solid Live Editor <IconButton icon=\"info\">More information</IconButton> <IconButton icon=\"info\">More information</IconButton> Result "},{"title":"Props","type":1,"pageTitle":"Button","url":"docs/components/button#props","content":"Name\tDescription\tType children (required) Button children are required because they are used to provide an accessible label for the button. When rendering with iconOnly, the children will be rendered as an accessible Tooltip that labels the button. ReactNode variant Button variant conveys the button's level of visual emphasis.\t\"solid\" | \"outline\" | \"ghost\" icon An icon to include in the button.\t\"list\" | \"search\" | \"menu\" | \"account\" | \"arrow-up\" | \"arrow-right\" | \"arrow-down\" | \"arrow-left\" | \"calendar\" | \"cancel\" | \"caret-up\" | \"caret-down\" | \"caret-right\" | \"caret-left\" | ... 30 more ... iconRight Indicates whether the icon should be to the right of the text. By default, the icon is to the left of the text. boolean iconOnly Indicates whether the button's contents should only be the icon. Whentrue, the button's text is still required but will be used as the icon'saria-label. If no icon is specified, this prop has no effect. boolean buttonRef A reference to the inner <button> element.\t((instance: HTMLButtonElement | null) => void) | RefObject<HTMLButtonElement> | null baseName The base class name according to BEM conventions.\tstring iconClass The className for the Button's icon, if one exists.\tstring textClass The className for the Button's text, which will be placed in a <span>\tstring tooltipProps Tooltip props that should be included when the button's children are rendered as a tooltip. Pick<TooltipProps, TooltipPicks> active Whether the button is currently depressed. Polyfill for :active on keydown.\tboolean activeClass A class to convey :active.\tstring "},{"title":"Usage","type":1,"pageTitle":"Button","url":"docs/components/button#usage","content":"A button is a standalone call-to-action with space or visual emphasis around it.A button has a meaningful label that communicates the action that users can take.Space (keyup) and Enter (keydown) activates the button. Dos Do indicate the most important action on a page or region with a high-emphasis Primary button.Do indicate less important actions with medium-emphasis Secondary buttons or low-emphasis Tertiary buttons. Don'ts Don't wrap text inside a button.Don't use labels that are too long. A button's label should be very concise.Don't choose default button colors that could be confused with disabled buttons.Don't create links that look like buttons. If dictation software users say \"show buttons\", the actions will not be listed. Keyboard users may try to press Space to activate, which will do nothing. "},{"title":"Buttons vs. links","type":1,"pageTitle":"Button","url":"docs/components/button#buttons-vs-links","content":"Links are similar to buttons but the two are not interchangeable. The following should help differentiate when a link may be a better fit for your control. Consider using links if... You are navigating to another place, either on the same page or on a different page.The action will change the URL.It would be useful to \"Copy\", \"Open in a new tab\", or \"Bookmark\" the destination URL.The label is embedded in a sentence, and does not need margins or padding.The label conveys location, not an action (for example: a link that references a resource).Only Enter (keydown) should activate the link. Links always move focus when activated. Use a button if the component is styled like a button. (See Don't create links that look like buttons, above).If a button navigates the user to a new page or section, it might not meet the user's expectations.A button will not record the navigation in the user's browser history, so they will not be able to return to the previous location using their browser's back button.Consider the overall navigation of the site. Links help define the structure, architecture and hierarchy of the site—buttons don't. "},{"title":"Checkbox","type":0,"sectionRef":"#","url":"docs/components/checkbox","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#anatomy","content":"A single checkbox includes: A checkbox controlA labelOptional A description "},{"title":"Playground","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#playground","content":"Live Editor <Checkbox description=\"Additional information about this checkbox.\" required requiredIndicator > Checkbox </Checkbox> <Checkbox description=\"Additional information about this checkbox.\" required requiredIndicator > Checkbox </Checkbox> Result Checkbox (required) Additional information about this checkbox. Use indeterminate to set a checkbox in its indeterminate state. Live Editor <Checkbox description=\"This checkbox starts out in the indeterminate/mixed state.\" indeterminate > Indeterminate </Checkbox> <Checkbox description=\"This checkbox starts out in the indeterminate/mixed state.\" indeterminate > Indeterminate </Checkbox> Result Indeterminate This checkbox starts out in the indeterminate/mixed state. "},{"title":"Props","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#props","content":"Name\tDescription\tType description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a <label> if htmlForis included and a <div> otherwise. string descriptionClass A className for the description <div>.\tstring labelId An id for the label element.\tstring descriptionId An id for the description <div>.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. string[] validators A list of validators. A validator contains a function that tests the value for validity and a corresponding message that conveys why the test failed. ValidatorEntry[] validateOnDOMChange Indicates that validation should occur when the DOM's change event is triggered. Note that this event is different from React's onChangecallback, which triggers on the DOM's input event. Reference: - MDN - change event boolean validateOnChange Indicates that validation should occur when onChange is triggered. Alias of validateOnInput. boolean onDOMChange A callback that will be triggered any time the DOM's change event is triggered. Note that this event is different from React's onChangeevent, which triggers on the DOM's input event. Reference: - MDN - change event- MDN - input event ((e: Event) => void) onValidate A callback that will be triggered any time the input is validated. See related validators, validateOnChange, and validateOnChange. ((errors: string[]) => void) indeterminate Mark the checkbox as indeterminate. Has no effect when type=\"radio\". Reference: - DOM - indeterminate- MDN - indeterminate boolean requiredIndicator Indicates that the indicator should be \"required\" when required=true.\tboolean optionalIndicator Indicates that the indicator should be \"optional\" when required=false.\tboolean thumbnail The thumbnail element.\tReactNode baseName The base class name according to BEM conventions.\tstring controlClass The className for the control that sighted users will see.\tstring inputClass The className for the Checkbox's <input> element.\tstring thumbnailClass The className for the Checkbox's thumbnail element.\tstring checkedClass A className that will be applied to the root of the component when it is checked. string errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring "},{"title":"Usage","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#usage","content":"A single checkbox has two mutually exclusive states: selected or not selected.Space changes the state of the checkbox.Use a group of checkboxes to allow a user to select zero, one or multiple options from a list, and display all available options.Checkboxes may allow users to sub-select options from a nested list (see tri-state checkboxes).Checkboxes work independently of other checkboxes, unless they are controlled by a tri-state checkbox. Dos Do allow users to select an option by clicking the checkbox or its label.Do position the checkbox to the left of its label.Do separate groups of checkboxes with group labels.Do display options in a vertical layout for easier scanning.Do define a label for the checkbox, even if it is not visible (example: when selecting a row in a table). Don'ts Don’t use checkboxes if only one item can be selected from a list. Use radio buttons or a dropdown instead.Don’t use a checkbox if an action will take immediate effect when the user selects or deselects it. Add a Submit button to confirm, or use a toggle instead.Don’t use negative statements for a checkbox, because taking action to select it is confusing and counter-intuitive. (example: “I don’t want to receive email…”) Avoid setting default options, because pre-selecting an option makes it more likely that users will not make a conscious choice and submit an option unintentionally.Consider the most logical order to list options. Options may be listed alphabetically, by popularity, or some other ordered system that should be clear to the user. "},{"title":"Types","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#types","content":""},{"title":"Dual-state Checkbox","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#dual-state-checkbox","content":"A single checkbox is a dual-state checkbox.A dual-state checkbox allows a user to switch between two states: checked and not checked. "},{"title":"Tri-state Checkbox","type":1,"pageTitle":"Checkbox","url":"docs/components/checkbox#tri-state-checkbox","content":"A tri-state checkbox supports three states: checked, not checked, and indeterminate (partially checked).A tri-state checkbox is used to represent and control the state of a group of options. Each option in the group can also be individually checked or unchecked with a dual state checkbox. If all options in the group are checked, the tri-state checkbox displays as checked.If some of the options in the group are checked, the tri-state checkbox displays as indeterminate (partially checked).If none of the options in the group are checked, the tri-state checkbox displays as not checked.If a user checks a tri-state checkbox, then all the options in the group are checked.If a user unchecks a tri-state checkbox, then all the options in the group are unchecked. "},{"title":"Disclosure","type":0,"sectionRef":"#","url":"docs/components/disclosure","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Disclosure","url":"docs/components/disclosure#anatomy","content":"A disclosure includes: An expandable button with A text labelAn iconContent "},{"title":"Playground","type":1,"pageTitle":"Disclosure","url":"docs/components/disclosure#playground","content":"Live Editor <Disclosure panel summary=\"Default disclosure\"> Lorem ipsum dolor sit amet consectetur adipisicing elit. </Disclosure> <Disclosure panel summary=\"Default disclosure\"> Lorem ipsum dolor sit amet consectetur adipisicing elit. </Disclosure> Result Default disclosure "},{"title":"Props","type":1,"pageTitle":"Disclosure","url":"docs/components/disclosure#props","content":"Name\tDescription\tType summary (required) The content for the summary element generated by the disclosure component.\tstring marker The marker icon that indicates the disclosure's current state. Similar to theCSS ::marker. The default is caret-right. When panel is true, the default ischevron-down. \"list\" | \"search\" | \"menu\" | \"account\" | \"arrow-up\" | \"arrow-right\" | \"arrow-down\" | \"arrow-left\" | \"calendar\" | \"cancel\" | \"caret-up\" | \"caret-down\" | \"caret-right\" | \"caret-left\" | ... 32 more ... markerPosition The position of the marker. right when panel={true} and left otherwise.\t\"left\" | \"right\" | ((panel?: boolean) => \"left\" | \"right\" | null) | null | undefined isOpen Used to set the initial open state or fully control it.\tboolean panel Indicates that the disclosure should be in \"panel\" mode, which has a few effects: The default marker will be chevron-downThe default markerPosition will be rightThe disclosure will be given the nds-disclosure--panel modifier class boolean reducedMotion Indicates that animations should be disabled.\tboolean baseName The base className according to BEM conventions.\tstring summaryClass The className that will be applied to the <summary>.\tstring contentsOuterClass The className for the outer contents <div>.\tstring contentsInnerClass The className that will be applied to the inner contents <div>.\tstring markerClass The className that will be applied to the summary's icon indicator, which takes the place of the native summary::marker pseudo element. string onCloseStart Lifecycle method that is triggered when the disclosure begins to close. Returning false will prevent the disclosure from beginning to close. LifecycleCallback onCloseCancel Lifecycle method that is triggered when the user clicks on the disclosure as it's closing. Returning false will cause the disclosure to continue closing. LifecycleCallback onCloseEnd Lifecycle method that is triggered when the disclosure has finished closing.\tLifecycleCallback onOpenStart Lifecycle method that is triggered when the disclosure begins to open. Returning false will prevent the disclosure from beginning to open. LifecycleCallback onOpenCancel Lifecycle method that is triggered when the user clicks on the disclosure as it's opening. Returning false will cause the disclosure to continue opening. LifecycleCallback onOpenEnd Lifecycle method that is triggered when the disclosure has finished opening.\tLifecycleCallback "},{"title":"Usage","type":1,"pageTitle":"Disclosure","url":"docs/components/disclosure#usage","content":"A disclosure has two states: collapsed and expanded. A disclosure is collapsed by default.A disclosure should include an icon that conveys that it can be activated for more information.A disclosure’s label should clearly and succinctly describe its hidden content, so that the user can choose to expand it.When a disclosure has focus, Enter and Space activate the disclosure and toggle the visibility of content.All focusable elements inside a disclosure are included in the tab order, if the disclosure is expanded. Dos Do use a disclosure to make the page easier to scan, and hide lower-priority information that only some users will need.Do ensure that the entire expandable button (label and icon) is clickable.Do display the expanded content directly after the expandable button. Don'ts Don’t use a disclosure if most or all users need to see the content. When content is hidden, users may ignore that information.Don’t display a disabled disclosure if there is no content to reveal. Instead, do not display the disclosure at all, or include a message explaining why there is no content when the user activates it.Don’t use an icon that has multiple meanings within the same system. Notes If there is only one section of content, then use a disclosure.If there are multiple sections of content, then use an accordion or tabs. "},{"title":"Layout Grid","type":0,"sectionRef":"#","url":"docs/components/layout-grid","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Layout Grid","url":"docs/components/layout-grid#anatomy","content":"A Layout Grid includes: ColumnsGuttersMarginsBreakpoint Ranges "},{"title":"Usage","type":1,"pageTitle":"Layout Grid","url":"docs/components/layout-grid#usage","content":"Columns set the widths of page regions and align content to consistent guides. All columns are of equal width.Gutters are the spaces between columns that help separate content. All gutters are of equal width.Margins are the spaces between the content and the left/right edges of the screen. Left and right margins should be the same width.Margins can be adjusted to ensure appropriate line length at each breakpoint range. Gutters and margins can be different widths.A Breakpoint Range is a range of screen sizes that have the same layout. At each breakpoint, the layout may adjust to better fit the screen size.The number of columns and the width of the margins and gutters is determined by each breakpoint range. ::: tip Dos Do align major content areas or regions of the page to the layout grid.Do design layouts for the smallest screen sizes first.Do set a maximum width for the layout grid or content areas within the grid, to avoid long line lengths. ::: Don'ts Don’t set margins so large that there isn’t enough room for content.Don’t include fixed-width sidebars in the layout grid.Don’t visually reorder columns independently from their position in the markup. Copy ## Types ### Fluid Grid - By default, use a fluid grid so that content areas flexibly scale to fit any screen width. - Column widths are set as percentages of the overall screen width. - Margins and gutters have a fixed width at each breakpoint range. ### Fixed Grid - Use a fixed grid if it is important for the width of the content area to be static within a breakpoint range. - Gutters and column widths have a fixed width at each breakpoint range, so the content only changes at each breakpoint. - Margins scale fluidly as the overall screen width changes. "},{"title":"Dropdown","type":0,"sectionRef":"#","url":"docs/components/dropdown","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Dropdown","url":"docs/components/dropdown#anatomy","content":"A dropdown includes: A Text LabelA Selected Option Area + IconA List of OptionsDefault Text (\"Select\") "},{"title":"Playground","type":1,"pageTitle":"Dropdown","url":"docs/components/dropdown#playground","content":"Live Editor <Dropdown label=\"Choose a sitcom\" sort=\"ascending\" > <Dropdown.Option>The Office</Dropdown.Option> <Dropdown.Option>Community</Dropdown.Option> <Dropdown.Option>Friends</Dropdown.Option> <Dropdown.Option>Parks and Recreation</Dropdown.Option> <Dropdown.Option>How I Met Your Mother</Dropdown.Option> <Dropdown.Option>Modern Family</Dropdown.Option> <Dropdown.Option>The Big Bang Theory</Dropdown.Option> <Dropdown.Option>Arrested Development</Dropdown.Option> </Dropdown> <Dropdown label=\"Choose a sitcom\" sort=\"ascending\" > <Dropdown.Option>The Office</Dropdown.Option> <Dropdown.Option>Community</Dropdown.Option> <Dropdown.Option>Friends</Dropdown.Option> <Dropdown.Option>Parks and Recreation</Dropdown.Option> <Dropdown.Option>How I Met Your Mother</Dropdown.Option> <Dropdown.Option>Modern Family</Dropdown.Option> <Dropdown.Option>The Big Bang Theory</Dropdown.Option> <Dropdown.Option>Arrested Development</Dropdown.Option> </Dropdown> Result Choose a sitcom Select "},{"title":"Props","type":1,"pageTitle":"Dropdown","url":"docs/components/dropdown#props","content":"Name\tDescription\tType label (required) The name of the dropdown. Required.\tReactNode children The options for the listbox. Each will be rendered inside a BaseOptioncomponent. When specifying an option as a BaseOptionProps object, the option's value must be the BaseOptionProps['children']. ReactChild[] | (ReactChild[] & string) | (ReactChild[] & number) | (ReactChild[] & false) | (ReactChild[] & true) | (ReactChild[] & ReactElement<...>) | (ReactChild[] & ReactNodeArray) | (ReactChild[] & ReactPortal) sort Sort options by value. undefined will leave the options unsorted.\t\"ascending\" | \"descending\" selected A list of selected options.\tstring | number buttonContents The contents of the button. Default is 'Select' on load and then it will match the contents of the currently selected option if no onChangecallback is provided. ReactNode isOpen Indicates whether the listbox is open.\tboolean closeOnExternalClick Indicates whether clicking outside the listbox should close the listbox.\tboolean closeOnDocumentEscape Indicates whether the dropdown should be closed on Escape.\tboolean matchWidth Indicates that the button and listbox should match widths. * button - the listbox will match the width of the button. * listbox - the button will match the width of the listbox. * undefined - not width matching should be done. \"listbox\" | \"button\" buttonWidth Set the width of the button. Use when matchWidth=\"button\" and the button's width is not set with CSS. string | number name The name attribute for the internal <select>.\tstring baseName The base class name according to BEM conventions. Default is \"dropdown\".\tstring labelClass The class name for the label.\tstring buttonClass The class name for the button.\tstring listboxClass The class name for the listbox.\tstring optionClass The class name for all listbox options.\tstring buttonId An id for the button.\tstring listboxId An id for the listbox.\tstring onRequestClose Callback function that is called when the dropdown attempts to close its listbox. This will occur under the following conditions: * The user clicks outside of the listbox and closeOnExternalClick istrue. * The user presses Escape and closeOnDocumentEscape is true. * The user presses Tab while the listbox is open. (() => void) onRequestOpen Callback function that is called when the dropdown attempts to open its listbox. This will occur under the following conditions: * The user clicks the dropdown button (default: .dropdown__button). * The user presses ArrowUp or ArrowDown while on the dropdown button. (() => void) onChange Callback function that is called when an option is selected. This will occur under the following conditions: * When the user clicks an option. * When the user presses Enter on the currently focused option. * When the user releases the space bar on the currently focused option. (({ value, contents }: OnChangeData) => void) description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode descriptionClass A className for the description <div>.\tstring labelId An id for the label element.\tstring descriptionId An id for the description <div>.\tstring placement \"left\" | \"right\" | \"auto\" | \"auto-start\" | \"auto-end\" | \"top\" | \"bottom\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\" modifiers Partial<Modifier<any, any>>[] strategy \"absolute\" | \"fixed\" onFirstUpdate ((arg0: Partial<State>) => void) "},{"title":"Usage","type":1,"pageTitle":"Dropdown","url":"docs/components/dropdown#usage","content":"Use a dropdown to select one option from a collapsed set of available options.By default, dropdown options are mutually exclusive. The user can only select 1 option.When an option is selected, the dropdown closes and the selected option updates to display that item.On load, the dropdown should display default text of \"Select\". The user should be able to change it back to \"Select\" if they wish.Down Arrow/Up Arrow moves focus to the next/previous options, respectively.Home and End moves focus to the first/last options, respectively. Dos Do keep dropdown options very concise. If long options are unavoidable, then they can truncate when the dropdown is in a closed state, but they should wrap fully in the open state. Do ensure that the clickable area includes the entire selected option area and the icon.Consider the most logical order to list options. Options could be listed alphabetically, chronologically, by popularity, etc. Don'ts Do not start all of the options in a dropdown with the same word or phrase.If there are more than 6 options, consider using a combo box instead.If there are 2 options, consider using radio buttons or switch instead. If your interface needs to contain many of these selections, use dropdowns over radio buttons. Do not use a dropdown when the user can multi-select options. Use checkboxes instead.If it is not absolutely necessary for a user to choose from a predefined set of options, then consider a text field for users to type their own information. "},{"title":"Link","type":0,"sectionRef":"#","url":"docs/components/link","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Link","url":"docs/components/link#anatomy","content":"A link includes: Text ContentA Destination/URL "},{"title":"Usage","type":1,"pageTitle":"Link","url":"docs/components/link#usage","content":"A link navigates the user to another place on the same page or to a different page.A link helps define the structure, architecture and hierarchy of the site.A link allows the user to return to the previous location by pressing the browser's back button.Activating the link changes the URL.A link's href value must be a valid URL or URL fragment.Enter (keydown) activates the link. Links always move focus when activated. Dos Do use a link when… It would be useful to \"Copy\", \"Open in a new tab\", or \"Bookmark\" the destination URL.The text content is embedded in a sentence, and does not need margins or padding.The text content conveys location, not an action (for example: a link that references a resource).You want to record the navigation in the user's browser history. Do style links so that they are visually different from plain text, and indicate that they can be clicked. Don'ts Don't create links that look like buttons. If dictation software users say \"show buttons\", the actions will not be listed. Keyboard users may try to press Space to activate, which will do nothing.Don’t use an ambiguous label like “click here”. The link’s text content should clearly describe its destination or purpose.Don’t include the full stop if a link is at the end of a sentence or paragraph.Don’t use Javascript to simulate links. Use a valid href instead. Consider using Buttons if… The component is styled like a button. (See Don't create links that look like buttons, above).The label communicates an action that the user can take.If the action taken will change or manipulate data on the page. "},{"title":"Radio Buttons","type":0,"sectionRef":"#","url":"docs/components/radio-buttons","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Radio Buttons","url":"docs/components/radio-buttons#anatomy","content":"A group of radio buttons includes: A Group LabelTwo or more Radio Button Controls and their Labels "},{"title":"Playground","type":1,"pageTitle":"Radio Buttons","url":"docs/components/radio-buttons#playground","content":"Live Editor <RadioGroup label=\"Select your native fruit\"> <Radio>Apple</Radio> <Radio>Cherry</Radio> <Radio>Orange</Radio> <Radio>Peach</Radio> <Radio>Pear</Radio> </RadioGroup> <RadioGroup label=\"Select your native fruit\"> <Radio>Apple</Radio> <Radio>Cherry</Radio> <Radio>Orange</Radio> <Radio>Peach</Radio> <Radio>Pear</Radio> </RadioGroup> Result Select your native fruit Apple Cherry Orange Peach Pear "},{"title":"Props - RadioGroup","type":1,"pageTitle":"Radio Buttons","url":"docs/components/radio-buttons#props---radiogroup","content":"Name\tDescription\tType label (required) ReactNode description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a <label> if htmlForis included and a <div> otherwise. string descriptionClass A className for the description <div>.\tstring labelId An id for the label element.\tstring descriptionId An id for the description <div>.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. string[] name string required boolean requiredIndicator Indicates that the indicator should be \"required\" when required=true.\tboolean optionalIndicator Indicates that the indicator should be \"optional\" when required=false.\tboolean baseName string errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring choiceClass string "},{"title":"Props - Radio","type":1,"pageTitle":"Radio Buttons","url":"docs/components/radio-buttons#props---radio","content":"Name\tDescription\tType description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a <label> if htmlForis included and a <div> otherwise. string descriptionClass A className for the description <div>.\tstring labelId An id for the label element.\tstring descriptionId An id for the description <div>.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. string[] validators A list of validators. A validator contains a function that tests the value for validity and a corresponding message that conveys why the test failed. ValidatorEntry[] validateOnDOMChange Indicates that validation should occur when the DOM's change event is triggered. Note that this event is different from React's onChangecallback, which triggers on the DOM's input event. Reference: - MDN - change event boolean validateOnChange Indicates that validation should occur when onChange is triggered. Alias of validateOnInput. boolean onDOMChange A callback that will be triggered any time the DOM's change event is triggered. Note that this event is different from React's onChangeevent, which triggers on the DOM's input event. Reference: - MDN - change event- MDN - input event ((e: Event) => void) onValidate A callback that will be triggered any time the input is validated. See related validators, validateOnChange, and validateOnChange. ((errors: string[]) => void) indeterminate Mark the checkbox as indeterminate. Has no effect when type=\"radio\". Reference: - DOM - indeterminate- MDN - indeterminate boolean requiredIndicator Indicates that the indicator should be \"required\" when required=true.\tboolean optionalIndicator Indicates that the indicator should be \"optional\" when required=false.\tboolean thumbnail The thumbnail element.\tReactNode baseName The base class name according to BEM conventions.\tstring controlClass The className for the control that sighted users will see.\tstring inputClass The className for the Checkbox's <input> element.\tstring thumbnailClass The className for the Checkbox's thumbnail element.\tstring checkedClass A className that will be applied to the root of the component when it is checked. string errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring "},{"title":"Usage","type":1,"pageTitle":"Radio Buttons","url":"docs/components/radio-buttons#usage","content":"Use radio buttons to allow a user to select exactly one Radio from a set of options, and display all available options.Radio buttons should have between 2-5 options. If you have more than 5 options, use a dropdown or combo box. The options in a group of radio buttons must be mutually exclusive. The user can only select 1 Radio.Only use radio buttons when the field is required. If all radio buttons are in an unselected state on load, a user must select one of the radio buttons before proceeding.Arrow keys move focus within the group, uncheck the previously focused button, and check the newly focused button.Space selects the focused radio button if it is not already selected. Dos Do allow users to select an Radio by clicking the radio button or its text label.Do position the radio button to the left of its label.Do display options in a vertical layout, by default, for easier scanning.Consider the most logical order to display options, such as alphabetical, chronological or by popularity. Don'ts Don’t use radio buttons if a user could select multiple options. Use checkboxes instead.Don't use radio buttons if a user could select NO Radio. Use checkboxes instead.Don’t use radio buttons if an action will take immediate effect when the user selects or deselects it. Use a switch if there are two opposite options (example: YES/NO, ON/OFF).Otherwise, use a group of regular buttons. "},{"title":"Switch","type":0,"sectionRef":"#","url":"docs/components/switch","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Switch","url":"docs/components/switch#anatomy","content":" LabelDescription optionalControl "},{"title":"Playground","type":1,"pageTitle":"Switch","url":"docs/components/switch#playground","content":"Live Editor <Switch label=\"Switch\" /> <Switch label=\"Switch\" /> Result Switch OFF "},{"title":"Props","type":1,"pageTitle":"Switch","url":"docs/components/switch#props","content":"Name\tDescription\tType label (required) The name of the Switch. Required.\tReactNode children Children are set inside the Switch control. Default is 'ON' when checkedand OFF when unchecked. Disable default with displayDefault={false}. ReactNode tipped Indicates that the label should be rendered as a tooltip.\tboolean checked The switch's initial \"on\" state.\tboolean onToggle A function to call when the switch is toggled.\t((checked: boolean) => void) displayDefault Indicates whether the default control text should be used when no children are provided. \"ON\" when checked=true and \"OFF\" when checked=false. boolean baseName The base class name according to BEM conventions.\tstring tooltipProps Tooltip props that should be included when the switch's label is rendered as a tooltip. Pick<TooltipProps, TooltipPicks> description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a <label> if htmlForis included and a <div> otherwise. string descriptionClass A className for the description <div>.\tstring labelId An id for the label element.\tstring descriptionId An id for the description <div>.\tstring variant Button variant conveys the button's level of visual emphasis.\t\"solid\" | \"outline\" | \"ghost\" icon An icon to include in the button.\t\"list\" | \"search\" | \"menu\" | \"account\" | \"arrow-up\" | \"arrow-right\" | \"arrow-down\" | \"arrow-left\" | \"calendar\" | \"cancel\" | \"caret-up\" | \"caret-down\" | \"caret-right\" | \"caret-left\" | ... 30 more ... iconRight Indicates whether the icon should be to the right of the text. By default, the icon is to the left of the text. boolean iconOnly Indicates whether the button's contents should only be the icon. Whentrue, the button's text is still required but will be used as the icon'saria-label. If no icon is specified, this prop has no effect. boolean buttonRef A reference to the inner <button> element.\t((instance: HTMLButtonElement | null) => void) | RefObject<HTMLButtonElement> | null iconClass The className for the Button's icon, if one exists.\tstring textClass The className for the Button's text, which will be placed in a <span>\tstring active Whether the button is currently depressed. Polyfill for :active on keydown.\tboolean activeClass A class to convey :active.\tstring "},{"title":"Usage","type":1,"pageTitle":"Switch","url":"docs/components/switch#usage","content":"When a user toggles a switch, its corresponding action takes effect right away.A switch has two mutually exclusive states—on and off. Dos Do use a switch to mimic a physical on/off switch in the interface.Do allow users to select the switch by clicking the control or its text label.Do position the switch to the left of its text label by default. Don'ts Don’t use the words \"on/off\" in the switch’s text label. The option that the switch controls should be clear from its label. A tooltip/title attribute may be added to convey the on/off state.Don’t use a switch if the option is part of a larger flow, with a final confirmation step or Submit button. Use a checkbox instead.Don’t use a switch if users can select multiple options from a list. Use checkboxes instead. "},{"title":"Tooltip","type":0,"sectionRef":"#","url":"docs/components/tooltip","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#anatomy","content":"Contents - the contents of the tooltip can only be simple text.Arrow - the arrow points to the element that the tooltip references. "},{"title":"Playground","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#playground","content":"Live Editor function ButtonWithTooltip() { const [button, setButton] = React.useState(null); return ( <div style={{ margin: '2rem 0' }}> <Button variant=\"solid\" ref={setButton}>I'm a reference element</Button> <Tooltip isOpen placement=\"top\" reference={button} > I'm a tooltip! </Tooltip> </div> ); } function ButtonWithTooltip() { const [button, setButton] = React.useState(null); return ( <div style={{ margin: '2rem 0' }}> <Button variant=\"solid\" ref={setButton}>I'm a reference element</Button> <Tooltip isOpen placement=\"top\" reference={button} > I'm a tooltip! </Tooltip> </div> ); } Result I'm a reference element I'm a tooltip! "},{"title":"Props","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#props","content":"Name\tDescription\tType baseName The base class name according to BEM conventions.\tstring contentClass A className to apply to the content. Default will be ${baseName}__content.\tstring arrowClass A className to apply to the arrow. Default will be ${baseName}__arrow.\tstring asLabel Indicates that the tooltip is labelling the reference. If false, the tooltip will be used as description. Reference: - ARIA Practices - Providing Accessible Names and Descriptions boolean trigger A string of space-separated triggers. Options include click, focus,focusin, mouseenter, pointerenter, and manual. When manual is included anywhere in the string, the tooltip's visibility must be controlled via isOpen. Default is \"focus pointerenter\". string hideDelay The time in milliseconds before the tooltip should disappear. Use this to ensure that users can move their cursor from the reference to the tooltip without it disappearing. number isOpen Indicates whether the popper is rendered or not.\tboolean tagName The outer HTML element name. Default is div.\t\"div\" | \"section\" | \"ul\" | \"ol\" | \"dl\" reference The reference element that the popper will be attached to. Reference: - Popper - createPopper Element | VirtualElement | null placement \"left\" | \"right\" | \"auto\" | \"auto-start\" | \"auto-end\" | \"top\" | \"bottom\" | \"top-start\" | \"top-end\" | \"bottom-start\" | \"bottom-end\" | \"right-start\" | \"right-end\" | \"left-start\" | \"left-end\" modifiers Partial<Modifier<any, any>>[] strategy \"absolute\" | \"fixed\" onFirstUpdate ((arg0: Partial<State>) => void) "},{"title":"Usage","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#usage","content":"Tooltips display simple contextual information about a related element on demand. They are used to name or describe a related element. Dos Do use a tooltip to label an interactive element with no visible text such as a button with no text.Do use a tooltip to provide add additional descriptive information to a named element. Don'ts Don't use a tooltip if the contents of the tooltip contain any meaningful markup such as italics, headings, or lists.Don't use a tooltip if the contents of the tooltip are contain even one interactive element, such as links, buttons, or form controls. Use a tooltip... to name a control when there isn't enough space to display the label inline.to display an additional description about a control or element that already has an accessible name. "},{"title":"Naming and describing","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#naming-and-describing","content":"In the Norton design system, a tooltip can only be used to nameor describe its related element. This restriction ensures that the user experience of the tooltip is consistent for everyone. "},{"title":"Naming","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#naming","content":"A tooltip is said to be naming its related element when it is acting as a label for that element. For instance, an icon button's call to action could be captured as a tooltip to ensure that the purpose of the icon button is clear to everyone. If the element contains textual content and you also want to use a tooltip, the tooltip should be a describing tooltip. Naming tooltips & screen reader experience When a tooltip names its related element, screen readers will read the value of the tooltip when they encounter the related element, entirely ignoring any textual content inside the element. For this reason, naming tooltips should only be used for elements that do not already contain textual content. "},{"title":"Describing","type":1,"pageTitle":"Tooltip","url":"docs/components/tooltip#describing","content":"A tooltip is said to be describing its related element when it is acting as additional or supplemental information about an element that already has a name. For instance, an <input> that already has an associated <label> could use a tooltip to display help text about the expected input format. Describing tooltips & screen reader experience When a tooltip describes its related element, many screen readers will read the name of the related element, pause briefly, and then read the description contained in the tooltip. "},{"title":"Getting started","type":0,"sectionRef":"#","url":"docs/getting-started","content":"","keywords":""},{"title":"@wwnds/core","type":1,"pageTitle":"Getting started","url":"docs/getting-started#wwndscore","content":"The core package contains our CSS framework as Sass modules. To use it, simply@use or @forward it in your project. We highly recommend forwarding a configured version of the design system and using it in your own modules. /my-project/src/main.scss Copy @forward '@wwnds/core' with ( $font-family-base:'My fancy font', $radius-base:var(--nds-radius-xl), $primary-family:'cyan', ); This file can then be @used in other files to create modular stylesheets. /my-project/src/reset.scss Copy @use 'main' as nds; @include nds.reset; Similarly, this can be used as the basis for CSS modules. /my-project/src/components/my-button/index.module.scss Copy @use '../../main' as nds; @include nds.button-style; .my-custom-button { @include nds.button-base; background-color:var(--nds-teal-70); } /my-project/src/components/my-button/index.jsx Copy import React from\"react\"; import styles from\"./index.module.scss\"; // React component definition... "},{"title":"Sassdoc","type":1,"pageTitle":"Getting started","url":"docs/getting-started#sassdoc","content":"Additional documentation for @wwnds/core can be found on our Sassdoc. "},{"title":"@wwnds/react","type":1,"pageTitle":"Getting started","url":"docs/getting-started#wwndsreact","content":"The React is the primary implementation of the components in the design system. It contains no styling, so while it is not required that you use it with@wwnds/core, it is highly recommended that you use them together. "},{"title":"Storybook","type":1,"pageTitle":"Getting started","url":"docs/getting-started#storybook","content":"For detailed examples of all of the components in @wwnds/react, view our Storybook. "},{"title":"Text Field","type":0,"sectionRef":"#","url":"docs/components/text-field","content":"","keywords":""},{"title":"Anatomy","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#anatomy","content":" LabelContainerOptional Field Indicator optionalHelp Text optionalIcon - Left optionalTextIcon/Control - Right optional An icon or control can go in this space. A text field can have multiple right-side icons/controls Error Text optionalCharacter count optional "},{"title":"Playground","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#playground","content":"Live Editor <TextField maxLength={25} description=\"Use the description to display hints about entry.\" required requiredIndicator > Default text field </TextField> <TextField maxLength={25} description=\"Use the description to display hints about entry.\" required requiredIndicator > Default text field </TextField> Result Default text field (required) Use the description to display hints about entry. 25/25 characters remaining Live Editor <TextField type=\"password\" required minLength={8} maxLength={32} validateOnChange> Password </TextField> <TextField type=\"password\" required minLength={8} maxLength={32} validateOnChange> Password </TextField> Result Password "},{"title":"Props","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#props","content":"Name\tDescription\tType type Text fields can be a limited subset of <input> types.\t\"number\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"search\" | \"password\" addonBefore One or more addon that should be included before the <input>.\tReactNode addonAfter One or more addon that should be included after the <input>.\tReactNode feedback Feedback about the user's current input value. By default, this will contain validation errors and the counter, if maxLength is specified. string | ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<any, any, any>)> counterStart When the character counter should begin showing.\tnumber counter A function that takes the remaining number of characters and the maximum number of characters and returns the string or element that will be rendered in the character counter slot. (({ remaining, max }: TextInputCounterProps) => string | ReactElement<any, string | ((props: any) => ReactElement<any, string | ... | (new (props: any) => Component<any, any, any>)> | null) | (new (props: any) => Component<...>)>) baseName The base class name according to BEM conventions.\tstring inputClass The className for the TextField's <input> element.\tstring addonClass The className for all of the addons (before and after).\tstring groupClass The className for the wrapper that contains the <input> & addons.\tstring feedbackClass The className for the TextField's feedback section, which contains the error text and character count. string counterClass The className for the TextField's character counter element.\tstring invalidClass A className that will be applied to the base element when the <input>is invalid. string inputRef A reference to the internal <input> element.\t((instance: HTMLInputElement | null) => void) | RefObject<HTMLInputElement> | null requiredIndicator Indicates that the indicator should be \"required\" when required=true.\tboolean optionalIndicator Indicates that the indicator should be \"optional\" when required=false.\tboolean onCount Triggered any time the number of characters remaining is updated.\t((remaining?: number) => void) | undefined description An optional description. Use this in place of placeholder text or as help text for your field control. ReactNode labelClass A className for the label element, which will be a <label> if htmlForis included and a <div> otherwise. string descriptionClass A className for the description <div>.\tstring labelId An id for the label element.\tstring descriptionId An id for the description <div>.\tstring errors A list of error strings. If provided, this will be set as an unordered list in the first child slot. string[] errorsClass A className for the error list.\tstring errorsId An id for the error list.\tstring validators A list of validators. A validator contains a function that tests the value for validity and a corresponding message that conveys why the test failed. ValidatorEntry[] validateOnDOMChange Indicates that validation should occur when the DOM's change event is triggered. Note that this event is different from React's onChangecallback, which triggers on the DOM's input event. Reference: - MDN - change event boolean validateOnChange Indicates that validation should occur when onChange is triggered. Alias of validateOnInput. boolean onDOMChange A callback that will be triggered any time the DOM's change event is triggered. Note that this event is different from React's onChangeevent, which triggers on the DOM's input event. Reference: - MDN - change event- MDN - input event ((e: Event) => void) onValidate A callback that will be triggered any time the input is validated. See related validators, validateOnChange, and validateOnChange. ((errors: string[]) => void) "},{"title":"Usage","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#usage","content":"A text field allows a user to freeform type or paste their own response to a prompt.A text field has a label that describes what the user should type.A text field’s label must be visible at all times.A text field’s label must be associated with its input. To associate a label with an input, either use the for attribute or wrap the input in the label element. Dos Do let the size of the input area indicate the amount of content you expect the user to enter. By default, the text field should be full width, defined by the size of its container.Only use a fixed-width input area if the text entry has a specific, known length. The width should remain fixed unless it is wider than its container—then shrink width to fit. Don'ts Don’t use labels that are too long. Labels should be very concise.Don’t include instructions in a label—use help text instead.Don’t disable the user’s ability to select, copy or paste.Don’t require users to write paragraphs of text in a single-line text field. Character Counter A text field may have a character counter, but it is not an intuitive way for users to understand content length.Use a character counter only if it is important for users to know how long their text entry can be, or to clarify if the user surpasses the character limit.By default, a text field does not have a character limit. If necessary, set a limit higher than most users will need.Allow users to enter more than the character limit, and then display an error. This lets a user type or copy and paste their full text entry, then edit it down.The character count should be announced to assistive technology users after they stop typing. Placeholder A text field may have placeholder text to provide hints or examples, but placeholder text should not contain important information.Don’t use placeholder text in place of a label, because it will disappear once the user starts typing in the field.Set an accessible color for placeholder text. Most browsers’ default rendering of placeholder text does not provide a high enough contrast ratio. Required Text Fields By default, a text field should be optional unless there is a significant reason to mark it as required.If using both required and optional text fields in a form, include a clear signifier to differentiate required fields from optional fields. Error Validation By default, display error validation on a text field as soon as the user has moved to the next field.Use caution if displaying error validation before the user has finished entering text.Use caution if displaying error validation on Save or Submit, especially if the text field will not be visible on screen when Save or Submit is activated. "},{"title":"Types","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#types","content":"Text field types are based on the HTML input types that do not require a separate interface for entry, such as a date picker. Where possible, they should be implemented with their corresponding <input> type. "},{"title":"Number","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#number","content":"Allows the user to enter a number, and can display step arrows on focus.Includes built-in validation to reject non-numeric text entry.The default step value is 1, but can be set with more or less granularity, including decimal values.Allow users to use the up and down arrows on their keyboard to adjust the value typed into the field. "},{"title":"Email","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#email","content":"Allows the user to enter an email address or list of email addresses.Includes built-in validation to ensure text entry is a properly formatted email address.Some devices may display an email-specific keyboard for easier entry.Can allow the user's browser to automatically fill out the field, if enabled. "},{"title":"Password","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#password","content":"Allows the user to securely enter a password by obscuring the text entry.Can allow the user’s browser or password manager to automatically fill out the field. "},{"title":"URL","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#url","content":"Allows the user to enter a URL.Includes built-in validation to ensure text entry is a properly formatted URL.Some devices may display a URL keyboard for easier entry. "},{"title":"Tel","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#tel","content":"Allows the user to enter a telephone number.The text entry is not automatically validated, because telephone numbers vary around the world.Some devices may display a telephone keyboard for easier entry. "},{"title":"Text Wrapping Variants","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#text-wrapping-variants","content":"If the user inputs text that cannot fit inside the visible text field container, the text must either wrap or the container must scroll with the text. Three options are provided to address this need. "},{"title":"Single line text field","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#single-line-text-field","content":"A single-line text field displays only one line of text.As the cursor reaches the right edge of the input area, text longer than the input area automatically scrolls left.Use single-line text fields for: Number, Email, Password, and Tel inputs. "},{"title":"Multi-line text field","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#multi-line-text-field","content":"A multi-line text field grows to accommodate multiple lines of text and show all text entry at once.Text longer than the input area wraps to a new line. The input area expands vertically and shifts any screen elements below it.Multi-line text fields initially appear as single-line fields, which is useful for compact layouts that need to accommodate large amounts of text.Use multi-line text fields for: free response input and URL. "},{"title":"Text area text field","type":1,"pageTitle":"Text Field","url":"docs/components/text-field#text-area-text-field","content":"A text area text field has a fixed height.Text longer than the input area wraps onto a new line, and scrolls vertically when the cursor reaches the bottom of the input area.The large size of the input area indicates that longer responses are possible and encouraged.Use text area text fields for: free response inputs with additional formatting capabilities. "},{"title":"Motion","type":0,"sectionRef":"#","url":"docs/motion","content":"","keywords":""},{"title":"Reduced motion","type":1,"pageTitle":"Motion","url":"docs/motion#reduced-motion","content":"To ensure that prefers-reduced-motionis always followed, it is highly recommend that you use the transition Sass function in @wwnds/core to set your transitions. This will multiply the provided duration by the duration-scalar token, which is automatically set to 0 when the user prefers reduced motion. Copy @use'@wwnds/core' as nds; .my-sidebar{ transition: nds.transition(transform,var(--nds-duration-close)); } .my-sidebar.open { transition: nds.transition(transform,var(--nds-duration-open)); } "},{"title":"Debugging motion","type":1,"pageTitle":"Motion","url":"docs/motion#debugging-motion","content":"During development, it can be useful to slow down durations and easings to ensure so that you can see the animations in greater detail. The design system provides a special duration-scalar token to help with this. To modify it, simply open your dev tools, click on the <html> element, and change the value of the --nds-duration-scalar property to any number. Since all durations are multiplied by this token, all motion will automatically scale along with it. "},{"title":"Principles","type":0,"sectionRef":"#","url":"docs/principles","content":"","keywords":""},{"title":"Accessibility first","type":1,"pageTitle":"Principles","url":"docs/principles#accessibility-first","content":"Accessibility is never an afterthought—it is a driving force in all of the choices that go into the design system. Inspired by mobile-first design, this accessibility-first approach defines the information architecture and interaction designs needs for assistive technology before designing for any other modalities. "},{"title":"Migration","type":0,"sectionRef":"#","url":"docs/migration","content":"","keywords":""},{"title":"v0.9.x → v1.0.0-beta.x","type":1,"pageTitle":"Migration","url":"docs/migration#v09x-→-v100-betax","content":"The first beta release contained many breaking changes, most notably a complete rewrite of @wwnds/core. "},{"title":"@wwnds/core","type":1,"pageTitle":"Migration","url":"docs/migration#wwndscore","content":"Core now makes full use of Sass modules and CSS custom properties. If you were previously using @import statements to use the design system's Sass, it is highly recommended that you update to @forward and @use. Entry points# There are two main entry points: @wwnds/core (index.scss) - pure abstracts for all modules and components. Using this directly will give you the most flexibility but will require the most work.@wwnds/core/full (full.scss) - a fully-functional stylesheet with a reset and components declared. Using this directly will require little to no work but won't be as flexible as the default entry point. Copy @use'@wwnds/core' as nds with ( $font-family-base:'Proxima Nova', ); .my-declaration{ font-family:var(--nds-font-family-base);// 'Proxima Nova' // font-family: nds.$font-family-base; // alternatively use the Sass variable // (these will compile to the same thing) } View the @wwnds/core readmefor more about this. "},{"title":"@wwnds/react: TextField","type":1,"pageTitle":"Migration","url":"docs/migration#wwndsreact-textfield","content":"The label prop has been removed in favor of children.The following props have been renamed: help → descriptionhelpClass → descriptionClasserrorClass → errorsClass v0.9.x Copy <TextField label=\"My text field\" help=\"A longer description of the text field.\" helpClass=\"help\" errorClass=\"error\" /> v1.0.0-beta.x Copy <TextField description=\"A longer description of the text field.\" descriptionClass=\"desc\" errorsClass=\"errors\" > My text field </TextField> The resulting HTML has also changed to make better use of field composition. Most notably, the text field is now a modified field component instead of a root \"block\" (in BEM conventions). In other words, the \"block\" class name is now field instead of textfield. This was done to reuse field components across form fields. v1.0.0-beta.x Copy <divclass=\"nds-field nds-field--text nds-field--invalid\"id=\"nds-field-1\"> <divclass=\"nds-field__info\"> <label class=\"nds-field__label\" for=\"nds-field-1-input\" id=\"nds-field-1-label\" > Default Text Field </label> <divclass=\"nds-field__desc\"id=\"nds-field-1-desc\"> The default Text Field has a type of \"text\" </div> </div> <divclass=\"nds-field__group nds-field__group--text\"> <input id=\"nds-field-1-input\" class=\"nds-field__input nds-field__input--text\" aria-describedby=\"nds-field-1-desc\" aria-invalid=\"true\" type=\"text\" value=\"\" required=\"\" aria-errormessage=\"nds-field-1-err\" /> </div> <divclass=\"nds-field__feedback\"> <ul class=\"nds-field__errors\" id=\"nds-field-1-err\" aria-label=\"Errors\" aria-live=\"assertive\" aria-atomic=\"true\" > <li>This nds-field is required.</li> </ul> </div> </div> "},{"title":"Typography","type":0,"sectionRef":"#","url":"docs/typography","content":"Work in progress This page is incomplete and may see significant changes. Please submit feedback on GitHubif you would like to contribute.","keywords":""}]