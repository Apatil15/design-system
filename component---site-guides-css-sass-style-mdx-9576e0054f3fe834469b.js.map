{"version":3,"sources":["webpack:///./site/guides/css-sass-style.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---site-guides-css-sass-style-mdx-9576e0054f3fe834469b.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/design-system/design-system/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <blockquote>\n      <p parentName=\"blockquote\">{`W.W. Norton & Company recommends a slightly modified `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/airbnb/css\"\n        }}>{`Airbnb CSS / SASS styleguide`}</a>{`.`}</p>\n    </blockquote>\n    <h1 {...{\n      \"id\": \"airbnb-css--sass-styleguide\"\n    }}>{`Airbnb CSS / Sass Styleguide`}</h1>\n    <h2 {...{\n      \"id\": \"terminology\"\n    }}>{`Terminology`}</h2>\n    <h3 {...{\n      \"id\": \"rule-declaration\"\n    }}>{`Rule declaration`}</h3>\n    <p>{`A “rule declaration” is the name given to a selector (or a group of selectors) with an accompanying group of properties. Here's an example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.listing {\n  font-size: 18px;\n  line-height: 1.2;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"selectors\"\n    }}>{`Selectors`}</h3>\n    <p>{`In a rule declaration, “selectors” are the bits that determine which elements in the DOM tree will be styled by the defined properties. Selectors can match HTML elements, as well as an element's class, ID, or any of its attributes. Here are some examples of selectors:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.my-element-class {\n  /* ... */\n}\n\n[aria-hidden] {\n  /* ... */\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h3>\n    <p>{`Finally, properties are what give the selected elements of a rule declaration their style. Properties are key-value pairs, and a rule declaration can contain one or more property declarations. Property declarations look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`/* some selector */ {\n  background: #f1f1f1;\n  color: #333;\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"use-em-or-rem-for-font-size-property-value\"\n    }}>{`Use `}<inlineCode parentName=\"h4\">{`em`}</inlineCode>{` or `}<inlineCode parentName=\"h4\">{`rem`}</inlineCode>{` for `}<inlineCode parentName=\"h4\">{`font-size:`}</inlineCode>{` property value`}</h4>\n    <p>{`W.W. Norton & Company strongly suggests using `}<inlineCode parentName=\"p\">{`em`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`rem`}</inlineCode>{` for font-size as opposed to `}<inlineCode parentName=\"p\">{`px`}</inlineCode>{` to ensure that font scaling works as expected accross devices. For all new projects, font sizes should be in em or rem.`}</p>\n    <h2 {...{\n      \"id\": \"css\"\n    }}>{`CSS`}</h2>\n    <h3 {...{\n      \"id\": \"formatting\"\n    }}>{`Formatting`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Use tabs for indentation.`}</li>\n      <li parentName=\"ul\">{`Prefer dashes over camelCasing in class names.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Underscores and PascalCasing are okay if you are using BEM (see `}<a parentName=\"li\" {...{\n              \"href\": \"#oocss-and-bem\"\n            }}>{`OOCSS and BEM`}</a>{` below).`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`Do not use ID selectors.`}</li>\n      <li parentName=\"ul\">{`When using multiple selectors in a rule declaration, give each selector its own line.`}</li>\n      <li parentName=\"ul\">{`Put a space before the opening brace `}<inlineCode parentName=\"li\">{`{`}</inlineCode>{` in rule declarations.`}</li>\n      <li parentName=\"ul\">{`In properties, put a space after, but not before, the `}<inlineCode parentName=\"li\">{`:`}</inlineCode>{` character.`}</li>\n      <li parentName=\"ul\">{`Put closing braces `}<inlineCode parentName=\"li\">{`}`}</inlineCode>{` of rule declarations on a new line.`}</li>\n      <li parentName=\"ul\">{`Put blank lines between rule declarations.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Bad`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.avatar{\n    border-radius:50%;\n    border:2px solid white; }\n.no, .nope, .not_good {\n    // ...\n}\n#lol-no {\n  // ...\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Good`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.avatar {\n  border-radius: 50%;\n  border: 2px solid white;\n}\n\n.one,\n.selector,\n.per-line {\n  // ...\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"comments\"\n    }}>{`Comments`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Prefer line comments (`}<inlineCode parentName=\"li\">{`//`}</inlineCode>{` in Sass-land) to block comments.`}</li>\n      <li parentName=\"ul\">{`Prefer comments on their own line. Avoid end-of-line comments.`}</li>\n      <li parentName=\"ul\">{`Write detailed comments for code that isn't self-documenting:`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Uses of z-index`}</li>\n          <li parentName=\"ul\">{`Compatibility or browser-specific hacks`}</li>\n        </ul></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"oocss-and-bem\"\n    }}>{`OOCSS and BEM`}</h3>\n    <p>{`We encourage some combination of OOCSS and BEM for these reasons:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`It helps create clear, strict relationships between CSS and HTML`}</li>\n      <li parentName=\"ul\">{`It helps us create reusable, composable components`}</li>\n      <li parentName=\"ul\">{`It allows for less nesting and lower specificity`}</li>\n      <li parentName=\"ul\">{`It helps in building scalable stylesheets`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`OOCSS`}</strong>{`, or “Object Oriented CSS”, is an approach for writing CSS that encourages you to think about your stylesheets as a collection of “objects”: reusable, repeatable snippets that can be used independently throughout a website.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Nicole Sullivan's `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/stubbornella/oocss/wiki\"\n        }}>{`OOCSS wiki`}</a></li>\n      <li parentName=\"ul\">{`Smashing Magazine's `}<a parentName=\"li\" {...{\n          \"href\": \"http://www.smashingmagazine.com/2011/12/12/an-introduction-to-object-oriented-css-oocss/\"\n        }}>{`Introduction to OOCSS`}</a></li>\n    </ul>\n    <p><strong parentName=\"p\">{`BEM`}</strong>{`, or “Block-Element-Modifier”, is a `}<em parentName=\"p\">{`naming convention`}</em>{` for classes in HTML and CSS. It was originally developed by Yandex with large codebases and scalability in mind, and can serve as a solid set of guidelines for implementing OOCSS.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`CSS Trick's `}<a parentName=\"li\" {...{\n          \"href\": \"https://css-tricks.com/bem-101/\"\n        }}>{`BEM 101`}</a></li>\n      <li parentName=\"ul\">{`Harry Roberts' `}<a parentName=\"li\" {...{\n          \"href\": \"http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/\"\n        }}>{`introduction to BEM`}</a></li>\n    </ul>\n    <p>{`We recommend a variant of BEM with PascalCased “blocks”, which works particularly well when combined with components (e.g. React). Underscores and dashes are still used for modifiers and children.`}</p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// ListingCard.jsx\nfunction ListingCard() {\n  return (\n    <article class=\"ListingCard ListingCard--featured\">\n\n      <h1 class=\"ListingCard__title\">Adorable 2BR in the sunny Mission</h1>\n\n      <div class=\"ListingCard__content\">\n        <p>Vestibulum id ligula porta felis euismod semper.</p>\n      </div>\n\n    </article>\n  );\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`/* ListingCard.css */\n.ListingCard { }\n.ListingCard--featured { }\n.ListingCard__title { }\n.ListingCard__content { }\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`.ListingCard`}</inlineCode>{` is the “block” and represents the higher-level component`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`.ListingCard__title`}</inlineCode>{` is an “element” and represents a descendant of `}<inlineCode parentName=\"li\">{`.ListingCard`}</inlineCode>{` that helps compose the block as a whole.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`.ListingCard--featured`}</inlineCode>{` is a “modifier” and represents a different state or variation on the `}<inlineCode parentName=\"li\">{`.ListingCard`}</inlineCode>{` block.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"id-selectors\"\n    }}>{`ID selectors`}</h3>\n    <p>{`While it is possible to select elements by ID in CSS, it should generally be considered an anti-pattern. ID selectors introduce an unnecessarily high level of `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity\"\n      }}>{`specificity`}</a>{` to your rule declarations, and they are not reusable.`}</p>\n    <p>{`For more on this subject, read `}<a parentName=\"p\" {...{\n        \"href\": \"http://csswizardry.com/2014/07/hacks-for-dealing-with-specificity/\"\n      }}>{`CSS Wizardry's article`}</a>{` on dealing with specificity.`}</p>\n    <h3 {...{\n      \"id\": \"javascript-hooks\"\n    }}>{`JavaScript hooks`}</h3>\n    <p>{`Avoid binding to the same class in both your CSS and JavaScript. Conflating the two often leads to, at a minimum, time wasted during refactoring when a developer must cross-reference each class they are changing, and at its worst, developers being afraid to make changes for fear of breaking functionality.`}</p>\n    <p>{`We recommend creating JavaScript-specific classes to bind to, prefixed with `}<inlineCode parentName=\"p\">{`.js-`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<button class=\"btn btn-primary js-request-to-book\">Request to Book</button>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"border\"\n    }}>{`Border`}</h3>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`none`}</inlineCode>{` to specify that a style has no border.`}</p>\n    <p><strong parentName=\"p\">{`Bad`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.foo {\n  border: none;\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Good`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.foo {\n  border: 0;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"sass\"\n    }}>{`Sass`}</h2>\n    <h3 {...{\n      \"id\": \"syntax\"\n    }}>{`Syntax`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Use the `}<inlineCode parentName=\"li\">{`.scss`}</inlineCode>{` syntax, never the original `}<inlineCode parentName=\"li\">{`.sass`}</inlineCode>{` syntax`}</li>\n      <li parentName=\"ul\">{`Order your regular CSS and `}<inlineCode parentName=\"li\">{`@include`}</inlineCode>{` declarations logically (see below)`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"ordering-of-property-declarations\"\n    }}>{`Ordering of property declarations`}</h3>\n    <blockquote>\n      <p parentName=\"blockquote\">{`W.W. Norton & Company's property ordering style is inspired by `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/primer/primer/blob/master/tools/stylelint-config-primer/index.js#L47-L217\"\n        }}>{`the order from GitHub's Primer design system`}</a>{` instead of alphabetical.\nW.W. Norton also adds and groups accessibility properties to the bottom of that list. This list can be found on our `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/wwnorton/style/blob/main/packages/stylelint-config-norton/src/rules/plugins/property-order.js\"\n        }}>{`Github repository`}</a>{`.`}</p>\n    </blockquote>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Property declarations`}</p>\n        <p parentName=\"li\">{`List all standard property declarations, anything that isn't an `}<inlineCode parentName=\"p\">{`@include`}</inlineCode>{` or a nested selector.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-scss\"\n          }}>{`.btn-green {\n  font-weight: bold;\n  background: 'green';\n  // ...\n}\n`}</code></pre>\n      </li>\n    </ol>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`@include`}</inlineCode>{` declarations`}</p>\n        <p parentName=\"li\">{`Grouping `}<inlineCode parentName=\"p\">{`@include`}</inlineCode>{`s at the end makes it easier to read the entire selector.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-scss\"\n          }}>{`.btn-green {\n  font-weight: bold;\n  background: 'green';\n\n  @include transition(background 0.5s ease);\n  // ...\n}\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Nested selectors`}</p>\n        <p parentName=\"li\">{`Nested selectors, `}<em parentName=\"p\">{`if necessary`}</em>{`, go last, and nothing goes after them. Add whitespace between your rule declarations and nested selectors, as well as between adjacent nested selectors. Apply the same guidelines as above to your nested selectors.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-scss\"\n          }}>{`.btn {\n    font-weight: bold;\n    background: 'green';\n\n    @include transition(background 0.5s ease);\n\n    .icon {\n        margin-right: 10px;\n    }\n}\n`}</code></pre>\n      </li>\n    </ol>\n    <h3 {...{\n      \"id\": \"variables\"\n    }}>{`Variables`}</h3>\n    <p>{`Prefer dash-cased variable names (e.g. `}<inlineCode parentName=\"p\">{`$my-variable`}</inlineCode>{`) over camelCased or snake_cased variable names. It is acceptable to prefix variable names that are intended to be used only within the same file with an underscore (e.g. `}<inlineCode parentName=\"p\">{`$_my-variable`}</inlineCode>{`).`}</p>\n    <h3 {...{\n      \"id\": \"mixins\"\n    }}>{`Mixins`}</h3>\n    <p>{`Mixins should be used to DRY up your code, add clarity, or abstract complexity--in much the same way as well-named functions. Mixins that accept no arguments can be useful for this, but note that if you are not compressing your payload (e.g. gzip), this may contribute to unnecessary code duplication in the resulting styles.`}</p>\n    <h3 {...{\n      \"id\": \"extend-directive\"\n    }}>{`Extend directive`}</h3>\n    <p><inlineCode parentName=\"p\">{`@extend`}</inlineCode>{` should be avoided because it has unintuitive and potentially dangerous behavior, especially when used with nested selectors. Even extending top-level placeholder selectors can cause problems if the order of selectors ends up changing later (e.g. if they are in other files and the order the files are loaded shifts). Gzipping should handle most of the savings you would have gained by using `}<inlineCode parentName=\"p\">{`@extend`}</inlineCode>{`, and you can DRY up your stylesheets nicely with mixins.`}</p>\n    <h3 {...{\n      \"id\": \"nested-selectors\"\n    }}>{`Nested selectors`}</h3>\n    <p><strong parentName=\"p\">{`Do not nest selectors more than three levels deep!`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`.page-container {\n  .content {\n    .profile {\n      // STOP!\n    }\n  }\n}\n`}</code></pre>\n    <p>{`When selectors become this long, you're likely writing CSS that is:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Strongly coupled to the HTML (fragile) `}<em parentName=\"li\">{`—OR—`}</em></li>\n      <li parentName=\"ul\">{`Overly specific (powerful) `}<em parentName=\"li\">{`—OR—`}</em></li>\n      <li parentName=\"ul\">{`Not reusable`}</li>\n    </ul>\n    <p>{`Again: `}<strong parentName=\"p\">{`never nest ID selectors!`}</strong></p>\n    <p>{`If you must use an ID selector in the first place (and you should really try not to), they should never be nested. If you find yourself doing this, you need to revisit your markup, or figure out why such strong specificity is needed. If you are writing well formed HTML and CSS, you should `}<strong parentName=\"p\">{`never`}</strong>{` need to do this.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}