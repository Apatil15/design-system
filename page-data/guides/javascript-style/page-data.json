{"componentChunkName":"component---site-guides-javascript-style-mdx","path":"/guides/javascript-style","result":{"pageContext":{"frontmatter":{"name":"JavaScript Style","route":"/guides/javascript-style","menu":"Guides"},"entry":{"id":"e039769333899e4e469d60942be489e9","filepath":"site/guides/javascript-style.mdx","fullpath":"/home/runner/work/design-system/design-system/docs/site/guides/javascript-style.mdx","route":"/guides/javascript-style","slug":"site-guides-javascript-style","name":"JavaScript Style","menu":"Guides","headings":[{"slug":"javascript-style","depth":1,"value":"JavaScript Style"},{"slug":"formatting","depth":2,"value":"Formatting"},{"slug":"tabs-for-indentation","depth":3,"value":"Tabs for indentation"},{"slug":"newlines","depth":3,"value":"Newlines"},{"slug":"no-trailing-whitespace","depth":3,"value":"No trailing whitespace"},{"slug":"use-semicolons","depth":3,"value":"Use semicolons"},{"slug":"80-characters-per-line","depth":3,"value":"80 characters per line"},{"slug":"use-single-quotes","depth":3,"value":"Use single quotes"},{"slug":"declare-one-variable-per-var-statement","depth":3,"value":"Declare one variable per var statement"},{"slug":"whitespace","depth":2,"value":"Whitespace"},{"slug":"use-tabs","depth":3,"value":"Use tabs."},{"slug":"place-1-space-before-the-leading-brace","depth":3,"value":"Place 1 space before the leading brace."},{"slug":"place-1-space-before-the-opening-parenthesis-in-control-statements-if-while-etc-place-no-space-between-the-argument-list-and-the-function-name-in-function-calls-and-declarations","depth":3,"value":"Place 1 space before the opening parenthesis in control statements ( if ,  while  etc.). Place no space between the argument list and the function name in function calls and declarations."},{"slug":"set-off-operators-with-spaces","depth":3,"value":"Set off operators with spaces."},{"slug":"end-files-with-a-single-newline-character","depth":3,"value":"End files with a single newline character."},{"slug":"use-indentation-when-making-long-method-chains-more-than-2-method-chains-use-a-leading-dot-which-emphasizes-that-the-line-is-a-method-call-not-a-new-statement","depth":3,"value":"Use indentation when making long method chains (more than 2 method chains). Use a leading dot, which emphasizes that the line is a method call, not a new statement."},{"slug":"leave-a-blank-line-after-blocks-and-before-the-next-statement","depth":3,"value":"Leave a blank line after blocks and before the next statement."},{"slug":"do-not-pad-your-blocks-with-blank-lines","depth":3,"value":"Do not pad your blocks with blank lines."},{"slug":"do-not-use-multiple-blank-lines-to-pad-your-code","depth":3,"value":"Do not use multiple blank lines to pad your code."},{"slug":"do-not-add-spaces-inside-parentheses","depth":3,"value":"Do not add spaces inside parentheses."},{"slug":"do-not-add-spaces-inside-brackets","depth":3,"value":"Do not add spaces inside brackets."},{"slug":"add-spaces-inside-curly-braces","depth":3,"value":"Add spaces inside curly braces."},{"slug":"avoid-having-lines-of-code-that-are-longer-than-80-characters-including-whitespace-note-long-strings-are-exempt-from-this-rule-and-should-not-be-broken-up","depth":3,"value":"Avoid having lines of code that are longer than 80 characters (including whitespace). Note: long strings are exempt from this rule, and should not be broken up."},{"slug":"require-consistent-spacing-inside-an-open-block-token-and-the-next-token-on-the-same-line-this-rule-also-enforces-consistent-spacing-inside-a-close-block-token-and-previous-token-on-the-same-line","depth":3,"value":"Require consistent spacing inside an open block token and the next token on the same line. This rule also enforces consistent spacing inside a close block token and previous token on the same line."},{"slug":"avoid-spaces-before-commas-and-require-a-space-after-commas","depth":3,"value":"Avoid spaces before commas and require a space after commas."},{"slug":"enforce-spacing-inside-of-computed-property-brackets","depth":3,"value":"Enforce spacing inside of computed property brackets."},{"slug":"avoid-spaces-between-functions-and-their-invocations","depth":3,"value":"Avoid spaces between functions and their invocations."},{"slug":"enforce-spacing-between-keys-and-values-in-object-literal-properties","depth":3,"value":"Enforce spacing between keys and values in object literal properties."},{"slug":"avoid-trailing-spaces-at-the-end-of-lines","depth":3,"value":"Avoid trailing spaces at the end of lines."},{"slug":"avoid-multiple-empty-lines-only-allow-one-newline-at-the-end-of-files-and-avoid-a-newline-at-the-beginning-of-files","depth":3,"value":"Avoid multiple empty lines, only allow one newline at the end of files, and avoid a newline at the beginning of files."},{"slug":"types","depth":2,"value":"Types"},{"slug":"primitives","depth":3,"value":"Primitives"},{"slug":"complex","depth":3,"value":"Complex:"},{"slug":"references","depth":2,"value":"References"},{"slug":"use-const-for-all-of-your-references","depth":3,"value":"Use  const  for all of your references:"},{"slug":"use-let-instead-of-var","depth":3,"value":"Use  let  instead of  var ."},{"slug":"note-that-both-let-and-const-are-block-scoped","depth":3,"value":"Note that both  let  and  const  are block-scoped."},{"slug":"objects","depth":2,"value":"Objects"},{"slug":"use-the-literal-syntax-for-object-creation","depth":3,"value":"Use the literal syntax for object creation."},{"slug":"use-computed-property-names-when-creating-objects-with-dynamic-property-names","depth":3,"value":"Use computed property names when creating objects with dynamic property names."},{"slug":"use-object-method-shorthand","depth":3,"value":"Use object method shorthand."},{"slug":"use-property-value-shorthand","depth":3,"value":"Use property value shorthand."},{"slug":"group-your-shorthand-properties-at-the-beginning-of-your-object-declaration","depth":3,"value":"Group your shorthand properties at the beginning of your object declaration."},{"slug":"only-quote-properties-that-are-invalid-identifiers","depth":3,"value":"Only quote properties that are invalid identifiers."},{"slug":"do-not-call-objectprototype-methods-directly","depth":3,"value":"Do not call  Object.prototype  methods directly,"},{"slug":"prefer-the-object-spread-operator","depth":3,"value":"Prefer the object spread operator."},{"slug":"arrays","depth":2,"value":"Arrays"},{"slug":"use-the-literal-syntax-for-array-creation","depth":3,"value":"Use the literal syntax for array creation."},{"slug":"use-arraypush","depth":3,"value":"Use Arraypush"},{"slug":"use-array-spreads--to-copy-arrays","depth":3,"value":"Use array spreads  ...  to copy arrays."},{"slug":"to-convert-an-iterable-object-to-an-array-use-spreads--instead-of-arrayfrom","depth":3,"value":"To convert an iterable object to an array, use spreads  ...  instead of Array.from"},{"slug":"use-arrayfrom","depth":3,"value":"Use Array.from"},{"slug":"use-arrayfrom-instead-of-spread--for-mapping-over-iterables-because-it-avoids-creating-an-intermediate-array","depth":3,"value":"Use  Array.from  instead of spread  ...  for mapping over iterables, because it avoids creating an intermediate array."},{"slug":"use-return-statements-in-array-method-callbacks","depth":3,"value":"Use return statements in array method callbacks."},{"slug":"use-line-breaks-after-open-and-before-close-array-brackets-if-an-array-has-multiple-lines","depth":3,"value":"Use line breaks after open and before close array brackets if an array has multiple lines"},{"slug":"destructuring","depth":2,"value":"Destructuring"},{"slug":"use-object-destructuring-when-accessing-and-using-multiple-properties-of-an-object","depth":3,"value":"Use object destructuring when accessing and using multiple properties of an object."},{"slug":"use-array-destructuring","depth":3,"value":"Use array destructuring."},{"slug":"use-object-destructuring-for-multiple-return-values-not-array-destructuring","depth":3,"value":"Use object destructuring for multiple return values, not array destructuring."},{"slug":"strings","depth":2,"value":"Strings"},{"slug":"use-single-quotes--for-strings","depth":3,"value":"Use single quotes  ''  for strings."},{"slug":"strings-that-cause-the-line-to-go-over-80-characters-should-not-be-written-across-multiple-lines-using-string-concatenation","depth":3,"value":"Strings that cause the line to go over 80 characters should not be written across multiple lines using string concatenation."},{"slug":"when-programmatically-building-up-strings-use-template-strings-instead-of-concatenation","depth":3,"value":"When programmatically building up strings, use template strings instead of concatenation."},{"slug":"never-use-eval-on-a-string-it-opens-too-many-vulnerabilities","depth":3,"value":"Never use  eval()  on a string, it opens too many vulnerabilities."},{"slug":"do-not-unnecessarily-escape-characters-in-strings","depth":3,"value":"Do not unnecessarily escape characters in strings."},{"slug":"functions","depth":2,"value":"Functions"},{"slug":"use-named-function-expressions-instead-of-function-declarations","depth":3,"value":"Use named function expressions instead of function declarations."},{"slug":"wrap-immediately-invoked-function-expressions-in-parentheses","depth":3,"value":"Wrap immediately invoked function expressions in parentheses."},{"slug":"never-declare-a-function-in-a-non-function-block","depth":3,"value":"Never declare a function in a non-function block"},{"slug":"a-function-declaration-is-not-a-statement","depth":3,"value":"A function declaration is not a statement."},{"slug":"never-name-a-parameter-arguments-this-will-take-precedence-over-the-arguments-object-that-is-given-to-every-function-scope","depth":3,"value":"Never name a parameter  arguments . This will take precedence over the  arguments  object that is given to every function scope."},{"slug":"never-use-arguments-opt-to-use-rest-syntax--instead","depth":3,"value":"Never use  arguments , opt to use rest syntax  ...  instead."},{"slug":"use-default-parameter-syntax-rather-than-mutating-function-arguments","depth":3,"value":"Use default parameter syntax rather than mutating function arguments."},{"slug":"avoid-side-effects-with-default-parameters","depth":3,"value":"Avoid side effects with default parameters."},{"slug":"always-put-default-parameters-last","depth":3,"value":"Always put default parameters last."},{"slug":"never-use-the-function-constructor-to-create-a-new-function","depth":3,"value":"Never use the Function constructor to create a new function."},{"slug":"spacing-in-a-function-signature","depth":3,"value":"Spacing in a function signature."},{"slug":"never-mutate-parameters","depth":3,"value":"Never mutate parameters."},{"slug":"never-reassign-parameters","depth":3,"value":"Never reassign parameters."},{"slug":"prefer-the-use-of-the-spread-operator--to-call-variadic-functions","depth":3,"value":"Prefer the use of the spread operator  ...  to call variadic functions."},{"slug":"functions-with-multiline-signatures-or-invocations-should-be-indented-just-like-every-other-multiline","depth":3,"value":"Functions with multiline signatures, or invocations, should be indented just like every other multiline."},{"slug":"arrow-functions","depth":2,"value":"Arrow Functions"},{"slug":"when-you-must-use-an-anonymous-function-as-when-passing-an-inline-callback-use-arrow-function-notation","depth":3,"value":"When you must use an anonymous function (as when passing an inline callback), use arrow function notation."},{"slug":"if-the-function-body-consists-of-a-single-statement-omit-the-braces-and-use-the-implicit-return-otherwise-keep-the-braces-and-use-a-return-statement","depth":3,"value":"If the function body consists of a single statement, omit the braces and use the implicit return. Otherwise, keep the braces and use a  return  statement."},{"slug":"in-case-the-expression-spans-over-multiple-lines-wrap-it-in-parentheses-for-better-readability","depth":3,"value":"In case the expression spans over multiple lines, wrap it in parentheses for better readability."},{"slug":"always-include-parentheses-around-arguments-for-clarity-and-consistency","depth":3,"value":"Always include parentheses around arguments for clarity and consistency."},{"slug":"avoid-confusing-arrow-function-syntax--with-comparison-operators--","depth":3,"value":"Avoid confusing arrow function syntax ( => ) with comparison operators ( <= ,  >= )."},{"slug":"enforce-the-location-of-arrow-function-bodies-with-implicit-returns","depth":3,"value":"Enforce the location of arrow function bodies with implicit returns."},{"slug":"classes--constructors","depth":2,"value":"Classes & Constructors"},{"slug":"always-use-class","depth":3,"value":"Always use  class ."},{"slug":"use-extends-for-inheritance","depth":3,"value":"Use  extends  for inheritance."},{"slug":"methods-can-return-this-to-help-with-method-chaining","depth":3,"value":"Methods can return  this  to help with method chaining."},{"slug":"its-okay-to-write-a-custom-tostring-method-just-make-sure-it-works-successfully-and-causes-no-side-effects","depth":3,"value":"It’s okay to write a custom  toString()  method, just make sure it works successfully and causes no side effects."},{"slug":"classes-have-a-default-constructor-if-one-is-not-specified","depth":3,"value":"Classes have a default constructor if one is not specified."},{"slug":"avoid-duplicate-class-members","depth":3,"value":"Avoid duplicate class members."},{"slug":"class-methods-should-use-this-or-be-made-into-a-static-method-unless-an-external-library-or-framework-requires-to-use-specific-non-static-methods","depth":3,"value":"Class methods should use  this  or be made into a static method unless an external library or framework requires to use specific non-static methods."},{"slug":"modules","depth":2,"value":"Modules"},{"slug":"always-use-modules-importexport-over-a-non-standard-module-system-you-can-always-transpile-to-your-preferred-module-system","depth":3,"value":"Always use modules ( import / export ) over a non-standard module system. You can always transpile to your preferred module system."},{"slug":"do-not-use-wildcard-imports","depth":3,"value":"Do not use wildcard imports."},{"slug":"and-do-not-export-directly-from-an-import","depth":3,"value":"And do not export directly from an import."},{"slug":"only-import-from-a-path-in-one-place","depth":3,"value":"Only import from a path in one place."},{"slug":"do-not-export-mutable-bindings","depth":3,"value":"Do not export mutable bindings."},{"slug":"in-modules-with-a-single-export-prefer-default-export-over-named-export","depth":3,"value":"In modules with a single export, prefer default export over named export."},{"slug":"multiline-imports-should-be-indented-just-like-multiline-array-and-object-literals","depth":3,"value":"Multiline imports should be indented just like multiline array and object literals."},{"slug":"disallow-webpack-loader-syntax-in-module-import-statements","depth":3,"value":"Disallow Webpack loader syntax in module import statements."},{"slug":"do-not-include-javascript-filename-extensions","depth":3,"value":"Do not include JavaScript filename extensions"},{"slug":"iterators-and-generators","depth":2,"value":"Iterators and Generators"},{"slug":"dont-use-iterators","depth":3,"value":"Don't use iterators."},{"slug":"dont-use-generators-for-now","depth":3,"value":"Don’t use generators for now."},{"slug":"if-you-must-use-generators-or-if-you-disregard-our-advice-make-sure-their-function-signature-is-spaced-properly","depth":3,"value":"If you must use generators, or if you disregard  our advice , make sure their function signature is spaced properly."},{"slug":"properties","depth":2,"value":"Properties"},{"slug":"use-dot-notation-when-accessing-properties","depth":3,"value":"Use dot notation when accessing properties."},{"slug":"use-bracket-notation--when-accessing-properties-with-a-variable","depth":3,"value":"Use bracket notation  []  when accessing properties with a variable."},{"slug":"use-exponentiation-operator--when-calculating-exponentiations","depth":3,"value":"Use exponentiation operator  **  when calculating exponentiations."},{"slug":"variables","depth":2,"value":"Variables"},{"slug":"always-use-const-or-let-to-declare-variables","depth":3,"value":"Always use  const  or  let  to declare variables."},{"slug":"use-one-const-or-let-declaration-per-variable-or-assignment","depth":3,"value":"Use one  const  or  let  declaration per variable or assignment."},{"slug":"group-all-your-const-and-then-group-all-your-let","depth":3,"value":"Group all your  const  and then group all your  let ."},{"slug":"assign-variables-where-you-need-them-but-place-them-in-a-reasonable-place","depth":3,"value":"Assign variables where you need them, but place them in a reasonable place."},{"slug":"dont-chain-variable-assignments","depth":3,"value":"Don't chain variable assignments."},{"slug":"avoid-using-unary-increments-and-decrements----","depth":3,"value":"Avoid using unary increments and decrements ( ++ ,  -- )."},{"slug":"avoid-linebreaks-before-or-after--in-an-assignment","depth":3,"value":"Avoid linebreaks before or after  =  in an assignment."},{"slug":"disallow-unused-variables","depth":3,"value":"Disallow unused variables."},{"slug":"object--array-creation","depth":3,"value":"Object / Array creation"},{"slug":"hoisting","depth":2,"value":"Hoisting"},{"slug":"var-declarations-get-hoisted-to-the-top-of-their-closest-enclosing-function-scope-their-assignment-does-not","depth":3,"value":"var  declarations get hoisted to the top of their closest enclosing function scope, their assignment does not."},{"slug":"anonymous-function-expressions-hoist-their-variable-name-but-not-the-function-assignment","depth":3,"value":"Anonymous function expressions hoist their variable name, but not the function assignment."},{"slug":"named-function-expressions-hoist-the-variable-name-not-the-function-name-or-the-function-body","depth":3,"value":"Named function expressions hoist the variable name, not the function name or the function body."},{"slug":"function-declarations-hoist-their-name-and-the-function-body","depth":3,"value":"Function declarations hoist their name and the function body."},{"slug":"comparison-operators--equality","depth":2,"value":"Comparison Operators & Equality"},{"slug":"must-use--and--over--and-","depth":3,"value":"Must use  ===  and  !==  over  ==  and  != ."},{"slug":"conditional-statements-such-as-the-if-statement-evaluate-their-expression-using-coercion-with-the-toboolean-abstract-method-and-always-follow-these-simple-rules","depth":3,"value":"Conditional statements such as the  if  statement evaluate their expression using coercion with the  ToBoolean  abstract method and always follow these simple rules:"},{"slug":"use-shortcuts-for-booleans-but-explicit-comparisons-for-strings-and-numbers","depth":3,"value":"Use shortcuts for booleans, but explicit comparisons for strings and numbers."},{"slug":"for-more-information-see-truth-equality-and-javascript-by-angus-croll","depth":3,"value":"For more information see  Truth Equality and JavaScript  by Angus Croll."},{"slug":"use-braces-to-create-blocks-in-case-and-default-clauses-that-contain-lexical-declarations-eg-let-const-function-and-class","depth":3,"value":"Use braces to create blocks in  case  and  default  clauses that contain lexical declarations (e.g.  let ,  const ,  function , and  class )."},{"slug":"ternaries-should-not-be-nested-and-generally-be-single-line-expressions","depth":3,"value":"Ternaries should not be nested and generally be single line expressions."},{"slug":"avoid-unneeded-ternary-statements","depth":3,"value":"Avoid unneeded ternary statements."},{"slug":"when-mixing-operators-enclose-them-in-parentheses","depth":3,"value":"When mixing operators, enclose them in parentheses."},{"slug":"blocks","depth":2,"value":"Blocks"},{"slug":"use-braces-with-all-multiline-blocks","depth":3,"value":"Use braces with all multiline blocks."},{"slug":"if-youre-using-multiline-blocks-with-if-and-else-put-else-on-the-same-line-as-your-if-blocks-closing-brace","depth":3,"value":"If you're using multiline blocks with  if  and  else , put  else  on the same line. as your  if  block's closing brace."},{"slug":"if-an-if-block-always-executes-a-return-statement-the-subsequent-else-block-is-unnecessary","depth":3,"value":"If an  if  block always executes a  return  statement, the subsequent  else  block is unnecessary."},{"slug":"control-statements","depth":2,"value":"Control Statements"},{"slug":"in-case-your-control-statement-if-while-etc-gets-too-long-or-exceeds-the-maximum-line-length-each-grouped-condition-could-be-put-into-a-new-line-the-logical-operator-should-begin-the-line","depth":3,"value":"In case your control statement ( if ,  while  etc.) gets too long or exceeds the maximum line length, each (grouped) condition could be put into a new line. The logical operator should begin the line."},{"slug":"dont-use-selection-operators-in-place-of-control-statements","depth":3,"value":"Don't use selection operators in place of control statements."},{"slug":"comments","depth":2,"value":"Comments"},{"slug":"use----for-multiline-comments","depth":3,"value":"Use  /** ... */  for multiline comments."},{"slug":"use--for-single-line-comments","depth":3,"value":"Use  //  for single line comments."},{"slug":"start-all-comments-with-a-space-to-make-it-easier-to-read","depth":3,"value":"Start all comments with a space to make it easier to read."},{"slug":"prefixing-your-comments-with-fixme-or-todo-helps-other-developers-quickly-understand","depth":3,"value":"Prefixing your comments with  FIXME  or  TODO  helps other developers quickly understand."},{"slug":"use--fixme-to-annotate-problems","depth":4,"value":"Use  // FIXME:  to annotate problems."},{"slug":"use--todo-to-annotate-solutions-to-problems","depth":4,"value":"Use  // TODO:  to annotate solutions to problems."},{"slug":"commas","depth":2,"value":"Commas"},{"slug":"leading-commas-nope","depth":3,"value":"Leading commas:  Nope."},{"slug":"additional-trailing-comma-yup","depth":3,"value":"Additional trailing comma:  Yup."},{"slug":"semicolons","depth":2,"value":"Semicolons"},{"slug":"yup","depth":3,"value":"Yup."},{"slug":"type-casting--coercion","depth":2,"value":"Type Casting & Coercion"},{"slug":"perform-type-coercion-at-the-beginning-of-the-statement","depth":3,"value":"Perform type coercion at the beginning of the statement."},{"slug":"strings-1","depth":3,"value":"Strings"},{"slug":"numbers-use-number-for-type-casting-and-parseint-always-with-a-radix-for-parsing-strings","depth":3,"value":"Numbers: Use  Number  for type casting and  parseInt  always with a radix for parsing strings."},{"slug":"if-for-whatever-reason-you-are-doing-something-wild-and-parseint-is-your-bottleneck-and-need-to-use-bitshift-for-performance-reasons-leave-a-comment-explaining-why-and-what-youre-doing","depth":3,"value":"If for whatever reason you are doing something wild and  parseInt  is your bottleneck and need to use Bitshift for  performance reasons , leave a comment explaining why and what you’re doing."},{"slug":"note-be-careful-when-using-bitshift-operations-numbers-are-represented-as-64-bit-values-but-bitshift-operations-always-return-a-32-bit-integer-source-bitshift-can-lead-to-unexpected-behavior-for-integer-values-larger-than-32-bits-discussion-largest-signed-32-bit-int-is-2147483647","depth":3,"value":"Note:  Be careful when using bitshift operations. Numbers are represented as  64-bit values , but bitshift operations always return a 32-bit integer ( source ). Bitshift can lead to unexpected behavior for integer values larger than 32 bits.  Discussion . Largest signed 32-bit Int is 2,147,483,647:"},{"slug":"booleans","depth":3,"value":"Booleans"},{"slug":"naming-conventions","depth":2,"value":"Naming Conventions"},{"slug":"avoid-single-letter-names-be-descriptive-with-your-naming","depth":3,"value":"Avoid single letter names. Be descriptive with your naming."},{"slug":"use-camelcase-when-naming-objects-functions-and-instances","depth":3,"value":"Use camelCase when naming objects, functions, and instances."},{"slug":"use-pascalcase-only-when-naming-constructors-or-classes","depth":3,"value":"Use PascalCase only when naming constructors or classes."},{"slug":"do-not-use-trailing-or-leading-underscores","depth":3,"value":"Do not use trailing or leading underscores."},{"slug":"dont-save-references-to-this-use-arrow-functions-or-functionbind","depth":3,"value":"Don’t save references to  this . Use arrow functions or  Function#bind ."},{"slug":"a-base-filename-should-exactly-match-the-name-of-its-default-export","depth":3,"value":"A base filename should exactly match the name of its default export."},{"slug":"use-camelcase-when-you-export-default-a-function-your-filename-should-be-identical-to-your-functions-name","depth":3,"value":"Use camelCase when you export-default a function. Your filename should be identical to your function’s name."},{"slug":"use-pascalcase-when-you-export-a-constructor--class--singleton--function-library--bare-object","depth":3,"value":"Use PascalCase when you export a constructor / class / singleton / function library / bare object."},{"slug":"acronyms-and-initialisms-should-always-be-all-uppercased-or-all-lowercased","depth":3,"value":"Acronyms and initialisms should always be all uppercased, or all lowercased."},{"slug":"you-may-optionally-uppercase-a-constant-only-if-it-1-is-exported-2-is-a-const-it-can-not-be-reassigned-and-3-the-programmer-can-trust-it-and-its-nested-properties-to-never-change","depth":3,"value":"You may optionally uppercase a constant only if it (1) is exported, (2) is a  const  (it can not be reassigned), and (3) the programmer can trust it (and its nested properties) to never change."},{"slug":"use-uppercase-for-constants","depth":3,"value":"Use UPPERCASE for Constants"},{"slug":"use-camelcase-for-variables-properties-and-function-names","depth":3,"value":"Use camelCase for variables, properties and function names"},{"slug":"accessors","depth":2,"value":"Accessors"},{"slug":"accessor-functions-for-properties-are-not-required","depth":3,"value":"Accessor functions for properties are not required."},{"slug":"do-not-use-javascript-getterssetters-as-they-cause-unexpected-side-effects-and-are-harder-to-test-maintain-and-reason-about-instead-if-you-do-make-accessor-functions-use-getval-and-setvalhello","depth":3,"value":"Do not use JavaScript getters/setters as they cause unexpected side effects and are harder to test, maintain, and reason about. Instead, if you do make accessor functions, use  getVal()  and  setVal('hello') ."},{"slug":"if-the-propertymethod-is-a-boolean-use-isval-or-hasval","depth":3,"value":"If the property/method is a  boolean , use  isVal()  or  hasVal() ."},{"slug":"events","depth":2,"value":"Events"},{"slug":"when-attaching-data-payloads-to-events-whether-dom-events-or-something-more-proprietary-like-backbone-events-pass-an-object-literal-also-known-as-a-hash-instead-of-a-raw-value-this-allows-a-subsequent-contributor-to-add-more-data-to-the-event-payload-without-finding-and-updating-every-handler-for-the-event-for-example-instead-of","depth":3,"value":"When attaching data payloads to events (whether DOM events or something more proprietary like Backbone events), pass an object literal (also known as a \"hash\") instead of a raw value. This allows a subsequent contributor to add more data to the event payload without finding and updating every handler for the event. For example, instead of:"},{"slug":"jquery","depth":2,"value":"jQuery"},{"slug":"prefix-jquery-object-variables-with-a-","depth":3,"value":"Prefix jQuery object variables with a  $ ."},{"slug":"cache-jquery-lookups","depth":3,"value":"Cache jQuery lookups."},{"slug":"for-dom-queries-use-cascading-sidebar-ul-or-parent--child-sidebar--ul","depth":3,"value":"For DOM queries use Cascading  $('.sidebar ul')  or parent > child  $('.sidebar > ul') ."},{"slug":"use-find-with-scoped-jquery-object-queries","depth":3,"value":"Use  find  with scoped jQuery object queries."},{"slug":"ecmascript-5-compatibility","depth":2,"value":"ECMAScript 5 Compatibility"},{"slug":"refer-to-kangaxs-es5-compatibility-table","depth":3,"value":"Refer to  Kangax ’s ES5  compatibility table ."},{"slug":"ecmascript-6-es-2015-styles","depth":2,"value":"ECMAScript 6+ (ES 2015+) Styles"},{"slug":"this-is-a-collection-of-links-to-the-various-es6-features","depth":3,"value":"This is a collection of links to the various ES6+ features."},{"slug":"standard-library","depth":2,"value":"Standard Library"},{"slug":"use-numberisnan-instead-of-global-isnan","depth":3,"value":"Use  Number.isNaN  instead of global  isNaN ."},{"slug":"use-numberisfinite-instead-of-global-isfinite","depth":3,"value":"Use  Number.isFinite  instead of global  isFinite ."},{"slug":"testing","depth":2,"value":"Testing"},{"slug":"yup-1","depth":3,"value":"Yup."},{"slug":"no-but-seriously","depth":3,"value":"No, but seriously :"},{"slug":"performance","depth":2,"value":"Performance"},{"slug":"resources","depth":2,"value":"Resources"},{"slug":"versioning","depth":2,"value":"Versioning"},{"slug":"authors","depth":2,"value":"Authors"}]}}},"staticQueryHashes":["1635659820"]}